
ZmiennyPWM_oraz_Enkoder_22.05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d898  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  0800da28  0800da28  0000ea28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dde4  0800dde4  0000f1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dde4  0800dde4  0000ede4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddec  0800ddec  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddec  0800ddec  0000edec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ddf0  0800ddf0  0000edf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800ddf4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  200001e8  0800dfdc  0000f1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  0800dfdc  0000f634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ecf  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ac  00000000  00000000  000290e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d8  00000000  00000000  0002c198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012b8  00000000  00000000  0002d970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a592  00000000  00000000  0002ec28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b226  00000000  00000000  000591ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b43e  00000000  00000000  000743e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017f81e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076ec  00000000  00000000  0017f864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00186f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800da10 	.word	0x0800da10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800da10 	.word	0x0800da10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b0a      	cmp	r3, #10
 8000ee0:	d102      	bne.n	8000ee8 <__io_putchar+0x14>
    __io_putchar('\r');
 8000ee2:	200d      	movs	r0, #13
 8000ee4:	f7ff fff6 	bl	8000ed4 <__io_putchar>
  }
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000ee8:	1d39      	adds	r1, r7, #4
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4803      	ldr	r0, [pc, #12]	@ (8000f00 <__io_putchar+0x2c>)
 8000ef2:	f009 f83f 	bl	8009f74 <HAL_UART_Transmit>
  return 1;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000434 	.word	0x20000434

08000f04 <pow100>:

static uint16_t tablica_poz[4] =				///// stałe pozycji cyfr wyswietlacz
{0x68, 0x6A, 0x6C, 0x6E};

///// pomocnicza funkcja do liczenia potęg liczby 10//////////////
uint16_t pow100(uint8_t exp) {
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
    uint16_t result = 1;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	81fb      	strh	r3, [r7, #14]
    while (exp--) result *= 10;
 8000f12:	e005      	b.n	8000f20 <pow100+0x1c>
 8000f14:	89fb      	ldrh	r3, [r7, #14]
 8000f16:	461a      	mov	r2, r3
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	81fb      	strh	r3, [r7, #14]
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	1e5a      	subs	r2, r3, #1
 8000f24:	71fa      	strb	r2, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f4      	bne.n	8000f14 <pow100+0x10>
    return result;
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <ekstrakcja_cyfry09>:

///// cyfry są numerowane od tyłu, tj. cyfra jednosci ma nr 1, cyfra tysiecy ma nr 4 ///////////////////////////
uint8_t ekstrakcja_cyfry09 (int16_t liczba, uint8_t nr_cyfry) /// wersja dla 4 cyfrowej liczby, maks 9999
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	460a      	mov	r2, r1
 8000f42:	80fb      	strh	r3, [r7, #6]
 8000f44:	4613      	mov	r3, r2
 8000f46:	717b      	strb	r3, [r7, #5]
	liczba = abs(liczba);
 8000f48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	bfb8      	it	lt
 8000f50:	425b      	neglt	r3, r3
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	80fb      	strh	r3, [r7, #6]
	if (((liczba >=0) && (liczba < 1000) && ((nr_cyfry >=1) && (nr_cyfry <= 4))))
 8000f56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db24      	blt.n	8000fa8 <ekstrakcja_cyfry09+0x70>
 8000f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f66:	da1f      	bge.n	8000fa8 <ekstrakcja_cyfry09+0x70>
 8000f68:	797b      	ldrb	r3, [r7, #5]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d01c      	beq.n	8000fa8 <ekstrakcja_cyfry09+0x70>
 8000f6e:	797b      	ldrb	r3, [r7, #5]
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	d819      	bhi.n	8000fa8 <ekstrakcja_cyfry09+0x70>
	{
	uint8_t cyfra;
	cyfra = ( (liczba/ pow100(nr_cyfry-1) ) % 10);
 8000f74:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8000f78:	797b      	ldrb	r3, [r7, #5]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ffc0 	bl	8000f04 <pow100>
 8000f84:	4603      	mov	r3, r0
 8000f86:	fb94 f2f3 	sdiv	r2, r4, r3
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <ekstrakcja_cyfry09+0x7c>)
 8000f8c:	fb83 1302 	smull	r1, r3, r3, r2
 8000f90:	1099      	asrs	r1, r3, #2
 8000f92:	17d3      	asrs	r3, r2, #31
 8000f94:	1ac9      	subs	r1, r1, r3
 8000f96:	460b      	mov	r3, r1
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	1ad1      	subs	r1, r2, r3
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	73fb      	strb	r3, [r7, #15]
	return cyfra;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	e000      	b.n	8000faa <ekstrakcja_cyfry09+0x72>
	}
	else
	{ return 0;	}
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd90      	pop	{r4, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	66666667 	.word	0x66666667

08000fb8 <konw09_na_I2C>:
/////////////////////////////////////// konwersja liczby 0-9 na kod I2C dla wyświetlacza
uint8_t konw09_na_I2C (uint8_t cyfra)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	if (cyfra >= 0 && cyfra <10)
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2b09      	cmp	r3, #9
 8000fc6:	d803      	bhi.n	8000fd0 <konw09_na_I2C+0x18>
	{		return tablica_znakow_09[cyfra];}
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	4a05      	ldr	r2, [pc, #20]	@ (8000fe0 <konw09_na_I2C+0x28>)
 8000fcc:	5cd3      	ldrb	r3, [r2, r3]
 8000fce:	e001      	b.n	8000fd4 <konw09_na_I2C+0x1c>
	else
	{		return tablica_znakow_09[0];}
 8000fd0:	4b03      	ldr	r3, [pc, #12]	@ (8000fe0 <konw09_na_I2C+0x28>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <buforuj_cyfry>:

//////////////////////////////////////////////// funkcja wyświetlająca (również liczby ujemne)
void buforuj_cyfry(int liczba)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<=3; i++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	e019      	b.n	8001026 <buforuj_cyfry+0x42>
	{
		uint8_t buforek = ekstrakcja_cyfry09(liczba,i+1);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	b21a      	sxth	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	4619      	mov	r1, r3
 8001000:	4610      	mov	r0, r2
 8001002:	f7ff ff99 	bl	8000f38 <ekstrakcja_cyfry09>
 8001006:	4603      	mov	r3, r0
 8001008:	72fb      	strb	r3, [r7, #11]
		bufor[i] = konw09_na_I2C(buforek);
 800100a:	7afb      	ldrb	r3, [r7, #11]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ffd3 	bl	8000fb8 <konw09_na_I2C>
 8001012:	4603      	mov	r3, r0
 8001014:	4619      	mov	r1, r3
 8001016:	4a0c      	ldr	r2, [pc, #48]	@ (8001048 <buforuj_cyfry+0x64>)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	460a      	mov	r2, r1
 800101e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<=3; i++)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3301      	adds	r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2b03      	cmp	r3, #3
 800102a:	dde2      	ble.n	8000ff2 <buforuj_cyfry+0xe>
	}

	if (liczba>=0)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db03      	blt.n	800103a <buforuj_cyfry+0x56>
	{	bufor[3] = 0x00;} // zgaszone wszystkie segmenty
 8001032:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <buforuj_cyfry+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	70da      	strb	r2, [r3, #3]
	else
	{	bufor[3] = 0x40;} /// zapalony tylko segment "G" - ("minus")
//	wyswietl_kolejna_cyferke();/// POZYCJA 3 to cyfra tysiecy (nr 4), z kolei wartosc do wyśw. jest w bufor[0]
}
 8001038:	e002      	b.n	8001040 <buforuj_cyfry+0x5c>
	{	bufor[3] = 0x40;} /// zapalony tylko segment "G" - ("minus")
 800103a:	4b03      	ldr	r3, [pc, #12]	@ (8001048 <buforuj_cyfry+0x64>)
 800103c:	2240      	movs	r2, #64	@ 0x40
 800103e:	70da      	strb	r2, [r3, #3]
}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200004d8 	.word	0x200004d8

0800104c <ustaw_odswiezanie>:

////////////////////////////////////////////////////
void ustaw_odswiezanie(uint16_t freq) //// zmienia odswiezanie pojedynczej cyfry wyswietlacza /// f - wartosc w Hz
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
	//// preskaler powinien byc ustawiony na 7999 (8000), przy zegarze 80MHz

	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, (10000/freq - 1 ));
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	f242 7210 	movw	r2, #10000	@ 0x2710
 800105c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001060:	1e5a      	subs	r2, r3, #1
 8001062:	4b04      	ldr	r3, [pc, #16]	@ (8001074 <ustaw_odswiezanie+0x28>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	200003e8 	.word	0x200003e8

08001078 <inicjalizacja_wyswietlacz>:
void inicjalizacja_wyswietlacz(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af02      	add	r7, sp, #8
	////// wyslanie poczatkowych ustawien - jasnosc
	ustaw_odswiezanie(1000-1);
 800107e:	f240 30e7 	movw	r0, #999	@ 0x3e7
 8001082:	f7ff ffe3 	bl	800104c <ustaw_odswiezanie>
	uint8_t komenda = 0x01;
 8001086:	2301      	movs	r3, #1
 8001088:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, 0x48 , &komenda , 1, 10);
 800108a:	1dfa      	adds	r2, r7, #7
 800108c:	230a      	movs	r3, #10
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	2148      	movs	r1, #72	@ 0x48
 8001094:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <inicjalizacja_wyswietlacz+0x30>)
 8001096:	f003 fdf7 	bl	8004c88 <HAL_I2C_Master_Transmit>
	wyslano_wysw_I2C = 1;
 800109a:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <inicjalizacja_wyswietlacz+0x34>)
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200002b0 	.word	0x200002b0
 80010ac:	200004d6 	.word	0x200004d6

080010b0 <wyswietl_kolejna_cyferke>:
void wyswietl_kolejna_cyferke(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
	wyslano_wysw_I2C = 1;
 80010b6:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <wyswietl_kolejna_cyferke+0x50>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
	if(ktora_cyferka >= 0 && ktora_cyferka < 4)
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <wyswietl_kolejna_cyferke+0x54>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d818      	bhi.n	80010f6 <wyswietl_kolejna_cyferke+0x46>
	{
		uint8_t cyferka = bufor[ktora_cyferka];
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <wyswietl_kolejna_cyferke+0x54>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <wyswietl_kolejna_cyferke+0x58>)
 80010cc:	5c9b      	ldrb	r3, [r3, r2]
 80010ce:	71fb      	strb	r3, [r7, #7]
		if (wyslano_wysw_I2C == 1)
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <wyswietl_kolejna_cyferke+0x50>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d10e      	bne.n	80010f6 <wyswietl_kolejna_cyferke+0x46>
		{
			HAL_I2C_Master_Transmit_IT(&hi2c1, tablica_poz[3-ktora_cyferka],&cyferka , 1);
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <wyswietl_kolejna_cyferke+0x54>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	f1c3 0303 	rsb	r3, r3, #3
 80010e0:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <wyswietl_kolejna_cyferke+0x5c>)
 80010e2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80010e6:	1dfa      	adds	r2, r7, #7
 80010e8:	2301      	movs	r3, #1
 80010ea:	4809      	ldr	r0, [pc, #36]	@ (8001110 <wyswietl_kolejna_cyferke+0x60>)
 80010ec:	f003 fee4 	bl	8004eb8 <HAL_I2C_Master_Transmit_IT>
			wyslano_wysw_I2C = 0;
 80010f0:	4b03      	ldr	r3, [pc, #12]	@ (8001100 <wyswietl_kolejna_cyferke+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200004d6 	.word	0x200004d6
 8001104:	200004dc 	.word	0x200004dc
 8001108:	200004d8 	.word	0x200004d8
 800110c:	2000000c 	.word	0x2000000c
 8001110:	200002b0 	.word	0x200002b0

08001114 <HAL_I2C_MasterTxCpltCallback>:

///////////////////////////////////////////////// ISR po zakończeniu transmisji I2C
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a0c      	ldr	r2, [pc, #48]	@ (8001150 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d10f      	bne.n	8001144 <HAL_I2C_MasterTxCpltCallback+0x30>
	{
		ktora_cyferka++;
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <HAL_I2C_MasterTxCpltCallback+0x40>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <HAL_I2C_MasterTxCpltCallback+0x40>)
 800112e:	701a      	strb	r2, [r3, #0]
		if (ktora_cyferka >3)
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <HAL_I2C_MasterTxCpltCallback+0x40>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b03      	cmp	r3, #3
 8001136:	d902      	bls.n	800113e <HAL_I2C_MasterTxCpltCallback+0x2a>
		{
			ktora_cyferka = 0;}
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_I2C_MasterTxCpltCallback+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
		wyslano_wysw_I2C = 1; /// ustawienie flagi po wyslaniu na 1
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_I2C_MasterTxCpltCallback+0x44>)
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
	}
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	200002b0 	.word	0x200002b0
 8001154:	200004dc 	.word	0x200004dc
 8001158:	200004d6 	.word	0x200004d6

0800115c <kierunek>:
//////////////// KONIEC WYSWIETLACA I2C

///////////////////////  REGULATOR PI

void kierunek(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
	if (sygnal_sterujacy_u >= 0)
 8001160:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <kierunek+0x3c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db09      	blt.n	800117c <kierunek+0x20>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,sygnal_sterujacy_u);
 8001168:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <kierunek+0x3c>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <kierunek+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <kierunek+0x40>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2200      	movs	r2, #0
 8001178:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	else {
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,sygnal_sterujacy_u);
	}
}
 800117a:	e008      	b.n	800118e <kierunek+0x32>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 800117c:	4b07      	ldr	r3, [pc, #28]	@ (800119c <kierunek+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2200      	movs	r2, #0
 8001182:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,sygnal_sterujacy_u);
 8001184:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <kierunek+0x3c>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b04      	ldr	r3, [pc, #16]	@ (800119c <kierunek+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	200004c4 	.word	0x200004c4
 800119c:	20000304 	.word	0x20000304

080011a0 <zabezpieczenie_krancowki>:

int zabezpieczenie_krancowki(int krechy, int limit)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	if (abs(krechy) >= limit)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bfb8      	it	lt
 80011b0:	425b      	neglt	r3, r3
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dc01      	bgt.n	80011bc <zabezpieczenie_krancowki+0x1c>
	{
		return 0; ///  brak zezwolenia na ruch, start = 0
 80011b8:	2300      	movs	r3, #0
 80011ba:	e000      	b.n	80011be <zabezpieczenie_krancowki+0x1e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
	}
	else
		return 1; /// start = 1 - mozna sie ruszac
 80011bc:	2301      	movs	r3, #1
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <regulator_PI>:

void regulator_PI(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
	uchyb_e = wart_zadana - krechy;
 80011d2:	4b30      	ldr	r3, [pc, #192]	@ (8001294 <regulator_PI+0xc8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a30      	ldr	r2, [pc, #192]	@ (8001298 <regulator_PI+0xcc>)
 80011d8:	8812      	ldrh	r2, [r2, #0]
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e4:	4b2d      	ldr	r3, [pc, #180]	@ (800129c <regulator_PI+0xd0>)
 80011e6:	edc3 7a00 	vstr	s15, [r3]
	if ((abs(sygnal_sterujacy_u)>= wart) == 0) //// wantiwindup
 80011ea:	4b2d      	ldr	r3, [pc, #180]	@ (80012a0 <regulator_PI+0xd4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80011f2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80011f6:	4b2b      	ldr	r3, [pc, #172]	@ (80012a4 <regulator_PI+0xd8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	da0a      	bge.n	8001214 <regulator_PI+0x48>
	suma_uchybow = uchyb_e + suma_uchybow;
 80011fe:	4b27      	ldr	r3, [pc, #156]	@ (800129c <regulator_PI+0xd0>)
 8001200:	ed93 7a00 	vldr	s14, [r3]
 8001204:	4b28      	ldr	r3, [pc, #160]	@ (80012a8 <regulator_PI+0xdc>)
 8001206:	edd3 7a00 	vldr	s15, [r3]
 800120a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120e:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <regulator_PI+0xdc>)
 8001210:	edc3 7a00 	vstr	s15, [r3]

	float sygn_ster_P = wzmocnienie_K * uchyb_e;
 8001214:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001218:	4b20      	ldr	r3, [pc, #128]	@ (800129c <regulator_PI+0xd0>)
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001222:	edc7 7a01 	vstr	s15, [r7, #4]
	float sygn_ster_I = wzmocnienie_K/st_calkujaca_Ti * suma_uchybow;
 8001226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800122a:	eddf 7a20 	vldr	s15, [pc, #128]	@ 80012ac <regulator_PI+0xe0>
 800122e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001232:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <regulator_PI+0xdc>)
 8001234:	edd3 7a00 	vldr	s15, [r3]
 8001238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800123c:	edc7 7a00 	vstr	s15, [r7]
	sygnal_sterujacy_u = (int)(sygn_ster_I + sygn_ster_P);
 8001240:	ed97 7a00 	vldr	s14, [r7]
 8001244:	edd7 7a01 	vldr	s15, [r7, #4]
 8001248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001250:	ee17 2a90 	vmov	r2, s15
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <regulator_PI+0xd4>)
 8001256:	601a      	str	r2, [r3, #0]

	if (sygnal_sterujacy_u>= wart)		//// ograniczenie syngalu sterujacego
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <regulator_PI+0xd4>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <regulator_PI+0xd8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	db04      	blt.n	800126e <regulator_PI+0xa2>
		sygnal_sterujacy_u = wart;
 8001264:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <regulator_PI+0xd8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <regulator_PI+0xd4>)
 800126a:	6013      	str	r3, [r2, #0]
	else if(sygnal_sterujacy_u<= -wart)
		sygnal_sterujacy_u = -wart;
}
 800126c:	e00b      	b.n	8001286 <regulator_PI+0xba>
	else if(sygnal_sterujacy_u<= -wart)
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <regulator_PI+0xd8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	425a      	negs	r2, r3
 8001274:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <regulator_PI+0xd4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	db04      	blt.n	8001286 <regulator_PI+0xba>
		sygnal_sterujacy_u = -wart;
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <regulator_PI+0xd8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	425b      	negs	r3, r3
 8001282:	4a07      	ldr	r2, [pc, #28]	@ (80012a0 <regulator_PI+0xd4>)
 8001284:	6013      	str	r3, [r2, #0]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	200004c8 	.word	0x200004c8
 8001298:	200004d4 	.word	0x200004d4
 800129c:	200004c0 	.word	0x200004c0
 80012a0:	200004c4 	.word	0x200004c4
 80012a4:	200004d0 	.word	0x200004d0
 80012a8:	200004cc 	.word	0x200004cc
 80012ac:	3e99999a 	.word	0x3e99999a

080012b0 <HAL_TIM_PeriodElapsedCallback>:

///// ISR /// TIMER 1


void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef *htim)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	{
		//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
		//HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);

	}
	if (htim == &htim15)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a0e      	ldr	r2, [pc, #56]	@ (80012f4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d106      	bne.n	80012ce <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		wyswietl_kolejna_cyferke();
 80012c0:	f7ff fef6 	bl	80010b0 <wyswietl_kolejna_cyferke>
		 HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80012c4:	2120      	movs	r1, #32
 80012c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ca:	f003 fc27 	bl	8004b1c <HAL_GPIO_TogglePin>
	}
	if (htim == &htim6)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a09      	ldr	r2, [pc, #36]	@ (80012f8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d10a      	bne.n	80012ec <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		regulator_PI();
 80012d6:	f7ff ff79 	bl	80011cc <regulator_PI>
		kierunek();
 80012da:	f7ff ff3f 	bl	800115c <kierunek>
		zabezpieczenie_krancowki(krechy, 1000);
 80012de:	4b07      	ldr	r3, [pc, #28]	@ (80012fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff5a 	bl	80011a0 <zabezpieczenie_krancowki>
	}
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200003e8 	.word	0x200003e8
 80012f8:	2000039c 	.word	0x2000039c
 80012fc:	200004d4 	.word	0x200004d4

08001300 <HAL_TIM_OC_DelayElapsedCallback>:

//// ISR dla poszczegolnych kanałow

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <skalowanie2>:
	return wynikINT;
}


uint32_t skalowanie2(uint32_t input)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	@ 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	float zakres_in = 4096.0;
 800131c:	f04f 438b 	mov.w	r3, #1166016512	@ 0x45800000
 8001320:	61fb      	str	r3, [r7, #28]
	float zakres_out = 100.0;
 8001322:	4b16      	ldr	r3, [pc, #88]	@ (800137c <skalowanie2+0x68>)
 8001324:	61bb      	str	r3, [r7, #24]
	int in_MIN = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
	int out_MIN = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
	float wynik;
	wynik = (zakres_out/zakres_in) * (input - in_MIN) + out_MIN;
 800132e:	edd7 6a06 	vldr	s13, [r7, #24]
 8001332:	edd7 7a07 	vldr	s15, [r7, #28]
 8001336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	ee07 3a90 	vmov	s15, r3
 8001344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001348:	ee27 7a27 	vmul.f32	s14, s14, s15
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135a:	edc7 7a03 	vstr	s15, [r7, #12]
	uint32_t wynikINT = (uint32_t)wynik;
 800135e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001366:	ee17 3a90 	vmov	r3, s15
 800136a:	60bb      	str	r3, [r7, #8]
	return wynikINT;
 800136c:	68bb      	ldr	r3, [r7, #8]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	@ 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	42c80000 	.word	0x42c80000

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001386:	f001 f873 	bl	8002470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138a:	f000 f88b 	bl	80014a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138e:	f000 fbd3 	bl	8001b38 <MX_GPIO_Init>
  MX_DMA_Init();
 8001392:	f000 fbb3 	bl	8001afc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001396:	f000 fb81 	bl	8001a9c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800139a:	f000 f999 	bl	80016d0 <MX_TIM1_Init>
  MX_ADC1_Init();
 800139e:	f000 f8d3 	bl	8001548 <MX_ADC1_Init>
  MX_I2C1_Init();
 80013a2:	f000 f955 	bl	8001650 <MX_I2C1_Init>
  MX_TIM3_Init();
 80013a6:	f000 fa4d 	bl	8001844 <MX_TIM3_Init>
  MX_TIM15_Init();
 80013aa:	f000 fad9 	bl	8001960 <MX_TIM15_Init>
  MX_TIM6_Init();
 80013ae:	f000 fa9f 	bl	80018f0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim1);
 80013b2:	4830      	ldr	r0, [pc, #192]	@ (8001474 <main+0xf4>)
 80013b4:	f006 fff0 	bl	8008398 <HAL_TIM_Base_Start_IT>
//HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
//HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2); output compare, A ponizej PWM

HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //// inicjalizacja w trybie PWM
 80013b8:	2100      	movs	r1, #0
 80013ba:	482e      	ldr	r0, [pc, #184]	@ (8001474 <main+0xf4>)
 80013bc:	f007 fa74 	bl	80088a8 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013c0:	2104      	movs	r1, #4
 80013c2:	482c      	ldr	r0, [pc, #176]	@ (8001474 <main+0xf4>)
 80013c4:	f007 fa70 	bl	80088a8 <HAL_TIM_PWM_Start>
HAL_TIM_Base_Start_IT(&htim15);
 80013c8:	482b      	ldr	r0, [pc, #172]	@ (8001478 <main+0xf8>)
 80013ca:	f006 ffe5 	bl	8008398 <HAL_TIM_Base_Start_IT>
HAL_TIM_OC_Start_IT(&htim15, TIM_CHANNEL_1);
 80013ce:	2100      	movs	r1, #0
 80013d0:	4829      	ldr	r0, [pc, #164]	@ (8001478 <main+0xf8>)
 80013d2:	f007 f8b3 	bl	800853c <HAL_TIM_OC_Start_IT>


/////////////////// INICJALIZACJA ADC z uzyciem DMA
HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80013d6:	217f      	movs	r1, #127	@ 0x7f
 80013d8:	4828      	ldr	r0, [pc, #160]	@ (800147c <main+0xfc>)
 80013da:	f002 fced 	bl	8003db8 <HAL_ADCEx_Calibration_Start>
HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_wartosc,1);
 80013de:	2201      	movs	r2, #1
 80013e0:	4927      	ldr	r1, [pc, #156]	@ (8001480 <main+0x100>)
 80013e2:	4826      	ldr	r0, [pc, #152]	@ (800147c <main+0xfc>)
 80013e4:	f001 fc2c 	bl	8002c40 <HAL_ADC_Start_DMA>

uint32_t wypelnienie = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]

////////////// WYSWIETLACZ
inicjalizacja_wyswietlacz();
 80013ec:	f7ff fe44 	bl	8001078 <inicjalizacja_wyswietlacz>
//// TRYB ENKODERA
HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80013f0:	213c      	movs	r1, #60	@ 0x3c
 80013f2:	4824      	ldr	r0, [pc, #144]	@ (8001484 <main+0x104>)
 80013f4:	f007 fc04 	bl	8008c00 <HAL_TIM_Encoder_Start>

int16_t prev_value = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	817b      	strh	r3, [r7, #10]



///////////// REGULATOR
uchyb_e = 0;
 80013fc:	4b22      	ldr	r3, [pc, #136]	@ (8001488 <main+0x108>)
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
sygnal_sterujacy_u = 0;
 8001404:	4b21      	ldr	r3, [pc, #132]	@ (800148c <main+0x10c>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
suma_uchybow = 0.0;
 800140a:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <main+0x110>)
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
wart_zadana = 0;
 8001412:	4b20      	ldr	r3, [pc, #128]	@ (8001494 <main+0x114>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
int counter=0;
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
  while (1)

  {
	  krechy = __HAL_TIM_GET_COUNTER(&htim3);
 800141c:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <main+0x104>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001422:	b29a      	uxth	r2, r3
 8001424:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <main+0x118>)
 8001426:	801a      	strh	r2, [r3, #0]
	  wart = skalowanie2(ADC_wartosc);
 8001428:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <main+0x100>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff71 	bl	8001314 <skalowanie2>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	4b19      	ldr	r3, [pc, #100]	@ (800149c <main+0x11c>)
 8001438:	601a      	str	r2, [r3, #0]
	  buforuj_cyfry(krechy);
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <main+0x118>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fdd0 	bl	8000fe4 <buforuj_cyfry>
	  zabezpieczenie_krancowki(krechy, 1000);
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <main+0x118>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fea7 	bl	80011a0 <zabezpieczenie_krancowki>
	  if (HAL_GPIO_ReadPin(USER_BUTTON1_GPIO_Port, USER_BUTTON1_Pin) == GPIO_PIN_SET)
 8001452:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001456:	4812      	ldr	r0, [pc, #72]	@ (80014a0 <main+0x120>)
 8001458:	f003 fb30 	bl	8004abc <HAL_GPIO_ReadPin>
 800145c:	4603      	mov	r3, r0
 800145e:	2b01      	cmp	r3, #1
 8001460:	d1dc      	bne.n	800141c <main+0x9c>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8001462:	4b04      	ldr	r3, [pc, #16]	@ (8001474 <main+0xf4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2200      	movs	r2, #0
 8001468:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
 800146a:	4b02      	ldr	r3, [pc, #8]	@ (8001474 <main+0xf4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2200      	movs	r2, #0
 8001470:	639a      	str	r2, [r3, #56]	@ 0x38
	  krechy = __HAL_TIM_GET_COUNTER(&htim3);
 8001472:	e7d3      	b.n	800141c <main+0x9c>
 8001474:	20000304 	.word	0x20000304
 8001478:	200003e8 	.word	0x200003e8
 800147c:	20000204 	.word	0x20000204
 8001480:	200004bc 	.word	0x200004bc
 8001484:	20000350 	.word	0x20000350
 8001488:	200004c0 	.word	0x200004c0
 800148c:	200004c4 	.word	0x200004c4
 8001490:	200004cc 	.word	0x200004cc
 8001494:	200004c8 	.word	0x200004c8
 8001498:	200004d4 	.word	0x200004d4
 800149c:	200004d0 	.word	0x200004d0
 80014a0:	48000800 	.word	0x48000800

080014a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b096      	sub	sp, #88	@ 0x58
 80014a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	2244      	movs	r2, #68	@ 0x44
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f00a fb85 	bl	800bbc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b8:	463b      	mov	r3, r7
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014ca:	f005 fbfb 	bl	8006cc4 <HAL_PWREx_ControlVoltageScaling>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014d4:	f000 fba4 	bl	8001c20 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d8:	2302      	movs	r3, #2
 80014da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e2:	2310      	movs	r3, #16
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e6:	2302      	movs	r3, #2
 80014e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ea:	2302      	movs	r3, #2
 80014ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014ee:	2301      	movs	r3, #1
 80014f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80014f2:	230a      	movs	r3, #10
 80014f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014f6:	2307      	movs	r3, #7
 80014f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014fe:	2302      	movs	r3, #2
 8001500:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4618      	mov	r0, r3
 8001508:	f005 fc32 	bl	8006d70 <HAL_RCC_OscConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001512:	f000 fb85 	bl	8001c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001516:	230f      	movs	r3, #15
 8001518:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151a:	2303      	movs	r3, #3
 800151c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800152a:	463b      	mov	r3, r7
 800152c:	2104      	movs	r1, #4
 800152e:	4618      	mov	r0, r3
 8001530:	f005 fffa 	bl	8007528 <HAL_RCC_ClockConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800153a:	f000 fb71 	bl	8001c20 <Error_Handler>
  }
}
 800153e:	bf00      	nop
 8001540:	3758      	adds	r7, #88	@ 0x58
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	@ 0x28
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
 8001568:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800156a:	4b36      	ldr	r3, [pc, #216]	@ (8001644 <MX_ADC1_Init+0xfc>)
 800156c:	4a36      	ldr	r2, [pc, #216]	@ (8001648 <MX_ADC1_Init+0x100>)
 800156e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001570:	4b34      	ldr	r3, [pc, #208]	@ (8001644 <MX_ADC1_Init+0xfc>)
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001576:	4b33      	ldr	r3, [pc, #204]	@ (8001644 <MX_ADC1_Init+0xfc>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800157c:	4b31      	ldr	r3, [pc, #196]	@ (8001644 <MX_ADC1_Init+0xfc>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001582:	4b30      	ldr	r3, [pc, #192]	@ (8001644 <MX_ADC1_Init+0xfc>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001588:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <MX_ADC1_Init+0xfc>)
 800158a:	2204      	movs	r2, #4
 800158c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800158e:	4b2d      	ldr	r3, [pc, #180]	@ (8001644 <MX_ADC1_Init+0xfc>)
 8001590:	2200      	movs	r2, #0
 8001592:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001594:	4b2b      	ldr	r3, [pc, #172]	@ (8001644 <MX_ADC1_Init+0xfc>)
 8001596:	2201      	movs	r2, #1
 8001598:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800159a:	4b2a      	ldr	r3, [pc, #168]	@ (8001644 <MX_ADC1_Init+0xfc>)
 800159c:	2201      	movs	r2, #1
 800159e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015a0:	4b28      	ldr	r3, [pc, #160]	@ (8001644 <MX_ADC1_Init+0xfc>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a8:	4b26      	ldr	r3, [pc, #152]	@ (8001644 <MX_ADC1_Init+0xfc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ae:	4b25      	ldr	r3, [pc, #148]	@ (8001644 <MX_ADC1_Init+0xfc>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015b4:	4b23      	ldr	r3, [pc, #140]	@ (8001644 <MX_ADC1_Init+0xfc>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015bc:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <MX_ADC1_Init+0xfc>)
 80015be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015c2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <MX_ADC1_Init+0xfc>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001644 <MX_ADC1_Init+0xfc>)
 80015ce:	221c      	movs	r2, #28
 80015d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <MX_ADC1_Init+0xfc>)
 80015d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80015da:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <MX_ADC1_Init+0xfc>)
 80015dc:	2200      	movs	r2, #0
 80015de:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80015e0:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <MX_ADC1_Init+0xfc>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015e6:	4817      	ldr	r0, [pc, #92]	@ (8001644 <MX_ADC1_Init+0xfc>)
 80015e8:	f001 f9da 	bl	80029a0 <HAL_ADC_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80015f2:	f000 fb15 	bl	8001c20 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	4810      	ldr	r0, [pc, #64]	@ (8001644 <MX_ADC1_Init+0xfc>)
 8001602:	f002 fc6b 	bl	8003edc <HAL_ADCEx_MultiModeConfigChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800160c:	f000 fb08 	bl	8001c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001610:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <MX_ADC1_Init+0x104>)
 8001612:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001614:	2306      	movs	r3, #6
 8001616:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001618:	2307      	movs	r3, #7
 800161a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800161c:	237f      	movs	r3, #127	@ 0x7f
 800161e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001620:	2304      	movs	r3, #4
 8001622:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MX_ADC1_Init+0xfc>)
 800162e:	f001 fe05 	bl	800323c <HAL_ADC_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001638:	f000 faf2 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	@ 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000204 	.word	0x20000204
 8001648:	50040000 	.word	0x50040000
 800164c:	08600004 	.word	0x08600004

08001650 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001654:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <MX_I2C1_Init+0x74>)
 8001656:	4a1c      	ldr	r2, [pc, #112]	@ (80016c8 <MX_I2C1_Init+0x78>)
 8001658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800165a:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <MX_I2C1_Init+0x74>)
 800165c:	4a1b      	ldr	r2, [pc, #108]	@ (80016cc <MX_I2C1_Init+0x7c>)
 800165e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001660:	4b18      	ldr	r3, [pc, #96]	@ (80016c4 <MX_I2C1_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001666:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <MX_I2C1_Init+0x74>)
 8001668:	2201      	movs	r2, #1
 800166a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800166c:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <MX_I2C1_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001672:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <MX_I2C1_Init+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001678:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <MX_I2C1_Init+0x74>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800167e:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <MX_I2C1_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001684:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <MX_I2C1_Init+0x74>)
 8001686:	2200      	movs	r2, #0
 8001688:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800168a:	480e      	ldr	r0, [pc, #56]	@ (80016c4 <MX_I2C1_Init+0x74>)
 800168c:	f003 fa60 	bl	8004b50 <HAL_I2C_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001696:	f000 fac3 	bl	8001c20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800169a:	2100      	movs	r1, #0
 800169c:	4809      	ldr	r0, [pc, #36]	@ (80016c4 <MX_I2C1_Init+0x74>)
 800169e:	f005 fa6b 	bl	8006b78 <HAL_I2CEx_ConfigAnalogFilter>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016a8:	f000 faba 	bl	8001c20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016ac:	2100      	movs	r1, #0
 80016ae:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <MX_I2C1_Init+0x74>)
 80016b0:	f005 faad 	bl	8006c0e <HAL_I2CEx_ConfigDigitalFilter>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016ba:	f000 fab1 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200002b0 	.word	0x200002b0
 80016c8:	40005400 	.word	0x40005400
 80016cc:	10d19ce4 	.word	0x10d19ce4

080016d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b09a      	sub	sp, #104	@ 0x68
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
 8001700:	615a      	str	r2, [r3, #20]
 8001702:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	222c      	movs	r2, #44	@ 0x2c
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f00a fa59 	bl	800bbc2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001710:	4b4a      	ldr	r3, [pc, #296]	@ (800183c <MX_TIM1_Init+0x16c>)
 8001712:	4a4b      	ldr	r2, [pc, #300]	@ (8001840 <MX_TIM1_Init+0x170>)
 8001714:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 8001716:	4b49      	ldr	r3, [pc, #292]	@ (800183c <MX_TIM1_Init+0x16c>)
 8001718:	2227      	movs	r2, #39	@ 0x27
 800171a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171c:	4b47      	ldr	r3, [pc, #284]	@ (800183c <MX_TIM1_Init+0x16c>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001722:	4b46      	ldr	r3, [pc, #280]	@ (800183c <MX_TIM1_Init+0x16c>)
 8001724:	2264      	movs	r2, #100	@ 0x64
 8001726:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001728:	4b44      	ldr	r3, [pc, #272]	@ (800183c <MX_TIM1_Init+0x16c>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800172e:	4b43      	ldr	r3, [pc, #268]	@ (800183c <MX_TIM1_Init+0x16c>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b41      	ldr	r3, [pc, #260]	@ (800183c <MX_TIM1_Init+0x16c>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800173a:	4840      	ldr	r0, [pc, #256]	@ (800183c <MX_TIM1_Init+0x16c>)
 800173c:	f006 fdd4 	bl	80082e8 <HAL_TIM_Base_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001746:	f000 fa6b 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001750:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001754:	4619      	mov	r1, r3
 8001756:	4839      	ldr	r0, [pc, #228]	@ (800183c <MX_TIM1_Init+0x16c>)
 8001758:	f007 fd76 	bl	8009248 <HAL_TIM_ConfigClockSource>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001762:	f000 fa5d 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001766:	4835      	ldr	r0, [pc, #212]	@ (800183c <MX_TIM1_Init+0x16c>)
 8001768:	f007 f83c 	bl	80087e4 <HAL_TIM_PWM_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001772:	f000 fa55 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001782:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001786:	4619      	mov	r1, r3
 8001788:	482c      	ldr	r0, [pc, #176]	@ (800183c <MX_TIM1_Init+0x16c>)
 800178a:	f008 fa81 	bl	8009c90 <HAL_TIMEx_MasterConfigSynchronization>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001794:	f000 fa44 	bl	8001c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001798:	2360      	movs	r3, #96	@ 0x60
 800179a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 20;
 800179c:	2314      	movs	r3, #20
 800179e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a0:	2300      	movs	r3, #0
 80017a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017a4:	2300      	movs	r3, #0
 80017a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017b8:	2200      	movs	r2, #0
 80017ba:	4619      	mov	r1, r3
 80017bc:	481f      	ldr	r0, [pc, #124]	@ (800183c <MX_TIM1_Init+0x16c>)
 80017be:	f007 fc2f 	bl	8009020 <HAL_TIM_PWM_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80017c8:	f000 fa2a 	bl	8001c20 <Error_Handler>
  }
  sConfigOC.Pulse = 40;
 80017cc:	2328      	movs	r3, #40	@ 0x28
 80017ce:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017d4:	2204      	movs	r2, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	4818      	ldr	r0, [pc, #96]	@ (800183c <MX_TIM1_Init+0x16c>)
 80017da:	f007 fc21 	bl	8009020 <HAL_TIM_PWM_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80017e4:	f000 fa1c 	bl	8001c20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001800:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800180a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	4619      	mov	r1, r3
 800181c:	4807      	ldr	r0, [pc, #28]	@ (800183c <MX_TIM1_Init+0x16c>)
 800181e:	f008 fabf 	bl	8009da0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001828:	f000 f9fa 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800182c:	4803      	ldr	r0, [pc, #12]	@ (800183c <MX_TIM1_Init+0x16c>)
 800182e:	f000 fbe9 	bl	8002004 <HAL_TIM_MspPostInit>

}
 8001832:	bf00      	nop
 8001834:	3768      	adds	r7, #104	@ 0x68
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000304 	.word	0x20000304
 8001840:	40012c00 	.word	0x40012c00

08001844 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08c      	sub	sp, #48	@ 0x30
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	2224      	movs	r2, #36	@ 0x24
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f00a f9b5 	bl	800bbc2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	463b      	mov	r3, r7
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001862:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <MX_TIM3_Init+0xa4>)
 8001864:	4a21      	ldr	r2, [pc, #132]	@ (80018ec <MX_TIM3_Init+0xa8>)
 8001866:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001868:	4b1f      	ldr	r3, [pc, #124]	@ (80018e8 <MX_TIM3_Init+0xa4>)
 800186a:	2200      	movs	r2, #0
 800186c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186e:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <MX_TIM3_Init+0xa4>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001874:	4b1c      	ldr	r3, [pc, #112]	@ (80018e8 <MX_TIM3_Init+0xa4>)
 8001876:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800187a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187c:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <MX_TIM3_Init+0xa4>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001882:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <MX_TIM3_Init+0xa4>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001888:	2301      	movs	r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001890:	2301      	movs	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018a0:	2301      	movs	r3, #1
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	4619      	mov	r1, r3
 80018b2:	480d      	ldr	r0, [pc, #52]	@ (80018e8 <MX_TIM3_Init+0xa4>)
 80018b4:	f007 f8fe 	bl	8008ab4 <HAL_TIM_Encoder_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80018be:	f000 f9af 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ca:	463b      	mov	r3, r7
 80018cc:	4619      	mov	r1, r3
 80018ce:	4806      	ldr	r0, [pc, #24]	@ (80018e8 <MX_TIM3_Init+0xa4>)
 80018d0:	f008 f9de 	bl	8009c90 <HAL_TIMEx_MasterConfigSynchronization>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80018da:	f000 f9a1 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	3730      	adds	r7, #48	@ 0x30
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000350 	.word	0x20000350
 80018ec:	40000400 	.word	0x40000400

080018f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001900:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <MX_TIM6_Init+0x68>)
 8001902:	4a16      	ldr	r2, [pc, #88]	@ (800195c <MX_TIM6_Init+0x6c>)
 8001904:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001906:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <MX_TIM6_Init+0x68>)
 8001908:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800190c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190e:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <MX_TIM6_Init+0x68>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 8001914:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <MX_TIM6_Init+0x68>)
 8001916:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800191a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <MX_TIM6_Init+0x68>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001922:	480d      	ldr	r0, [pc, #52]	@ (8001958 <MX_TIM6_Init+0x68>)
 8001924:	f006 fce0 	bl	80082e8 <HAL_TIM_Base_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800192e:	f000 f977 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	4619      	mov	r1, r3
 800193e:	4806      	ldr	r0, [pc, #24]	@ (8001958 <MX_TIM6_Init+0x68>)
 8001940:	f008 f9a6 	bl	8009c90 <HAL_TIMEx_MasterConfigSynchronization>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800194a:	f000 f969 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000039c 	.word	0x2000039c
 800195c:	40001000 	.word	0x40001000

08001960 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b09a      	sub	sp, #104	@ 0x68
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001980:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
 8001990:	615a      	str	r2, [r3, #20]
 8001992:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	222c      	movs	r2, #44	@ 0x2c
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f00a f911 	bl	800bbc2 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80019a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001a94 <MX_TIM15_Init+0x134>)
 80019a2:	4a3d      	ldr	r2, [pc, #244]	@ (8001a98 <MX_TIM15_Init+0x138>)
 80019a4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7999;
 80019a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001a94 <MX_TIM15_Init+0x134>)
 80019a8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80019ac:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ae:	4b39      	ldr	r3, [pc, #228]	@ (8001a94 <MX_TIM15_Init+0x134>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 200;
 80019b4:	4b37      	ldr	r3, [pc, #220]	@ (8001a94 <MX_TIM15_Init+0x134>)
 80019b6:	22c8      	movs	r2, #200	@ 0xc8
 80019b8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ba:	4b36      	ldr	r3, [pc, #216]	@ (8001a94 <MX_TIM15_Init+0x134>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80019c0:	4b34      	ldr	r3, [pc, #208]	@ (8001a94 <MX_TIM15_Init+0x134>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c6:	4b33      	ldr	r3, [pc, #204]	@ (8001a94 <MX_TIM15_Init+0x134>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80019cc:	4831      	ldr	r0, [pc, #196]	@ (8001a94 <MX_TIM15_Init+0x134>)
 80019ce:	f006 fc8b 	bl	80082e8 <HAL_TIM_Base_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80019d8:	f000 f922 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80019e2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80019e6:	4619      	mov	r1, r3
 80019e8:	482a      	ldr	r0, [pc, #168]	@ (8001a94 <MX_TIM15_Init+0x134>)
 80019ea:	f007 fc2d 	bl	8009248 <HAL_TIM_ConfigClockSource>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80019f4:	f000 f914 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 80019f8:	4826      	ldr	r0, [pc, #152]	@ (8001a94 <MX_TIM15_Init+0x134>)
 80019fa:	f006 fd3d 	bl	8008478 <HAL_TIM_OC_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001a04:	f000 f90c 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001a10:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a14:	4619      	mov	r1, r3
 8001a16:	481f      	ldr	r0, [pc, #124]	@ (8001a94 <MX_TIM15_Init+0x134>)
 8001a18:	f008 f93a 	bl	8009c90 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001a22:	f000 f8fd 	bl	8001c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001a26:	2300      	movs	r3, #0
 8001a28:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a32:	2300      	movs	r3, #0
 8001a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a42:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a46:	2200      	movs	r2, #0
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4812      	ldr	r0, [pc, #72]	@ (8001a94 <MX_TIM15_Init+0x134>)
 8001a4c:	f007 fa6e 	bl	8008f2c <HAL_TIM_OC_ConfigChannel>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001a56:	f000 f8e3 	bl	8001c20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	@ (8001a94 <MX_TIM15_Init+0x134>)
 8001a7e:	f008 f98f 	bl	8009da0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8001a88:	f000 f8ca 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	3768      	adds	r7, #104	@ 0x68
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200003e8 	.word	0x200003e8
 8001a98:	40014000 	.word	0x40014000

08001a9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <MX_USART2_UART_Init+0x58>)
 8001aa2:	4a15      	ldr	r2, [pc, #84]	@ (8001af8 <MX_USART2_UART_Init+0x5c>)
 8001aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <MX_USART2_UART_Init+0x58>)
 8001aa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <MX_USART2_UART_Init+0x58>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8001af4 <MX_USART2_UART_Init+0x58>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <MX_USART2_UART_Init+0x58>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <MX_USART2_UART_Init+0x58>)
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <MX_USART2_UART_Init+0x58>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <MX_USART2_UART_Init+0x58>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <MX_USART2_UART_Init+0x58>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <MX_USART2_UART_Init+0x58>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ade:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <MX_USART2_UART_Init+0x58>)
 8001ae0:	f008 f9fa 	bl	8009ed8 <HAL_UART_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001aea:	f000 f899 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000434 	.word	0x20000434
 8001af8:	40004400 	.word	0x40004400

08001afc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <MX_DMA_Init+0x38>)
 8001b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b06:	4a0b      	ldr	r2, [pc, #44]	@ (8001b34 <MX_DMA_Init+0x38>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <MX_DMA_Init+0x38>)
 8001b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2106      	movs	r1, #6
 8001b1e:	200b      	movs	r0, #11
 8001b20:	f002 fb67 	bl	80041f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b24:	200b      	movs	r0, #11
 8001b26:	f002 fb80 	bl	800422a <HAL_NVIC_EnableIRQ>

}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000

08001b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	@ 0x28
 8001b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4e:	4b31      	ldr	r3, [pc, #196]	@ (8001c14 <MX_GPIO_Init+0xdc>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b52:	4a30      	ldr	r2, [pc, #192]	@ (8001c14 <MX_GPIO_Init+0xdc>)
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c14 <MX_GPIO_Init+0xdc>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b66:	4b2b      	ldr	r3, [pc, #172]	@ (8001c14 <MX_GPIO_Init+0xdc>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8001c14 <MX_GPIO_Init+0xdc>)
 8001b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b72:	4b28      	ldr	r3, [pc, #160]	@ (8001c14 <MX_GPIO_Init+0xdc>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	4b25      	ldr	r3, [pc, #148]	@ (8001c14 <MX_GPIO_Init+0xdc>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b82:	4a24      	ldr	r2, [pc, #144]	@ (8001c14 <MX_GPIO_Init+0xdc>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8a:	4b22      	ldr	r3, [pc, #136]	@ (8001c14 <MX_GPIO_Init+0xdc>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b96:	4b1f      	ldr	r3, [pc, #124]	@ (8001c14 <MX_GPIO_Init+0xdc>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8001c14 <MX_GPIO_Init+0xdc>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c14 <MX_GPIO_Init+0xdc>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2120      	movs	r1, #32
 8001bb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb6:	f002 ff99 	bl	8004aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON1_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON1_Pin;
 8001bba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4812      	ldr	r0, [pc, #72]	@ (8001c18 <MX_GPIO_Init+0xe0>)
 8001bd0:	f002 fdca 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bee:	f002 fdbb 	bl	8004768 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_BUTTON1_Pin EXT_BUTTON2_Pin */
  GPIO_InitStruct.Pin = EXT_BUTTON1_Pin|EXT_BUTTON2_Pin;
 8001bf2:	2306      	movs	r3, #6
 8001bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bf6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <MX_GPIO_Init+0xe4>)
 8001c08:	f002 fdae 	bl	8004768 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c0c:	bf00      	nop
 8001c0e:	3728      	adds	r7, #40	@ 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40021000 	.word	0x40021000
 8001c18:	48000800 	.word	0x48000800
 8001c1c:	48000400 	.word	0x48000400

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <Error_Handler+0x8>

08001c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <HAL_MspInit+0x44>)
 8001c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c36:	4a0e      	ldr	r2, [pc, #56]	@ (8001c70 <HAL_MspInit+0x44>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <HAL_MspInit+0x44>)
 8001c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <HAL_MspInit+0x44>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4e:	4a08      	ldr	r2, [pc, #32]	@ (8001c70 <HAL_MspInit+0x44>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c54:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c56:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <HAL_MspInit+0x44>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000

08001c74 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b0ac      	sub	sp, #176	@ 0xb0
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	2288      	movs	r2, #136	@ 0x88
 8001c92:	2100      	movs	r1, #0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f009 ff94 	bl	800bbc2 <memset>
  if(hadc->Instance==ADC1)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a41      	ldr	r2, [pc, #260]	@ (8001da4 <HAL_ADC_MspInit+0x130>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d17a      	bne.n	8001d9a <HAL_ADC_MspInit+0x126>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ca4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ca8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001caa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001cae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001cba:	2308      	movs	r3, #8
 8001cbc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001cbe:	2307      	movs	r3, #7
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001cca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cce:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f005 fe4b 	bl	8007970 <HAL_RCCEx_PeriphCLKConfig>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001ce0:	f7ff ff9e 	bl	8001c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001ce4:	4b30      	ldr	r3, [pc, #192]	@ (8001da8 <HAL_ADC_MspInit+0x134>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce8:	4a2f      	ldr	r2, [pc, #188]	@ (8001da8 <HAL_ADC_MspInit+0x134>)
 8001cea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8001da8 <HAL_ADC_MspInit+0x134>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8001da8 <HAL_ADC_MspInit+0x134>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d00:	4a29      	ldr	r2, [pc, #164]	@ (8001da8 <HAL_ADC_MspInit+0x134>)
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d08:	4b27      	ldr	r3, [pc, #156]	@ (8001da8 <HAL_ADC_MspInit+0x134>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d14:	2302      	movs	r3, #2
 8001d16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d1a:	230b      	movs	r3, #11
 8001d1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d26:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	481f      	ldr	r0, [pc, #124]	@ (8001dac <HAL_ADC_MspInit+0x138>)
 8001d2e:	f002 fd1b 	bl	8004768 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001d32:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <HAL_ADC_MspInit+0x13c>)
 8001d34:	4a1f      	ldr	r2, [pc, #124]	@ (8001db4 <HAL_ADC_MspInit+0x140>)
 8001d36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001d38:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <HAL_ADC_MspInit+0x13c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001db0 <HAL_ADC_MspInit+0x13c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d44:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <HAL_ADC_MspInit+0x13c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d4a:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <HAL_ADC_MspInit+0x13c>)
 8001d4c:	2280      	movs	r2, #128	@ 0x80
 8001d4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d50:	4b17      	ldr	r3, [pc, #92]	@ (8001db0 <HAL_ADC_MspInit+0x13c>)
 8001d52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d58:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <HAL_ADC_MspInit+0x13c>)
 8001d5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d60:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <HAL_ADC_MspInit+0x13c>)
 8001d62:	2220      	movs	r2, #32
 8001d64:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001d66:	4b12      	ldr	r3, [pc, #72]	@ (8001db0 <HAL_ADC_MspInit+0x13c>)
 8001d68:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d6e:	4810      	ldr	r0, [pc, #64]	@ (8001db0 <HAL_ADC_MspInit+0x13c>)
 8001d70:	f002 fa76 	bl	8004260 <HAL_DMA_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8001d7a:	f7ff ff51 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a0b      	ldr	r2, [pc, #44]	@ (8001db0 <HAL_ADC_MspInit+0x13c>)
 8001d82:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001d84:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <HAL_ADC_MspInit+0x13c>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 4, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2104      	movs	r1, #4
 8001d8e:	2012      	movs	r0, #18
 8001d90:	f002 fa2f 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d94:	2012      	movs	r0, #18
 8001d96:	f002 fa48 	bl	800422a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d9a:	bf00      	nop
 8001d9c:	37b0      	adds	r7, #176	@ 0xb0
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	50040000 	.word	0x50040000
 8001da8:	40021000 	.word	0x40021000
 8001dac:	48000800 	.word	0x48000800
 8001db0:	20000268 	.word	0x20000268
 8001db4:	40020008 	.word	0x40020008

08001db8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b0ac      	sub	sp, #176	@ 0xb0
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2288      	movs	r2, #136	@ 0x88
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f009 fef2 	bl	800bbc2 <memset>
  if(hi2c->Instance==I2C1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a25      	ldr	r2, [pc, #148]	@ (8001e78 <HAL_I2C_MspInit+0xc0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d142      	bne.n	8001e6e <HAL_I2C_MspInit+0xb6>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001de8:	2340      	movs	r3, #64	@ 0x40
 8001dea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001dec:	2300      	movs	r3, #0
 8001dee:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4618      	mov	r0, r3
 8001df6:	f005 fdbb 	bl	8007970 <HAL_RCCEx_PeriphCLKConfig>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e00:	f7ff ff0e 	bl	8001c20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e04:	4b1d      	ldr	r3, [pc, #116]	@ (8001e7c <HAL_I2C_MspInit+0xc4>)
 8001e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e08:	4a1c      	ldr	r2, [pc, #112]	@ (8001e7c <HAL_I2C_MspInit+0xc4>)
 8001e0a:	f043 0302 	orr.w	r3, r3, #2
 8001e0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e10:	4b1a      	ldr	r3, [pc, #104]	@ (8001e7c <HAL_I2C_MspInit+0xc4>)
 8001e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e1c:	23c0      	movs	r3, #192	@ 0xc0
 8001e1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e22:	2312      	movs	r3, #18
 8001e24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e34:	2304      	movs	r3, #4
 8001e36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480f      	ldr	r0, [pc, #60]	@ (8001e80 <HAL_I2C_MspInit+0xc8>)
 8001e42:	f002 fc91 	bl	8004768 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e46:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <HAL_I2C_MspInit+0xc4>)
 8001e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e7c <HAL_I2C_MspInit+0xc4>)
 8001e4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e50:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e52:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <HAL_I2C_MspInit+0xc4>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2104      	movs	r1, #4
 8001e62:	201f      	movs	r0, #31
 8001e64:	f002 f9c5 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e68:	201f      	movs	r0, #31
 8001e6a:	f002 f9de 	bl	800422a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e6e:	bf00      	nop
 8001e70:	37b0      	adds	r7, #176	@ 0xb0
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40005400 	.word	0x40005400
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	48000400 	.word	0x48000400

08001e84 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a33      	ldr	r2, [pc, #204]	@ (8001f60 <HAL_TIM_Base_MspInit+0xdc>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d12c      	bne.n	8001ef0 <HAL_TIM_Base_MspInit+0x6c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e96:	4b33      	ldr	r3, [pc, #204]	@ (8001f64 <HAL_TIM_Base_MspInit+0xe0>)
 8001e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e9a:	4a32      	ldr	r2, [pc, #200]	@ (8001f64 <HAL_TIM_Base_MspInit+0xe0>)
 8001e9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ea0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ea2:	4b30      	ldr	r3, [pc, #192]	@ (8001f64 <HAL_TIM_Base_MspInit+0xe0>)
 8001ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ea6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 2, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	2018      	movs	r0, #24
 8001eb4:	f002 f99d 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001eb8:	2018      	movs	r0, #24
 8001eba:	f002 f9b6 	bl	800422a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	2019      	movs	r0, #25
 8001ec4:	f002 f995 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ec8:	2019      	movs	r0, #25
 8001eca:	f002 f9ae 	bl	800422a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	201a      	movs	r0, #26
 8001ed4:	f002 f98d 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001ed8:	201a      	movs	r0, #26
 8001eda:	f002 f9a6 	bl	800422a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	201b      	movs	r0, #27
 8001ee4:	f002 f985 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ee8:	201b      	movs	r0, #27
 8001eea:	f002 f99e 	bl	800422a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM15_MspInit 1 */

    /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001eee:	e032      	b.n	8001f56 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM6)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f68 <HAL_TIM_Base_MspInit+0xe4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d114      	bne.n	8001f24 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001efa:	4b1a      	ldr	r3, [pc, #104]	@ (8001f64 <HAL_TIM_Base_MspInit+0xe0>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efe:	4a19      	ldr	r2, [pc, #100]	@ (8001f64 <HAL_TIM_Base_MspInit+0xe0>)
 8001f00:	f043 0310 	orr.w	r3, r3, #16
 8001f04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f06:	4b17      	ldr	r3, [pc, #92]	@ (8001f64 <HAL_TIM_Base_MspInit+0xe0>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2103      	movs	r1, #3
 8001f16:	2036      	movs	r0, #54	@ 0x36
 8001f18:	f002 f96b 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f1c:	2036      	movs	r0, #54	@ 0x36
 8001f1e:	f002 f984 	bl	800422a <HAL_NVIC_EnableIRQ>
}
 8001f22:	e018      	b.n	8001f56 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM15)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a10      	ldr	r2, [pc, #64]	@ (8001f6c <HAL_TIM_Base_MspInit+0xe8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d113      	bne.n	8001f56 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f64 <HAL_TIM_Base_MspInit+0xe0>)
 8001f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f32:	4a0c      	ldr	r2, [pc, #48]	@ (8001f64 <HAL_TIM_Base_MspInit+0xe0>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f38:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f64 <HAL_TIM_Base_MspInit+0xe0>)
 8001f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 2, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2102      	movs	r1, #2
 8001f4a:	2018      	movs	r0, #24
 8001f4c:	f002 f951 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001f50:	2018      	movs	r0, #24
 8001f52:	f002 f96a 	bl	800422a <HAL_NVIC_EnableIRQ>
}
 8001f56:	bf00      	nop
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40012c00 	.word	0x40012c00
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40001000 	.word	0x40001000
 8001f6c:	40014000 	.word	0x40014000

08001f70 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	@ 0x28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x8c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d130      	bne.n	8001ff4 <HAL_TIM_Encoder_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f92:	4b1b      	ldr	r3, [pc, #108]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f96:	4a1a      	ldr	r2, [pc, #104]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f9e:	4b18      	ldr	r3, [pc, #96]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x90>)
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x90>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fae:	4a14      	ldr	r2, [pc, #80]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x90>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb6:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x90>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fc2:	23c0      	movs	r3, #192	@ 0xc0
 8001fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd6:	f107 0314 	add.w	r3, r7, #20
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fe0:	f002 fbc2 	bl	8004768 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	201d      	movs	r0, #29
 8001fea:	f002 f902 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fee:	201d      	movs	r0, #29
 8001ff0:	f002 f91b 	bl	800422a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001ff4:	bf00      	nop
 8001ff6:	3728      	adds	r7, #40	@ 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40021000 	.word	0x40021000

08002004 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a12      	ldr	r2, [pc, #72]	@ (800206c <HAL_TIM_MspPostInit+0x68>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d11d      	bne.n	8002062 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	4b12      	ldr	r3, [pc, #72]	@ (8002070 <HAL_TIM_MspPostInit+0x6c>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202a:	4a11      	ldr	r2, [pc, #68]	@ (8002070 <HAL_TIM_MspPostInit+0x6c>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002032:	4b0f      	ldr	r3, [pc, #60]	@ (8002070 <HAL_TIM_MspPostInit+0x6c>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 800203e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002042:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002050:	2301      	movs	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	4619      	mov	r1, r3
 800205a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800205e:	f002 fb83 	bl	8004768 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002062:	bf00      	nop
 8002064:	3720      	adds	r7, #32
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40012c00 	.word	0x40012c00
 8002070:	40021000 	.word	0x40021000

08002074 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b0ac      	sub	sp, #176	@ 0xb0
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	2288      	movs	r2, #136	@ 0x88
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f009 fd94 	bl	800bbc2 <memset>
  if(huart->Instance==USART2)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a25      	ldr	r2, [pc, #148]	@ (8002134 <HAL_UART_MspInit+0xc0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d143      	bne.n	800212c <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020a4:	2302      	movs	r3, #2
 80020a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020a8:	2300      	movs	r3, #0
 80020aa:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4618      	mov	r0, r3
 80020b2:	f005 fc5d 	bl	8007970 <HAL_RCCEx_PeriphCLKConfig>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020bc:	f7ff fdb0 	bl	8001c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002138 <HAL_UART_MspInit+0xc4>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002138 <HAL_UART_MspInit+0xc4>)
 80020c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80020cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <HAL_UART_MspInit+0xc4>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d8:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <HAL_UART_MspInit+0xc4>)
 80020da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020dc:	4a16      	ldr	r2, [pc, #88]	@ (8002138 <HAL_UART_MspInit+0xc4>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020e4:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <HAL_UART_MspInit+0xc4>)
 80020e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020f0:	230c      	movs	r3, #12
 80020f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002108:	2307      	movs	r3, #7
 800210a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002112:	4619      	mov	r1, r3
 8002114:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002118:	f002 fb26 	bl	8004768 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	2105      	movs	r1, #5
 8002120:	2026      	movs	r0, #38	@ 0x26
 8002122:	f002 f866 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002126:	2026      	movs	r0, #38	@ 0x26
 8002128:	f002 f87f 	bl	800422a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800212c:	bf00      	nop
 800212e:	37b0      	adds	r7, #176	@ 0xb0
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40004400 	.word	0x40004400
 8002138:	40021000 	.word	0x40021000

0800213c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <NMI_Handler+0x4>

08002144 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <HardFault_Handler+0x4>

0800214c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <MemManage_Handler+0x4>

08002154 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <BusFault_Handler+0x4>

0800215c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <UsageFault_Handler+0x4>

08002164 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002192:	f000 f9c9 	bl	8002528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021a0:	4802      	ldr	r0, [pc, #8]	@ (80021ac <DMA1_Channel1_IRQHandler+0x10>)
 80021a2:	f002 f9f4 	bl	800458e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000268 	.word	0x20000268

080021b0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80021b4:	4802      	ldr	r0, [pc, #8]	@ (80021c0 <ADC1_2_IRQHandler+0x10>)
 80021b6:	f000 fdff 	bl	8002db8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000204 	.word	0x20000204

080021c4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021c8:	4803      	ldr	r0, [pc, #12]	@ (80021d8 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80021ca:	f006 fda7 	bl	8008d1c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80021ce:	4803      	ldr	r0, [pc, #12]	@ (80021dc <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80021d0:	f006 fda4 	bl	8008d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000304 	.word	0x20000304
 80021dc:	200003e8 	.word	0x200003e8

080021e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021e4:	4802      	ldr	r0, [pc, #8]	@ (80021f0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80021e6:	f006 fd99 	bl	8008d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000304 	.word	0x20000304

080021f4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021f8:	4802      	ldr	r0, [pc, #8]	@ (8002204 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80021fa:	f006 fd8f 	bl	8008d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000304 	.word	0x20000304

08002208 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800220c:	4802      	ldr	r0, [pc, #8]	@ (8002218 <TIM1_CC_IRQHandler+0x10>)
 800220e:	f006 fd85 	bl	8008d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000304 	.word	0x20000304

0800221c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002220:	4802      	ldr	r0, [pc, #8]	@ (800222c <TIM3_IRQHandler+0x10>)
 8002222:	f006 fd7b 	bl	8008d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000350 	.word	0x20000350

08002230 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002234:	4802      	ldr	r0, [pc, #8]	@ (8002240 <I2C1_EV_IRQHandler+0x10>)
 8002236:	f002 fed7 	bl	8004fe8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200002b0 	.word	0x200002b0

08002244 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002248:	4802      	ldr	r0, [pc, #8]	@ (8002254 <USART2_IRQHandler+0x10>)
 800224a:	f007 ff1d 	bl	800a088 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000434 	.word	0x20000434

08002258 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800225c:	4802      	ldr	r0, [pc, #8]	@ (8002268 <TIM6_DAC_IRQHandler+0x10>)
 800225e:	f006 fd5d 	bl	8008d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	2000039c 	.word	0x2000039c

0800226c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return 1;
 8002270:	2301      	movs	r3, #1
}
 8002272:	4618      	mov	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <_kill>:

int _kill(int pid, int sig)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002286:	f009 fcef 	bl	800bc68 <__errno>
 800228a:	4603      	mov	r3, r0
 800228c:	2216      	movs	r2, #22
 800228e:	601a      	str	r2, [r3, #0]
  return -1;
 8002290:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <_exit>:

void _exit (int status)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ffe7 	bl	800227c <_kill>
  while (1) {}    /* Make sure we hang here */
 80022ae:	bf00      	nop
 80022b0:	e7fd      	b.n	80022ae <_exit+0x12>

080022b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	e00a      	b.n	80022da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022c4:	f3af 8000 	nop.w
 80022c8:	4601      	mov	r1, r0
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	60ba      	str	r2, [r7, #8]
 80022d0:	b2ca      	uxtb	r2, r1
 80022d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	3301      	adds	r3, #1
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	429a      	cmp	r2, r3
 80022e0:	dbf0      	blt.n	80022c4 <_read+0x12>
  }

  return len;
 80022e2:	687b      	ldr	r3, [r7, #4]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	e009      	b.n	8002312 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	60ba      	str	r2, [r7, #8]
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fde4 	bl	8000ed4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	3301      	adds	r3, #1
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	429a      	cmp	r2, r3
 8002318:	dbf1      	blt.n	80022fe <_write+0x12>
  }
  return len;
 800231a:	687b      	ldr	r3, [r7, #4]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <_close>:

int _close(int file)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800234c:	605a      	str	r2, [r3, #4]
  return 0;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <_isatty>:

int _isatty(int file)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002364:	2301      	movs	r3, #1
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002372:	b480      	push	{r7}
 8002374:	b085      	sub	sp, #20
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002394:	4a14      	ldr	r2, [pc, #80]	@ (80023e8 <_sbrk+0x5c>)
 8002396:	4b15      	ldr	r3, [pc, #84]	@ (80023ec <_sbrk+0x60>)
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023a0:	4b13      	ldr	r3, [pc, #76]	@ (80023f0 <_sbrk+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a8:	4b11      	ldr	r3, [pc, #68]	@ (80023f0 <_sbrk+0x64>)
 80023aa:	4a12      	ldr	r2, [pc, #72]	@ (80023f4 <_sbrk+0x68>)
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ae:	4b10      	ldr	r3, [pc, #64]	@ (80023f0 <_sbrk+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d207      	bcs.n	80023cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023bc:	f009 fc54 	bl	800bc68 <__errno>
 80023c0:	4603      	mov	r3, r0
 80023c2:	220c      	movs	r2, #12
 80023c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ca:	e009      	b.n	80023e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023cc:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <_sbrk+0x64>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023d2:	4b07      	ldr	r3, [pc, #28]	@ (80023f0 <_sbrk+0x64>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	4a05      	ldr	r2, [pc, #20]	@ (80023f0 <_sbrk+0x64>)
 80023dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20018000 	.word	0x20018000
 80023ec:	00000400 	.word	0x00000400
 80023f0:	200004e0 	.word	0x200004e0
 80023f4:	20000638 	.word	0x20000638

080023f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023fc:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <SystemInit+0x20>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002402:	4a05      	ldr	r2, [pc, #20]	@ (8002418 <SystemInit+0x20>)
 8002404:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002408:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800241c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002454 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002420:	f7ff ffea 	bl	80023f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002424:	480c      	ldr	r0, [pc, #48]	@ (8002458 <LoopForever+0x6>)
  ldr r1, =_edata
 8002426:	490d      	ldr	r1, [pc, #52]	@ (800245c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002428:	4a0d      	ldr	r2, [pc, #52]	@ (8002460 <LoopForever+0xe>)
  movs r3, #0
 800242a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800242c:	e002      	b.n	8002434 <LoopCopyDataInit>

0800242e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800242e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002432:	3304      	adds	r3, #4

08002434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002438:	d3f9      	bcc.n	800242e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800243a:	4a0a      	ldr	r2, [pc, #40]	@ (8002464 <LoopForever+0x12>)
  ldr r4, =_ebss
 800243c:	4c0a      	ldr	r4, [pc, #40]	@ (8002468 <LoopForever+0x16>)
  movs r3, #0
 800243e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002440:	e001      	b.n	8002446 <LoopFillZerobss>

08002442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002444:	3204      	adds	r2, #4

08002446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002448:	d3fb      	bcc.n	8002442 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800244a:	f009 fc13 	bl	800bc74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800244e:	f7fe ff97 	bl	8001380 <main>

08002452 <LoopForever>:

LoopForever:
    b LoopForever
 8002452:	e7fe      	b.n	8002452 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002454:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800245c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002460:	0800ddf4 	.word	0x0800ddf4
  ldr r2, =_sbss
 8002464:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002468:	20000634 	.word	0x20000634

0800246c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800246c:	e7fe      	b.n	800246c <ADC3_IRQHandler>
	...

08002470 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800247a:	4b0c      	ldr	r3, [pc, #48]	@ (80024ac <HAL_Init+0x3c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a0b      	ldr	r2, [pc, #44]	@ (80024ac <HAL_Init+0x3c>)
 8002480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002484:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002486:	2003      	movs	r0, #3
 8002488:	f001 fea8 	bl	80041dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800248c:	2000      	movs	r0, #0
 800248e:	f000 f80f 	bl	80024b0 <HAL_InitTick>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	71fb      	strb	r3, [r7, #7]
 800249c:	e001      	b.n	80024a2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800249e:	f7ff fbc5 	bl	8001c2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024a2:	79fb      	ldrb	r3, [r7, #7]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40022000 	.word	0x40022000

080024b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024bc:	4b17      	ldr	r3, [pc, #92]	@ (800251c <HAL_InitTick+0x6c>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d023      	beq.n	800250c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024c4:	4b16      	ldr	r3, [pc, #88]	@ (8002520 <HAL_InitTick+0x70>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b14      	ldr	r3, [pc, #80]	@ (800251c <HAL_InitTick+0x6c>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4619      	mov	r1, r3
 80024ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024da:	4618      	mov	r0, r3
 80024dc:	f001 feb3 	bl	8004246 <HAL_SYSTICK_Config>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10f      	bne.n	8002506 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b0f      	cmp	r3, #15
 80024ea:	d809      	bhi.n	8002500 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024ec:	2200      	movs	r2, #0
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295
 80024f4:	f001 fe7d 	bl	80041f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002524 <HAL_InitTick+0x74>)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e007      	b.n	8002510 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	e004      	b.n	8002510 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	73fb      	strb	r3, [r7, #15]
 800250a:	e001      	b.n	8002510 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	2000001c 	.word	0x2000001c
 8002520:	20000014 	.word	0x20000014
 8002524:	20000018 	.word	0x20000018

08002528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800252c:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <HAL_IncTick+0x20>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	4b06      	ldr	r3, [pc, #24]	@ (800254c <HAL_IncTick+0x24>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4413      	add	r3, r2
 8002538:	4a04      	ldr	r2, [pc, #16]	@ (800254c <HAL_IncTick+0x24>)
 800253a:	6013      	str	r3, [r2, #0]
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	2000001c 	.word	0x2000001c
 800254c:	200004e4 	.word	0x200004e4

08002550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return uwTick;
 8002554:	4b03      	ldr	r3, [pc, #12]	@ (8002564 <HAL_GetTick+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	200004e4 	.word	0x200004e4

08002568 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	609a      	str	r2, [r3, #8]
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	609a      	str	r2, [r3, #8]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	3360      	adds	r3, #96	@ 0x60
 80025e2:	461a      	mov	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <LL_ADC_SetOffset+0x44>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	4313      	orrs	r3, r2
 8002600:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002608:	bf00      	nop
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	03fff000 	.word	0x03fff000

08002618 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3360      	adds	r3, #96	@ 0x60
 8002626:	461a      	mov	r2, r3
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3360      	adds	r3, #96	@ 0x60
 8002654:	461a      	mov	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	431a      	orrs	r2, r3
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800266e:	bf00      	nop
 8002670:	371c      	adds	r7, #28
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	3330      	adds	r3, #48	@ 0x30
 80026b0:	461a      	mov	r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	f003 030c 	and.w	r3, r3, #12
 80026bc:	4413      	add	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	211f      	movs	r1, #31
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	401a      	ands	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	0e9b      	lsrs	r3, r3, #26
 80026d8:	f003 011f 	and.w	r1, r3, #31
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f003 031f 	and.w	r3, r3, #31
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	431a      	orrs	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026ec:	bf00      	nop
 80026ee:	371c      	adds	r7, #28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002704:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800271e:	b480      	push	{r7}
 8002720:	b087      	sub	sp, #28
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3314      	adds	r3, #20
 800272e:	461a      	mov	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	0e5b      	lsrs	r3, r3, #25
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	4413      	add	r3, r2
 800273c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	0d1b      	lsrs	r3, r3, #20
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2107      	movs	r1, #7
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	401a      	ands	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	0d1b      	lsrs	r3, r3, #20
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	431a      	orrs	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002768:	bf00      	nop
 800276a:	371c      	adds	r7, #28
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278c:	43db      	mvns	r3, r3
 800278e:	401a      	ands	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f003 0318 	and.w	r3, r3, #24
 8002796:	4908      	ldr	r1, [pc, #32]	@ (80027b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002798:	40d9      	lsrs	r1, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	400b      	ands	r3, r1
 800279e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a2:	431a      	orrs	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	0007ffff 	.word	0x0007ffff

080027bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 031f 	and.w	r3, r3, #31
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002804:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6093      	str	r3, [r2, #8]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800282c:	d101      	bne.n	8002832 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002850:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002854:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002878:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800287c:	d101      	bne.n	8002882 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028a4:	f043 0201 	orr.w	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028cc:	f043 0202 	orr.w	r2, r3, #2
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <LL_ADC_IsEnabled+0x18>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <LL_ADC_IsEnabled+0x1a>
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b02      	cmp	r3, #2
 8002918:	d101      	bne.n	800291e <LL_ADC_IsDisableOngoing+0x18>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <LL_ADC_IsDisableOngoing+0x1a>
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800293c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002940:	f043 0204 	orr.w	r2, r3, #4
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b04      	cmp	r3, #4
 8002966:	d101      	bne.n	800296c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b08      	cmp	r3, #8
 800298c:	d101      	bne.n	8002992 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b089      	sub	sp, #36	@ 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e130      	b.n	8002c1c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d109      	bne.n	80029dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff f953 	bl	8001c74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff19 	bl	8002818 <LL_ADC_IsDeepPowerDownEnabled>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d004      	beq.n	80029f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff feff 	bl	80027f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ff34 	bl	8002868 <LL_ADC_IsInternalRegulatorEnabled>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d115      	bne.n	8002a32 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ff18 	bl	8002840 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a10:	4b84      	ldr	r3, [pc, #528]	@ (8002c24 <HAL_ADC_Init+0x284>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	4a84      	ldr	r2, [pc, #528]	@ (8002c28 <HAL_ADC_Init+0x288>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	099b      	lsrs	r3, r3, #6
 8002a1e:	3301      	adds	r3, #1
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a24:	e002      	b.n	8002a2c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f9      	bne.n	8002a26 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff ff16 	bl	8002868 <LL_ADC_IsInternalRegulatorEnabled>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10d      	bne.n	8002a5e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a46:	f043 0210 	orr.w	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ff76 	bl	8002954 <LL_ADC_REG_IsConversionOngoing>
 8002a68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f040 80c9 	bne.w	8002c0a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 80c5 	bne.w	8002c0a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a84:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a88:	f043 0202 	orr.w	r2, r3, #2
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff23 	bl	80028e0 <LL_ADC_IsEnabled>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d115      	bne.n	8002acc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa0:	4862      	ldr	r0, [pc, #392]	@ (8002c2c <HAL_ADC_Init+0x28c>)
 8002aa2:	f7ff ff1d 	bl	80028e0 <LL_ADC_IsEnabled>
 8002aa6:	4604      	mov	r4, r0
 8002aa8:	4861      	ldr	r0, [pc, #388]	@ (8002c30 <HAL_ADC_Init+0x290>)
 8002aaa:	f7ff ff19 	bl	80028e0 <LL_ADC_IsEnabled>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	431c      	orrs	r4, r3
 8002ab2:	4860      	ldr	r0, [pc, #384]	@ (8002c34 <HAL_ADC_Init+0x294>)
 8002ab4:	f7ff ff14 	bl	80028e0 <LL_ADC_IsEnabled>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4323      	orrs	r3, r4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d105      	bne.n	8002acc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	485c      	ldr	r0, [pc, #368]	@ (8002c38 <HAL_ADC_Init+0x298>)
 8002ac8:	f7ff fd4e 	bl	8002568 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7e5b      	ldrb	r3, [r3, #25]
 8002ad0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ad6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002adc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ae2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d106      	bne.n	8002b08 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afe:	3b01      	subs	r3, #1
 8002b00:	045b      	lsls	r3, r3, #17
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d009      	beq.n	8002b24 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	4b44      	ldr	r3, [pc, #272]	@ (8002c3c <HAL_ADC_Init+0x29c>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	69b9      	ldr	r1, [r7, #24]
 8002b34:	430b      	orrs	r3, r1
 8002b36:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ff1c 	bl	800297a <LL_ADC_INJ_IsConversionOngoing>
 8002b42:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d13d      	bne.n	8002bc6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d13a      	bne.n	8002bc6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b54:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b5c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b6c:	f023 0302 	bic.w	r3, r3, #2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	69b9      	ldr	r1, [r7, #24]
 8002b76:	430b      	orrs	r3, r1
 8002b78:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d118      	bne.n	8002bb6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b8e:	f023 0304 	bic.w	r3, r3, #4
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b9a:	4311      	orrs	r1, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002ba0:	4311      	orrs	r1, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	611a      	str	r2, [r3, #16]
 8002bb4:	e007      	b.n	8002bc6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0201 	bic.w	r2, r2, #1
 8002bc4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d10c      	bne.n	8002be8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd4:	f023 010f 	bic.w	r1, r3, #15
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	1e5a      	subs	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002be6:	e007      	b.n	8002bf8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 020f 	bic.w	r2, r2, #15
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfc:	f023 0303 	bic.w	r3, r3, #3
 8002c00:	f043 0201 	orr.w	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c08:	e007      	b.n	8002c1a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0e:	f043 0210 	orr.w	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3724      	adds	r7, #36	@ 0x24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd90      	pop	{r4, r7, pc}
 8002c24:	20000014 	.word	0x20000014
 8002c28:	053e2d63 	.word	0x053e2d63
 8002c2c:	50040000 	.word	0x50040000
 8002c30:	50040100 	.word	0x50040100
 8002c34:	50040200 	.word	0x50040200
 8002c38:	50040300 	.word	0x50040300
 8002c3c:	fff0c007 	.word	0xfff0c007

08002c40 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c4c:	4853      	ldr	r0, [pc, #332]	@ (8002d9c <HAL_ADC_Start_DMA+0x15c>)
 8002c4e:	f7ff fdb5 	bl	80027bc <LL_ADC_GetMultimode>
 8002c52:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fe7b 	bl	8002954 <LL_ADC_REG_IsConversionOngoing>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f040 8093 	bne.w	8002d8c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_ADC_Start_DMA+0x34>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e08e      	b.n	8002d92 <HAL_ADC_Start_DMA+0x152>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a47      	ldr	r2, [pc, #284]	@ (8002da0 <HAL_ADC_Start_DMA+0x160>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d008      	beq.n	8002c98 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	2b05      	cmp	r3, #5
 8002c90:	d002      	beq.n	8002c98 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b09      	cmp	r3, #9
 8002c96:	d172      	bne.n	8002d7e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 fec1 	bl	8003a20 <ADC_Enable>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002ca2:	7dfb      	ldrb	r3, [r7, #23]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d165      	bne.n	8002d74 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a38      	ldr	r2, [pc, #224]	@ (8002da4 <HAL_ADC_Start_DMA+0x164>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d002      	beq.n	8002ccc <HAL_ADC_Start_DMA+0x8c>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	e000      	b.n	8002cce <HAL_ADC_Start_DMA+0x8e>
 8002ccc:	4b36      	ldr	r3, [pc, #216]	@ (8002da8 <HAL_ADC_Start_DMA+0x168>)
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d002      	beq.n	8002cdc <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d006      	beq.n	8002d02 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf8:	f023 0206 	bic.w	r2, r3, #6
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d00:	e002      	b.n	8002d08 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0c:	4a27      	ldr	r2, [pc, #156]	@ (8002dac <HAL_ADC_Start_DMA+0x16c>)
 8002d0e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d14:	4a26      	ldr	r2, [pc, #152]	@ (8002db0 <HAL_ADC_Start_DMA+0x170>)
 8002d16:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1c:	4a25      	ldr	r2, [pc, #148]	@ (8002db4 <HAL_ADC_Start_DMA+0x174>)
 8002d1e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	221c      	movs	r2, #28
 8002d26:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0210 	orr.w	r2, r2, #16
 8002d3e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3340      	adds	r3, #64	@ 0x40
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f001 fb36 	bl	80043d0 <HAL_DMA_Start_IT>
 8002d64:	4603      	mov	r3, r0
 8002d66:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fddd 	bl	800292c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002d72:	e00d      	b.n	8002d90 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002d7c:	e008      	b.n	8002d90 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002d8a:	e001      	b.n	8002d90 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	50040300 	.word	0x50040300
 8002da0:	50040200 	.word	0x50040200
 8002da4:	50040100 	.word	0x50040100
 8002da8:	50040000 	.word	0x50040000
 8002dac:	08003beb 	.word	0x08003beb
 8002db0:	08003cc3 	.word	0x08003cc3
 8002db4:	08003cdf 	.word	0x08003cdf

08002db8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	@ 0x28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dd4:	4882      	ldr	r0, [pc, #520]	@ (8002fe0 <HAL_ADC_IRQHandler+0x228>)
 8002dd6:	f7ff fcf1 	bl	80027bc <LL_ADC_GetMultimode>
 8002dda:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d017      	beq.n	8002e16 <HAL_ADC_IRQHandler+0x5e>
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d012      	beq.n	8002e16 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d105      	bne.n	8002e08 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e00:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f001 f85d 	bl	8003ec8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2202      	movs	r2, #2
 8002e14:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d004      	beq.n	8002e2a <HAL_ADC_IRQHandler+0x72>
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10a      	bne.n	8002e40 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8083 	beq.w	8002f3c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d07d      	beq.n	8002f3c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d105      	bne.n	8002e58 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fc0c 	bl	800267a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d062      	beq.n	8002f2e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a5d      	ldr	r2, [pc, #372]	@ (8002fe4 <HAL_ADC_IRQHandler+0x22c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d002      	beq.n	8002e78 <HAL_ADC_IRQHandler+0xc0>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	e000      	b.n	8002e7a <HAL_ADC_IRQHandler+0xc2>
 8002e78:	4b5b      	ldr	r3, [pc, #364]	@ (8002fe8 <HAL_ADC_IRQHandler+0x230>)
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d008      	beq.n	8002e94 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2b05      	cmp	r3, #5
 8002e8c:	d002      	beq.n	8002e94 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b09      	cmp	r3, #9
 8002e92:	d104      	bne.n	8002e9e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	623b      	str	r3, [r7, #32]
 8002e9c:	e00c      	b.n	8002eb8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a50      	ldr	r2, [pc, #320]	@ (8002fe4 <HAL_ADC_IRQHandler+0x22c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d002      	beq.n	8002eae <HAL_ADC_IRQHandler+0xf6>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	e000      	b.n	8002eb0 <HAL_ADC_IRQHandler+0xf8>
 8002eae:	4b4e      	ldr	r3, [pc, #312]	@ (8002fe8 <HAL_ADC_IRQHandler+0x230>)
 8002eb0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d135      	bne.n	8002f2e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d12e      	bne.n	8002f2e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fd3d 	bl	8002954 <LL_ADC_REG_IsConversionOngoing>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d11a      	bne.n	8002f16 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 020c 	bic.w	r2, r2, #12
 8002eee:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d112      	bne.n	8002f2e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0c:	f043 0201 	orr.w	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f14:	e00b      	b.n	8002f2e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1a:	f043 0210 	orr.w	r2, r3, #16
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f26:	f043 0201 	orr.w	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f95c 	bl	80031ec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	220c      	movs	r2, #12
 8002f3a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f003 0320 	and.w	r3, r3, #32
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d004      	beq.n	8002f50 <HAL_ADC_IRQHandler+0x198>
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10b      	bne.n	8002f68 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 809f 	beq.w	800309a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 8099 	beq.w	800309a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d105      	bne.n	8002f80 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f78:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fbb7 	bl	80026f8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002f8a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fb72 	bl	800267a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f96:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a11      	ldr	r2, [pc, #68]	@ (8002fe4 <HAL_ADC_IRQHandler+0x22c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d002      	beq.n	8002fa8 <HAL_ADC_IRQHandler+0x1f0>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	e000      	b.n	8002faa <HAL_ADC_IRQHandler+0x1f2>
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe8 <HAL_ADC_IRQHandler+0x230>)
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d008      	beq.n	8002fc4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d002      	beq.n	8002fc4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2b07      	cmp	r3, #7
 8002fc2:	d104      	bne.n	8002fce <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	623b      	str	r3, [r7, #32]
 8002fcc:	e013      	b.n	8002ff6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a04      	ldr	r2, [pc, #16]	@ (8002fe4 <HAL_ADC_IRQHandler+0x22c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d009      	beq.n	8002fec <HAL_ADC_IRQHandler+0x234>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	e007      	b.n	8002fee <HAL_ADC_IRQHandler+0x236>
 8002fde:	bf00      	nop
 8002fe0:	50040300 	.word	0x50040300
 8002fe4:	50040100 	.word	0x50040100
 8002fe8:	50040000 	.word	0x50040000
 8002fec:	4b7d      	ldr	r3, [pc, #500]	@ (80031e4 <HAL_ADC_IRQHandler+0x42c>)
 8002fee:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d047      	beq.n	800308c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <HAL_ADC_IRQHandler+0x25e>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d03f      	beq.n	800308c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003012:	2b00      	cmp	r3, #0
 8003014:	d13a      	bne.n	800308c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003020:	2b40      	cmp	r3, #64	@ 0x40
 8003022:	d133      	bne.n	800308c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d12e      	bne.n	800308c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fca1 	bl	800297a <LL_ADC_INJ_IsConversionOngoing>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d11a      	bne.n	8003074 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800304c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003052:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003062:	2b00      	cmp	r3, #0
 8003064:	d112      	bne.n	800308c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306a:	f043 0201 	orr.w	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	655a      	str	r2, [r3, #84]	@ 0x54
 8003072:	e00b      	b.n	800308c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003078:	f043 0210 	orr.w	r2, r3, #16
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003084:	f043 0201 	orr.w	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fef3 	bl	8003e78 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2260      	movs	r2, #96	@ 0x60
 8003098:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d011      	beq.n	80030c8 <HAL_ADC_IRQHandler+0x310>
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00c      	beq.n	80030c8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f8aa 	bl	8003214 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2280      	movs	r2, #128	@ 0x80
 80030c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d012      	beq.n	80030f8 <HAL_ADC_IRQHandler+0x340>
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00d      	beq.n	80030f8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fed9 	bl	8003ea0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d012      	beq.n	8003128 <HAL_ADC_IRQHandler+0x370>
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00d      	beq.n	8003128 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003110:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fecb 	bl	8003eb4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003126:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 0310 	and.w	r3, r3, #16
 800312e:	2b00      	cmp	r3, #0
 8003130:	d036      	beq.n	80031a0 <HAL_ADC_IRQHandler+0x3e8>
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b00      	cmp	r3, #0
 800313a:	d031      	beq.n	80031a0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003140:	2b00      	cmp	r3, #0
 8003142:	d102      	bne.n	800314a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003144:	2301      	movs	r3, #1
 8003146:	627b      	str	r3, [r7, #36]	@ 0x24
 8003148:	e014      	b.n	8003174 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003150:	4825      	ldr	r0, [pc, #148]	@ (80031e8 <HAL_ADC_IRQHandler+0x430>)
 8003152:	f7ff fb41 	bl	80027d8 <LL_ADC_GetMultiDMATransfer>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00b      	beq.n	8003174 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800315c:	2301      	movs	r3, #1
 800315e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003160:	e008      	b.n	8003174 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003170:	2301      	movs	r3, #1
 8003172:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003176:	2b01      	cmp	r3, #1
 8003178:	d10e      	bne.n	8003198 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318a:	f043 0202 	orr.w	r2, r3, #2
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f848 	bl	8003228 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2210      	movs	r2, #16
 800319e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d018      	beq.n	80031dc <HAL_ADC_IRQHandler+0x424>
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c4:	f043 0208 	orr.w	r2, r3, #8
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031d4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fe58 	bl	8003e8c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80031dc:	bf00      	nop
 80031de:	3728      	adds	r7, #40	@ 0x28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	50040000 	.word	0x50040000
 80031e8:	50040300 	.word	0x50040300

080031ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b0b6      	sub	sp, #216	@ 0xd8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800324c:	2300      	movs	r3, #0
 800324e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_ADC_ConfigChannel+0x22>
 800325a:	2302      	movs	r3, #2
 800325c:	e3c9      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x7b6>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fb72 	bl	8002954 <LL_ADC_REG_IsConversionOngoing>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	f040 83aa 	bne.w	80039cc <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b05      	cmp	r3, #5
 8003286:	d824      	bhi.n	80032d2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	3b02      	subs	r3, #2
 800328e:	2b03      	cmp	r3, #3
 8003290:	d81b      	bhi.n	80032ca <HAL_ADC_ConfigChannel+0x8e>
 8003292:	a201      	add	r2, pc, #4	@ (adr r2, 8003298 <HAL_ADC_ConfigChannel+0x5c>)
 8003294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003298:	080032a9 	.word	0x080032a9
 800329c:	080032b1 	.word	0x080032b1
 80032a0:	080032b9 	.word	0x080032b9
 80032a4:	080032c1 	.word	0x080032c1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80032a8:	230c      	movs	r3, #12
 80032aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80032ae:	e010      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80032b0:	2312      	movs	r3, #18
 80032b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80032b6:	e00c      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80032b8:	2318      	movs	r3, #24
 80032ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80032be:	e008      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80032c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80032c8:	e003      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80032ca:	2306      	movs	r3, #6
 80032cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80032d0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80032e0:	f7ff f9de 	bl	80026a0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fb33 	bl	8002954 <LL_ADC_REG_IsConversionOngoing>
 80032ee:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fb3f 	bl	800297a <LL_ADC_INJ_IsConversionOngoing>
 80032fc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003300:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003304:	2b00      	cmp	r3, #0
 8003306:	f040 81a4 	bne.w	8003652 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800330a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800330e:	2b00      	cmp	r3, #0
 8003310:	f040 819f 	bne.w	8003652 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	6819      	ldr	r1, [r3, #0]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	461a      	mov	r2, r3
 8003322:	f7ff f9fc 	bl	800271e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	08db      	lsrs	r3, r3, #3
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	2b04      	cmp	r3, #4
 8003346:	d00a      	beq.n	800335e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	6919      	ldr	r1, [r3, #16]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003358:	f7ff f93a 	bl	80025d0 <LL_ADC_SetOffset>
 800335c:	e179      	b.n	8003652 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff f957 	bl	8002618 <LL_ADC_GetOffsetChannel>
 800336a:	4603      	mov	r3, r0
 800336c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10a      	bne.n	800338a <HAL_ADC_ConfigChannel+0x14e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2100      	movs	r1, #0
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff f94c 	bl	8002618 <LL_ADC_GetOffsetChannel>
 8003380:	4603      	mov	r3, r0
 8003382:	0e9b      	lsrs	r3, r3, #26
 8003384:	f003 021f 	and.w	r2, r3, #31
 8003388:	e01e      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x18c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff f941 	bl	8002618 <LL_ADC_GetOffsetChannel>
 8003396:	4603      	mov	r3, r0
 8003398:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80033ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80033b8:	2320      	movs	r3, #32
 80033ba:	e004      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80033bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033c0:	fab3 f383 	clz	r3, r3
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d105      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x1a4>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	0e9b      	lsrs	r3, r3, #26
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	e018      	b.n	8003412 <HAL_ADC_ConfigChannel+0x1d6>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033ec:	fa93 f3a3 	rbit	r3, r3
 80033f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80033f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80033fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003404:	2320      	movs	r3, #32
 8003406:	e004      	b.n	8003412 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003408:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003412:	429a      	cmp	r2, r3
 8003414:	d106      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2200      	movs	r2, #0
 800341c:	2100      	movs	r1, #0
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff f910 	bl	8002644 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2101      	movs	r1, #1
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff f8f4 	bl	8002618 <LL_ADC_GetOffsetChannel>
 8003430:	4603      	mov	r3, r0
 8003432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10a      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x214>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2101      	movs	r1, #1
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff f8e9 	bl	8002618 <LL_ADC_GetOffsetChannel>
 8003446:	4603      	mov	r3, r0
 8003448:	0e9b      	lsrs	r3, r3, #26
 800344a:	f003 021f 	and.w	r2, r3, #31
 800344e:	e01e      	b.n	800348e <HAL_ADC_ConfigChannel+0x252>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2101      	movs	r1, #1
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff f8de 	bl	8002618 <LL_ADC_GetOffsetChannel>
 800345c:	4603      	mov	r3, r0
 800345e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800346e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003472:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003476:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800347e:	2320      	movs	r3, #32
 8003480:	e004      	b.n	800348c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003482:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003486:	fab3 f383 	clz	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003496:	2b00      	cmp	r3, #0
 8003498:	d105      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x26a>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	0e9b      	lsrs	r3, r3, #26
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	e018      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x29c>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80034ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80034c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80034ca:	2320      	movs	r3, #32
 80034cc:	e004      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80034ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034d2:	fab3 f383 	clz	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034d8:	429a      	cmp	r2, r3
 80034da:	d106      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2200      	movs	r2, #0
 80034e2:	2101      	movs	r1, #1
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff f8ad 	bl	8002644 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2102      	movs	r1, #2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff f891 	bl	8002618 <LL_ADC_GetOffsetChannel>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x2da>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2102      	movs	r1, #2
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff f886 	bl	8002618 <LL_ADC_GetOffsetChannel>
 800350c:	4603      	mov	r3, r0
 800350e:	0e9b      	lsrs	r3, r3, #26
 8003510:	f003 021f 	and.w	r2, r3, #31
 8003514:	e01e      	b.n	8003554 <HAL_ADC_ConfigChannel+0x318>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2102      	movs	r1, #2
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff f87b 	bl	8002618 <LL_ADC_GetOffsetChannel>
 8003522:	4603      	mov	r3, r0
 8003524:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800352c:	fa93 f3a3 	rbit	r3, r3
 8003530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003534:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003538:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800353c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003544:	2320      	movs	r3, #32
 8003546:	e004      	b.n	8003552 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003548:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <HAL_ADC_ConfigChannel+0x330>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	0e9b      	lsrs	r3, r3, #26
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	e014      	b.n	8003596 <HAL_ADC_ConfigChannel+0x35a>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003574:	fa93 f3a3 	rbit	r3, r3
 8003578:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800357a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800357c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003580:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003588:	2320      	movs	r3, #32
 800358a:	e004      	b.n	8003596 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800358c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003590:	fab3 f383 	clz	r3, r3
 8003594:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003596:	429a      	cmp	r2, r3
 8003598:	d106      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2200      	movs	r2, #0
 80035a0:	2102      	movs	r1, #2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff f84e 	bl	8002644 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2103      	movs	r1, #3
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff f832 	bl	8002618 <LL_ADC_GetOffsetChannel>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x398>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2103      	movs	r1, #3
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff f827 	bl	8002618 <LL_ADC_GetOffsetChannel>
 80035ca:	4603      	mov	r3, r0
 80035cc:	0e9b      	lsrs	r3, r3, #26
 80035ce:	f003 021f 	and.w	r2, r3, #31
 80035d2:	e017      	b.n	8003604 <HAL_ADC_ConfigChannel+0x3c8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2103      	movs	r1, #3
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff f81c 	bl	8002618 <LL_ADC_GetOffsetChannel>
 80035e0:	4603      	mov	r3, r0
 80035e2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035e6:	fa93 f3a3 	rbit	r3, r3
 80035ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80035ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035ee:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80035f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80035f6:	2320      	movs	r3, #32
 80035f8:	e003      	b.n	8003602 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80035fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035fc:	fab3 f383 	clz	r3, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360c:	2b00      	cmp	r3, #0
 800360e:	d105      	bne.n	800361c <HAL_ADC_ConfigChannel+0x3e0>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	0e9b      	lsrs	r3, r3, #26
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	e011      	b.n	8003640 <HAL_ADC_ConfigChannel+0x404>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800362a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800362c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800362e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003634:	2320      	movs	r3, #32
 8003636:	e003      	b.n	8003640 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003638:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800363a:	fab3 f383 	clz	r3, r3
 800363e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003640:	429a      	cmp	r2, r3
 8003642:	d106      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2200      	movs	r2, #0
 800364a:	2103      	movs	r1, #3
 800364c:	4618      	mov	r0, r3
 800364e:	f7fe fff9 	bl	8002644 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff f942 	bl	80028e0 <LL_ADC_IsEnabled>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	f040 8140 	bne.w	80038e4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	6819      	ldr	r1, [r3, #0]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	461a      	mov	r2, r3
 8003672:	f7ff f87f 	bl	8002774 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	4a8f      	ldr	r2, [pc, #572]	@ (80038b8 <HAL_ADC_ConfigChannel+0x67c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	f040 8131 	bne.w	80038e4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10b      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x46e>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	0e9b      	lsrs	r3, r3, #26
 8003698:	3301      	adds	r3, #1
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	2b09      	cmp	r3, #9
 80036a0:	bf94      	ite	ls
 80036a2:	2301      	movls	r3, #1
 80036a4:	2300      	movhi	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	e019      	b.n	80036de <HAL_ADC_ConfigChannel+0x4a2>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036b2:	fa93 f3a3 	rbit	r3, r3
 80036b6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80036b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80036bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80036c2:	2320      	movs	r3, #32
 80036c4:	e003      	b.n	80036ce <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80036c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036c8:	fab3 f383 	clz	r3, r3
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	3301      	adds	r3, #1
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	2b09      	cmp	r3, #9
 80036d6:	bf94      	ite	ls
 80036d8:	2301      	movls	r3, #1
 80036da:	2300      	movhi	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d079      	beq.n	80037d6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d107      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x4c2>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	0e9b      	lsrs	r3, r3, #26
 80036f4:	3301      	adds	r3, #1
 80036f6:	069b      	lsls	r3, r3, #26
 80036f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036fc:	e015      	b.n	800372a <HAL_ADC_ConfigChannel+0x4ee>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800370c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800370e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003716:	2320      	movs	r3, #32
 8003718:	e003      	b.n	8003722 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800371a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800371c:	fab3 f383 	clz	r3, r3
 8003720:	b2db      	uxtb	r3, r3
 8003722:	3301      	adds	r3, #1
 8003724:	069b      	lsls	r3, r3, #26
 8003726:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <HAL_ADC_ConfigChannel+0x50e>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	0e9b      	lsrs	r3, r3, #26
 800373c:	3301      	adds	r3, #1
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	2101      	movs	r1, #1
 8003744:	fa01 f303 	lsl.w	r3, r1, r3
 8003748:	e017      	b.n	800377a <HAL_ADC_ConfigChannel+0x53e>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800375a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800375c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003762:	2320      	movs	r3, #32
 8003764:	e003      	b.n	800376e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003768:	fab3 f383 	clz	r3, r3
 800376c:	b2db      	uxtb	r3, r3
 800376e:	3301      	adds	r3, #1
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	2101      	movs	r1, #1
 8003776:	fa01 f303 	lsl.w	r3, r1, r3
 800377a:	ea42 0103 	orr.w	r1, r2, r3
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10a      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x564>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	0e9b      	lsrs	r3, r3, #26
 8003790:	3301      	adds	r3, #1
 8003792:	f003 021f 	and.w	r2, r3, #31
 8003796:	4613      	mov	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4413      	add	r3, r2
 800379c:	051b      	lsls	r3, r3, #20
 800379e:	e018      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x596>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80037ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80037b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80037b8:	2320      	movs	r3, #32
 80037ba:	e003      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80037bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	3301      	adds	r3, #1
 80037c6:	f003 021f 	and.w	r2, r3, #31
 80037ca:	4613      	mov	r3, r2
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	4413      	add	r3, r2
 80037d0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037d2:	430b      	orrs	r3, r1
 80037d4:	e081      	b.n	80038da <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d107      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x5b6>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	0e9b      	lsrs	r3, r3, #26
 80037e8:	3301      	adds	r3, #1
 80037ea:	069b      	lsls	r3, r3, #26
 80037ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037f0:	e015      	b.n	800381e <HAL_ADC_ConfigChannel+0x5e2>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fa:	fa93 f3a3 	rbit	r3, r3
 80037fe:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800380a:	2320      	movs	r3, #32
 800380c:	e003      	b.n	8003816 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800380e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003810:	fab3 f383 	clz	r3, r3
 8003814:	b2db      	uxtb	r3, r3
 8003816:	3301      	adds	r3, #1
 8003818:	069b      	lsls	r3, r3, #26
 800381a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HAL_ADC_ConfigChannel+0x602>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	0e9b      	lsrs	r3, r3, #26
 8003830:	3301      	adds	r3, #1
 8003832:	f003 031f 	and.w	r3, r3, #31
 8003836:	2101      	movs	r1, #1
 8003838:	fa01 f303 	lsl.w	r3, r1, r3
 800383c:	e017      	b.n	800386e <HAL_ADC_ConfigChannel+0x632>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	fa93 f3a3 	rbit	r3, r3
 800384a:	61bb      	str	r3, [r7, #24]
  return result;
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003856:	2320      	movs	r3, #32
 8003858:	e003      	b.n	8003862 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	fab3 f383 	clz	r3, r3
 8003860:	b2db      	uxtb	r3, r3
 8003862:	3301      	adds	r3, #1
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	2101      	movs	r1, #1
 800386a:	fa01 f303 	lsl.w	r3, r1, r3
 800386e:	ea42 0103 	orr.w	r1, r2, r3
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10d      	bne.n	800389a <HAL_ADC_ConfigChannel+0x65e>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	0e9b      	lsrs	r3, r3, #26
 8003884:	3301      	adds	r3, #1
 8003886:	f003 021f 	and.w	r2, r3, #31
 800388a:	4613      	mov	r3, r2
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4413      	add	r3, r2
 8003890:	3b1e      	subs	r3, #30
 8003892:	051b      	lsls	r3, r3, #20
 8003894:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003898:	e01e      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x69c>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	60fb      	str	r3, [r7, #12]
  return result;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d104      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80038b2:	2320      	movs	r3, #32
 80038b4:	e006      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x688>
 80038b6:	bf00      	nop
 80038b8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	fab3 f383 	clz	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	3301      	adds	r3, #1
 80038c6:	f003 021f 	and.w	r2, r3, #31
 80038ca:	4613      	mov	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4413      	add	r3, r2
 80038d0:	3b1e      	subs	r3, #30
 80038d2:	051b      	lsls	r3, r3, #20
 80038d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038d8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038de:	4619      	mov	r1, r3
 80038e0:	f7fe ff1d 	bl	800271e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b44      	ldr	r3, [pc, #272]	@ (80039fc <HAL_ADC_ConfigChannel+0x7c0>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d07a      	beq.n	80039e6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038f0:	4843      	ldr	r0, [pc, #268]	@ (8003a00 <HAL_ADC_ConfigChannel+0x7c4>)
 80038f2:	f7fe fe5f 	bl	80025b4 <LL_ADC_GetCommonPathInternalCh>
 80038f6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a41      	ldr	r2, [pc, #260]	@ (8003a04 <HAL_ADC_ConfigChannel+0x7c8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d12c      	bne.n	800395e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003904:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003908:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d126      	bne.n	800395e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a3c      	ldr	r2, [pc, #240]	@ (8003a08 <HAL_ADC_ConfigChannel+0x7cc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d004      	beq.n	8003924 <HAL_ADC_ConfigChannel+0x6e8>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a3b      	ldr	r2, [pc, #236]	@ (8003a0c <HAL_ADC_ConfigChannel+0x7d0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d15d      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003924:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003928:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800392c:	4619      	mov	r1, r3
 800392e:	4834      	ldr	r0, [pc, #208]	@ (8003a00 <HAL_ADC_ConfigChannel+0x7c4>)
 8003930:	f7fe fe2d 	bl	800258e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003934:	4b36      	ldr	r3, [pc, #216]	@ (8003a10 <HAL_ADC_ConfigChannel+0x7d4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	099b      	lsrs	r3, r3, #6
 800393a:	4a36      	ldr	r2, [pc, #216]	@ (8003a14 <HAL_ADC_ConfigChannel+0x7d8>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	099b      	lsrs	r3, r3, #6
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	4613      	mov	r3, r2
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800394e:	e002      	b.n	8003956 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	3b01      	subs	r3, #1
 8003954:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f9      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800395c:	e040      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a2d      	ldr	r2, [pc, #180]	@ (8003a18 <HAL_ADC_ConfigChannel+0x7dc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d118      	bne.n	800399a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003968:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800396c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d112      	bne.n	800399a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a23      	ldr	r2, [pc, #140]	@ (8003a08 <HAL_ADC_ConfigChannel+0x7cc>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d004      	beq.n	8003988 <HAL_ADC_ConfigChannel+0x74c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a22      	ldr	r2, [pc, #136]	@ (8003a0c <HAL_ADC_ConfigChannel+0x7d0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d12d      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003988:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800398c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003990:	4619      	mov	r1, r3
 8003992:	481b      	ldr	r0, [pc, #108]	@ (8003a00 <HAL_ADC_ConfigChannel+0x7c4>)
 8003994:	f7fe fdfb 	bl	800258e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003998:	e024      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1f      	ldr	r2, [pc, #124]	@ (8003a1c <HAL_ADC_ConfigChannel+0x7e0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d120      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d11a      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a14      	ldr	r2, [pc, #80]	@ (8003a08 <HAL_ADC_ConfigChannel+0x7cc>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d115      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80039c2:	4619      	mov	r1, r3
 80039c4:	480e      	ldr	r0, [pc, #56]	@ (8003a00 <HAL_ADC_ConfigChannel+0x7c4>)
 80039c6:	f7fe fde2 	bl	800258e <LL_ADC_SetCommonPathInternalCh>
 80039ca:	e00c      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d0:	f043 0220 	orr.w	r2, r3, #32
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80039de:	e002      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039e0:	bf00      	nop
 80039e2:	e000      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80039ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	37d8      	adds	r7, #216	@ 0xd8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	80080000 	.word	0x80080000
 8003a00:	50040300 	.word	0x50040300
 8003a04:	c7520000 	.word	0xc7520000
 8003a08:	50040000 	.word	0x50040000
 8003a0c:	50040200 	.word	0x50040200
 8003a10:	20000014 	.word	0x20000014
 8003a14:	053e2d63 	.word	0x053e2d63
 8003a18:	cb840000 	.word	0xcb840000
 8003a1c:	80000001 	.word	0x80000001

08003a20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe ff55 	bl	80028e0 <LL_ADC_IsEnabled>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d169      	bne.n	8003b10 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	4b36      	ldr	r3, [pc, #216]	@ (8003b1c <ADC_Enable+0xfc>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00d      	beq.n	8003a66 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4e:	f043 0210 	orr.w	r2, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5a:	f043 0201 	orr.w	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e055      	b.n	8003b12 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe ff10 	bl	8002890 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a70:	482b      	ldr	r0, [pc, #172]	@ (8003b20 <ADC_Enable+0x100>)
 8003a72:	f7fe fd9f 	bl	80025b4 <LL_ADC_GetCommonPathInternalCh>
 8003a76:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d013      	beq.n	8003aa8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a80:	4b28      	ldr	r3, [pc, #160]	@ (8003b24 <ADC_Enable+0x104>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	099b      	lsrs	r3, r3, #6
 8003a86:	4a28      	ldr	r2, [pc, #160]	@ (8003b28 <ADC_Enable+0x108>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	099b      	lsrs	r3, r3, #6
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	4613      	mov	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a9a:	e002      	b.n	8003aa2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f9      	bne.n	8003a9c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003aa8:	f7fe fd52 	bl	8002550 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aae:	e028      	b.n	8003b02 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe ff13 	bl	80028e0 <LL_ADC_IsEnabled>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d104      	bne.n	8003aca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fe fee3 	bl	8002890 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003aca:	f7fe fd41 	bl	8002550 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d914      	bls.n	8003b02 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d00d      	beq.n	8003b02 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aea:	f043 0210 	orr.w	r2, r3, #16
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af6:	f043 0201 	orr.w	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e007      	b.n	8003b12 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d1cf      	bne.n	8003ab0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	8000003f 	.word	0x8000003f
 8003b20:	50040300 	.word	0x50040300
 8003b24:	20000014 	.word	0x20000014
 8003b28:	053e2d63 	.word	0x053e2d63

08003b2c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fe fee4 	bl	8002906 <LL_ADC_IsDisableOngoing>
 8003b3e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe fecb 	bl	80028e0 <LL_ADC_IsEnabled>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d047      	beq.n	8003be0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d144      	bne.n	8003be0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 030d 	and.w	r3, r3, #13
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d10c      	bne.n	8003b7e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe fea5 	bl	80028b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2203      	movs	r2, #3
 8003b74:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b76:	f7fe fceb 	bl	8002550 <HAL_GetTick>
 8003b7a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b7c:	e029      	b.n	8003bd2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b82:	f043 0210 	orr.w	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b8e:	f043 0201 	orr.w	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e023      	b.n	8003be2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b9a:	f7fe fcd9 	bl	8002550 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d914      	bls.n	8003bd2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00d      	beq.n	8003bd2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bba:	f043 0210 	orr.w	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc6:	f043 0201 	orr.w	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e007      	b.n	8003be2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1dc      	bne.n	8003b9a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d14b      	bne.n	8003c9c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c08:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d021      	beq.n	8003c62 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe fd29 	bl	800267a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d032      	beq.n	8003c94 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d12b      	bne.n	8003c94 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d11f      	bne.n	8003c94 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c58:	f043 0201 	orr.w	r2, r3, #1
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c60:	e018      	b.n	8003c94 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d111      	bne.n	8003c94 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8c:	f043 0201 	orr.w	r2, r3, #1
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f7ff faa9 	bl	80031ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c9a:	e00e      	b.n	8003cba <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f7ff fabd 	bl	8003228 <HAL_ADC_ErrorCallback>
}
 8003cae:	e004      	b.n	8003cba <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	4798      	blx	r3
}
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f7ff fa95 	bl	8003200 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfc:	f043 0204 	orr.w	r2, r3, #4
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f7ff fa8f 	bl	8003228 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <LL_ADC_IsEnabled>:
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <LL_ADC_IsEnabled+0x18>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <LL_ADC_IsEnabled+0x1a>
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <LL_ADC_StartCalibration>:
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003d4a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	609a      	str	r2, [r3, #8]
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <LL_ADC_IsCalibrationOnGoing>:
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d7e:	d101      	bne.n	8003d84 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d101      	bne.n	8003daa <LL_ADC_REG_IsConversionOngoing+0x18>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_ADCEx_Calibration_Start+0x1c>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e04d      	b.n	8003e70 <HAL_ADCEx_Calibration_Start+0xb8>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff fea5 	bl	8003b2c <ADC_Disable>
 8003de2:	4603      	mov	r3, r0
 8003de4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d136      	bne.n	8003e5a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003df4:	f023 0302 	bic.w	r3, r3, #2
 8003df8:	f043 0202 	orr.w	r2, r3, #2
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6839      	ldr	r1, [r7, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff ff96 	bl	8003d38 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e0c:	e014      	b.n	8003e38 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	3301      	adds	r3, #1
 8003e12:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003e1a:	d30d      	bcc.n	8003e38 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e20:	f023 0312 	bic.w	r3, r3, #18
 8003e24:	f043 0210 	orr.w	r2, r3, #16
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e01b      	b.n	8003e70 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff ff94 	bl	8003d6a <LL_ADC_IsCalibrationOnGoing>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1e2      	bne.n	8003e0e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4c:	f023 0303 	bic.w	r3, r3, #3
 8003e50:	f043 0201 	orr.w	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	655a      	str	r2, [r3, #84]	@ 0x54
 8003e58:	e005      	b.n	8003e66 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5e:	f043 0210 	orr.w	r2, r3, #16
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003edc:	b590      	push	{r4, r7, lr}
 8003ede:	b09f      	sub	sp, #124	@ 0x7c
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e093      	b.n	8004022 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003f02:	2300      	movs	r3, #0
 8003f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003f06:	2300      	movs	r3, #0
 8003f08:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a47      	ldr	r2, [pc, #284]	@ (800402c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d102      	bne.n	8003f1a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f14:	4b46      	ldr	r3, [pc, #280]	@ (8004030 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	e001      	b.n	8003f1e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10b      	bne.n	8003f3c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f28:	f043 0220 	orr.w	r2, r3, #32
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e072      	b.n	8004022 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff ff27 	bl	8003d92 <LL_ADC_REG_IsConversionOngoing>
 8003f44:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff ff21 	bl	8003d92 <LL_ADC_REG_IsConversionOngoing>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d154      	bne.n	8004000 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003f56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d151      	bne.n	8004000 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f5c:	4b35      	ldr	r3, [pc, #212]	@ (8004034 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d02c      	beq.n	8003fc2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	6859      	ldr	r1, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003f7a:	035b      	lsls	r3, r3, #13
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f84:	4829      	ldr	r0, [pc, #164]	@ (800402c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003f86:	f7ff fec4 	bl	8003d12 <LL_ADC_IsEnabled>
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	4828      	ldr	r0, [pc, #160]	@ (8004030 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003f8e:	f7ff fec0 	bl	8003d12 <LL_ADC_IsEnabled>
 8003f92:	4603      	mov	r3, r0
 8003f94:	431c      	orrs	r4, r3
 8003f96:	4828      	ldr	r0, [pc, #160]	@ (8004038 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003f98:	f7ff febb 	bl	8003d12 <LL_ADC_IsEnabled>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	4323      	orrs	r3, r4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d137      	bne.n	8004014 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003fa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003fac:	f023 030f 	bic.w	r3, r3, #15
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	6811      	ldr	r1, [r2, #0]
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	6892      	ldr	r2, [r2, #8]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fbe:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003fc0:	e028      	b.n	8004014 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003fc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fcc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fce:	4817      	ldr	r0, [pc, #92]	@ (800402c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003fd0:	f7ff fe9f 	bl	8003d12 <LL_ADC_IsEnabled>
 8003fd4:	4604      	mov	r4, r0
 8003fd6:	4816      	ldr	r0, [pc, #88]	@ (8004030 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003fd8:	f7ff fe9b 	bl	8003d12 <LL_ADC_IsEnabled>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	431c      	orrs	r4, r3
 8003fe0:	4815      	ldr	r0, [pc, #84]	@ (8004038 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003fe2:	f7ff fe96 	bl	8003d12 <LL_ADC_IsEnabled>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4323      	orrs	r3, r4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d112      	bne.n	8004014 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003fee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003ff6:	f023 030f 	bic.w	r3, r3, #15
 8003ffa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ffc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ffe:	e009      	b.n	8004014 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004004:	f043 0220 	orr.w	r2, r3, #32
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004012:	e000      	b.n	8004016 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004014:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800401e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004022:	4618      	mov	r0, r3
 8004024:	377c      	adds	r7, #124	@ 0x7c
 8004026:	46bd      	mov	sp, r7
 8004028:	bd90      	pop	{r4, r7, pc}
 800402a:	bf00      	nop
 800402c:	50040000 	.word	0x50040000
 8004030:	50040100 	.word	0x50040100
 8004034:	50040300 	.word	0x50040300
 8004038:	50040200 	.word	0x50040200

0800403c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800404c:	4b0c      	ldr	r3, [pc, #48]	@ (8004080 <__NVIC_SetPriorityGrouping+0x44>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004058:	4013      	ands	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004064:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800406c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800406e:	4a04      	ldr	r2, [pc, #16]	@ (8004080 <__NVIC_SetPriorityGrouping+0x44>)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	60d3      	str	r3, [r2, #12]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	e000ed00 	.word	0xe000ed00

08004084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004088:	4b04      	ldr	r3, [pc, #16]	@ (800409c <__NVIC_GetPriorityGrouping+0x18>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	0a1b      	lsrs	r3, r3, #8
 800408e:	f003 0307 	and.w	r3, r3, #7
}
 8004092:	4618      	mov	r0, r3
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	e000ed00 	.word	0xe000ed00

080040a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	db0b      	blt.n	80040ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	f003 021f 	and.w	r2, r3, #31
 80040b8:	4907      	ldr	r1, [pc, #28]	@ (80040d8 <__NVIC_EnableIRQ+0x38>)
 80040ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	2001      	movs	r0, #1
 80040c2:	fa00 f202 	lsl.w	r2, r0, r2
 80040c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	e000e100 	.word	0xe000e100

080040dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	6039      	str	r1, [r7, #0]
 80040e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	db0a      	blt.n	8004106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	490c      	ldr	r1, [pc, #48]	@ (8004128 <__NVIC_SetPriority+0x4c>)
 80040f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fa:	0112      	lsls	r2, r2, #4
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	440b      	add	r3, r1
 8004100:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004104:	e00a      	b.n	800411c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4908      	ldr	r1, [pc, #32]	@ (800412c <__NVIC_SetPriority+0x50>)
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	3b04      	subs	r3, #4
 8004114:	0112      	lsls	r2, r2, #4
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	440b      	add	r3, r1
 800411a:	761a      	strb	r2, [r3, #24]
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	e000e100 	.word	0xe000e100
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004130:	b480      	push	{r7}
 8004132:	b089      	sub	sp, #36	@ 0x24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f1c3 0307 	rsb	r3, r3, #7
 800414a:	2b04      	cmp	r3, #4
 800414c:	bf28      	it	cs
 800414e:	2304      	movcs	r3, #4
 8004150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3304      	adds	r3, #4
 8004156:	2b06      	cmp	r3, #6
 8004158:	d902      	bls.n	8004160 <NVIC_EncodePriority+0x30>
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	3b03      	subs	r3, #3
 800415e:	e000      	b.n	8004162 <NVIC_EncodePriority+0x32>
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004164:	f04f 32ff 	mov.w	r2, #4294967295
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43da      	mvns	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	401a      	ands	r2, r3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004178:	f04f 31ff 	mov.w	r1, #4294967295
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	fa01 f303 	lsl.w	r3, r1, r3
 8004182:	43d9      	mvns	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004188:	4313      	orrs	r3, r2
         );
}
 800418a:	4618      	mov	r0, r3
 800418c:	3724      	adds	r7, #36	@ 0x24
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041a8:	d301      	bcc.n	80041ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041aa:	2301      	movs	r3, #1
 80041ac:	e00f      	b.n	80041ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041ae:	4a0a      	ldr	r2, [pc, #40]	@ (80041d8 <SysTick_Config+0x40>)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041b6:	210f      	movs	r1, #15
 80041b8:	f04f 30ff 	mov.w	r0, #4294967295
 80041bc:	f7ff ff8e 	bl	80040dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041c0:	4b05      	ldr	r3, [pc, #20]	@ (80041d8 <SysTick_Config+0x40>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041c6:	4b04      	ldr	r3, [pc, #16]	@ (80041d8 <SysTick_Config+0x40>)
 80041c8:	2207      	movs	r2, #7
 80041ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	e000e010 	.word	0xe000e010

080041dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff ff29 	bl	800403c <__NVIC_SetPriorityGrouping>
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b086      	sub	sp, #24
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	4603      	mov	r3, r0
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004204:	f7ff ff3e 	bl	8004084 <__NVIC_GetPriorityGrouping>
 8004208:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	6978      	ldr	r0, [r7, #20]
 8004210:	f7ff ff8e 	bl	8004130 <NVIC_EncodePriority>
 8004214:	4602      	mov	r2, r0
 8004216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800421a:	4611      	mov	r1, r2
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff ff5d 	bl	80040dc <__NVIC_SetPriority>
}
 8004222:	bf00      	nop
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	4603      	mov	r3, r0
 8004232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff ff31 	bl	80040a0 <__NVIC_EnableIRQ>
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff ffa2 	bl	8004198 <SysTick_Config>
 8004254:	4603      	mov	r3, r0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e098      	b.n	80043a4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	4b4d      	ldr	r3, [pc, #308]	@ (80043b0 <HAL_DMA_Init+0x150>)
 800427a:	429a      	cmp	r2, r3
 800427c:	d80f      	bhi.n	800429e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	4b4b      	ldr	r3, [pc, #300]	@ (80043b4 <HAL_DMA_Init+0x154>)
 8004286:	4413      	add	r3, r2
 8004288:	4a4b      	ldr	r2, [pc, #300]	@ (80043b8 <HAL_DMA_Init+0x158>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	091b      	lsrs	r3, r3, #4
 8004290:	009a      	lsls	r2, r3, #2
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a48      	ldr	r2, [pc, #288]	@ (80043bc <HAL_DMA_Init+0x15c>)
 800429a:	641a      	str	r2, [r3, #64]	@ 0x40
 800429c:	e00e      	b.n	80042bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	4b46      	ldr	r3, [pc, #280]	@ (80043c0 <HAL_DMA_Init+0x160>)
 80042a6:	4413      	add	r3, r2
 80042a8:	4a43      	ldr	r2, [pc, #268]	@ (80043b8 <HAL_DMA_Init+0x158>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	091b      	lsrs	r3, r3, #4
 80042b0:	009a      	lsls	r2, r3, #2
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a42      	ldr	r2, [pc, #264]	@ (80043c4 <HAL_DMA_Init+0x164>)
 80042ba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80042d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80042e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004316:	d039      	beq.n	800438c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	4a27      	ldr	r2, [pc, #156]	@ (80043bc <HAL_DMA_Init+0x15c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d11a      	bne.n	8004358 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004322:	4b29      	ldr	r3, [pc, #164]	@ (80043c8 <HAL_DMA_Init+0x168>)
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432a:	f003 031c 	and.w	r3, r3, #28
 800432e:	210f      	movs	r1, #15
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	4924      	ldr	r1, [pc, #144]	@ (80043c8 <HAL_DMA_Init+0x168>)
 8004338:	4013      	ands	r3, r2
 800433a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800433c:	4b22      	ldr	r3, [pc, #136]	@ (80043c8 <HAL_DMA_Init+0x168>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6859      	ldr	r1, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004348:	f003 031c 	and.w	r3, r3, #28
 800434c:	fa01 f303 	lsl.w	r3, r1, r3
 8004350:	491d      	ldr	r1, [pc, #116]	@ (80043c8 <HAL_DMA_Init+0x168>)
 8004352:	4313      	orrs	r3, r2
 8004354:	600b      	str	r3, [r1, #0]
 8004356:	e019      	b.n	800438c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004358:	4b1c      	ldr	r3, [pc, #112]	@ (80043cc <HAL_DMA_Init+0x16c>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004360:	f003 031c 	and.w	r3, r3, #28
 8004364:	210f      	movs	r1, #15
 8004366:	fa01 f303 	lsl.w	r3, r1, r3
 800436a:	43db      	mvns	r3, r3
 800436c:	4917      	ldr	r1, [pc, #92]	@ (80043cc <HAL_DMA_Init+0x16c>)
 800436e:	4013      	ands	r3, r2
 8004370:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004372:	4b16      	ldr	r3, [pc, #88]	@ (80043cc <HAL_DMA_Init+0x16c>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6859      	ldr	r1, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437e:	f003 031c 	and.w	r3, r3, #28
 8004382:	fa01 f303 	lsl.w	r3, r1, r3
 8004386:	4911      	ldr	r1, [pc, #68]	@ (80043cc <HAL_DMA_Init+0x16c>)
 8004388:	4313      	orrs	r3, r2
 800438a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	40020407 	.word	0x40020407
 80043b4:	bffdfff8 	.word	0xbffdfff8
 80043b8:	cccccccd 	.word	0xcccccccd
 80043bc:	40020000 	.word	0x40020000
 80043c0:	bffdfbf8 	.word	0xbffdfbf8
 80043c4:	40020400 	.word	0x40020400
 80043c8:	400200a8 	.word	0x400200a8
 80043cc:	400204a8 	.word	0x400204a8

080043d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_DMA_Start_IT+0x20>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e04b      	b.n	8004488 <HAL_DMA_Start_IT+0xb8>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	d13a      	bne.n	800447a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	68b9      	ldr	r1, [r7, #8]
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f96d 	bl	8004708 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004432:	2b00      	cmp	r3, #0
 8004434:	d008      	beq.n	8004448 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 020e 	orr.w	r2, r2, #14
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	e00f      	b.n	8004468 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0204 	bic.w	r2, r2, #4
 8004456:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 020a 	orr.w	r2, r2, #10
 8004466:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	e005      	b.n	8004486 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004482:	2302      	movs	r3, #2
 8004484:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004486:	7dfb      	ldrb	r3, [r7, #23]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d008      	beq.n	80044ba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2204      	movs	r2, #4
 80044ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e022      	b.n	8004500 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 020e 	bic.w	r2, r2, #14
 80044c8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0201 	bic.w	r2, r2, #1
 80044d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044de:	f003 021c 	and.w	r2, r3, #28
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e6:	2101      	movs	r1, #1
 80044e8:	fa01 f202 	lsl.w	r2, r1, r2
 80044ec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d005      	beq.n	8004530 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2204      	movs	r2, #4
 8004528:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
 800452e:	e029      	b.n	8004584 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 020e 	bic.w	r2, r2, #14
 800453e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0201 	bic.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004554:	f003 021c 	and.w	r2, r3, #28
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455c:	2101      	movs	r1, #1
 800455e:	fa01 f202 	lsl.w	r2, r1, r2
 8004562:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	4798      	blx	r3
    }
  }
  return status;
 8004584:	7bfb      	ldrb	r3, [r7, #15]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045aa:	f003 031c 	and.w	r3, r3, #28
 80045ae:	2204      	movs	r2, #4
 80045b0:	409a      	lsls	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4013      	ands	r3, r2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d026      	beq.n	8004608 <HAL_DMA_IRQHandler+0x7a>
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d021      	beq.n	8004608 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d107      	bne.n	80045e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0204 	bic.w	r2, r2, #4
 80045e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e6:	f003 021c 	and.w	r2, r3, #28
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	2104      	movs	r1, #4
 80045f0:	fa01 f202 	lsl.w	r2, r1, r2
 80045f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d071      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004606:	e06c      	b.n	80046e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460c:	f003 031c 	and.w	r3, r3, #28
 8004610:	2202      	movs	r2, #2
 8004612:	409a      	lsls	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4013      	ands	r3, r2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d02e      	beq.n	800467a <HAL_DMA_IRQHandler+0xec>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d029      	beq.n	800467a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10b      	bne.n	800464c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 020a 	bic.w	r2, r2, #10
 8004642:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004650:	f003 021c 	and.w	r2, r3, #28
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004658:	2102      	movs	r1, #2
 800465a:	fa01 f202 	lsl.w	r2, r1, r2
 800465e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d038      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004678:	e033      	b.n	80046e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467e:	f003 031c 	and.w	r3, r3, #28
 8004682:	2208      	movs	r2, #8
 8004684:	409a      	lsls	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4013      	ands	r3, r2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d02a      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x156>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d025      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 020e 	bic.w	r2, r2, #14
 80046a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ac:	f003 021c 	and.w	r2, r3, #28
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	2101      	movs	r1, #1
 80046b6:	fa01 f202 	lsl.w	r2, r1, r2
 80046ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d004      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80046e2:	bf00      	nop
 80046e4:	bf00      	nop
}
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046fa:	b2db      	uxtb	r3, r3
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471a:	f003 021c 	and.w	r2, r3, #28
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	2101      	movs	r1, #1
 8004724:	fa01 f202 	lsl.w	r2, r1, r2
 8004728:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2b10      	cmp	r3, #16
 8004738:	d108      	bne.n	800474c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800474a:	e007      	b.n	800475c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	60da      	str	r2, [r3, #12]
}
 800475c:	bf00      	nop
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004776:	e17f      	b.n	8004a78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	2101      	movs	r1, #1
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	fa01 f303 	lsl.w	r3, r1, r3
 8004784:	4013      	ands	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 8171 	beq.w	8004a72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d005      	beq.n	80047a8 <HAL_GPIO_Init+0x40>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d130      	bne.n	800480a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	2203      	movs	r2, #3
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	43db      	mvns	r3, r3
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4013      	ands	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047de:	2201      	movs	r2, #1
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	43db      	mvns	r3, r3
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4013      	ands	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	f003 0201 	and.w	r2, r3, #1
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	2b03      	cmp	r3, #3
 8004814:	d118      	bne.n	8004848 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800481c:	2201      	movs	r2, #1
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4013      	ands	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	08db      	lsrs	r3, r3, #3
 8004832:	f003 0201 	and.w	r2, r3, #1
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	2b03      	cmp	r3, #3
 8004852:	d017      	beq.n	8004884 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	2203      	movs	r2, #3
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	43db      	mvns	r3, r3
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4013      	ands	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d123      	bne.n	80048d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	08da      	lsrs	r2, r3, #3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3208      	adds	r2, #8
 8004898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	220f      	movs	r2, #15
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	43db      	mvns	r3, r3
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4013      	ands	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	08da      	lsrs	r2, r3, #3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3208      	adds	r2, #8
 80048d2:	6939      	ldr	r1, [r7, #16]
 80048d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	2203      	movs	r2, #3
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	43db      	mvns	r3, r3
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4013      	ands	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 0203 	and.w	r2, r3, #3
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 80ac 	beq.w	8004a72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800491a:	4b5f      	ldr	r3, [pc, #380]	@ (8004a98 <HAL_GPIO_Init+0x330>)
 800491c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800491e:	4a5e      	ldr	r2, [pc, #376]	@ (8004a98 <HAL_GPIO_Init+0x330>)
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	6613      	str	r3, [r2, #96]	@ 0x60
 8004926:	4b5c      	ldr	r3, [pc, #368]	@ (8004a98 <HAL_GPIO_Init+0x330>)
 8004928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	60bb      	str	r3, [r7, #8]
 8004930:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004932:	4a5a      	ldr	r2, [pc, #360]	@ (8004a9c <HAL_GPIO_Init+0x334>)
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	089b      	lsrs	r3, r3, #2
 8004938:	3302      	adds	r3, #2
 800493a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800493e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	220f      	movs	r2, #15
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	43db      	mvns	r3, r3
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4013      	ands	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800495c:	d025      	beq.n	80049aa <HAL_GPIO_Init+0x242>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a4f      	ldr	r2, [pc, #316]	@ (8004aa0 <HAL_GPIO_Init+0x338>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d01f      	beq.n	80049a6 <HAL_GPIO_Init+0x23e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a4e      	ldr	r2, [pc, #312]	@ (8004aa4 <HAL_GPIO_Init+0x33c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d019      	beq.n	80049a2 <HAL_GPIO_Init+0x23a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a4d      	ldr	r2, [pc, #308]	@ (8004aa8 <HAL_GPIO_Init+0x340>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d013      	beq.n	800499e <HAL_GPIO_Init+0x236>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a4c      	ldr	r2, [pc, #304]	@ (8004aac <HAL_GPIO_Init+0x344>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00d      	beq.n	800499a <HAL_GPIO_Init+0x232>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a4b      	ldr	r2, [pc, #300]	@ (8004ab0 <HAL_GPIO_Init+0x348>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d007      	beq.n	8004996 <HAL_GPIO_Init+0x22e>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a4a      	ldr	r2, [pc, #296]	@ (8004ab4 <HAL_GPIO_Init+0x34c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d101      	bne.n	8004992 <HAL_GPIO_Init+0x22a>
 800498e:	2306      	movs	r3, #6
 8004990:	e00c      	b.n	80049ac <HAL_GPIO_Init+0x244>
 8004992:	2307      	movs	r3, #7
 8004994:	e00a      	b.n	80049ac <HAL_GPIO_Init+0x244>
 8004996:	2305      	movs	r3, #5
 8004998:	e008      	b.n	80049ac <HAL_GPIO_Init+0x244>
 800499a:	2304      	movs	r3, #4
 800499c:	e006      	b.n	80049ac <HAL_GPIO_Init+0x244>
 800499e:	2303      	movs	r3, #3
 80049a0:	e004      	b.n	80049ac <HAL_GPIO_Init+0x244>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e002      	b.n	80049ac <HAL_GPIO_Init+0x244>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <HAL_GPIO_Init+0x244>
 80049aa:	2300      	movs	r3, #0
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	f002 0203 	and.w	r2, r2, #3
 80049b2:	0092      	lsls	r2, r2, #2
 80049b4:	4093      	lsls	r3, r2
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049bc:	4937      	ldr	r1, [pc, #220]	@ (8004a9c <HAL_GPIO_Init+0x334>)
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	089b      	lsrs	r3, r3, #2
 80049c2:	3302      	adds	r3, #2
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049ca:	4b3b      	ldr	r3, [pc, #236]	@ (8004ab8 <HAL_GPIO_Init+0x350>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	43db      	mvns	r3, r3
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4013      	ands	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049ee:	4a32      	ldr	r2, [pc, #200]	@ (8004ab8 <HAL_GPIO_Init+0x350>)
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049f4:	4b30      	ldr	r3, [pc, #192]	@ (8004ab8 <HAL_GPIO_Init+0x350>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	43db      	mvns	r3, r3
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	4013      	ands	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a18:	4a27      	ldr	r2, [pc, #156]	@ (8004ab8 <HAL_GPIO_Init+0x350>)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a1e:	4b26      	ldr	r3, [pc, #152]	@ (8004ab8 <HAL_GPIO_Init+0x350>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	43db      	mvns	r3, r3
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a42:	4a1d      	ldr	r2, [pc, #116]	@ (8004ab8 <HAL_GPIO_Init+0x350>)
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004a48:	4b1b      	ldr	r3, [pc, #108]	@ (8004ab8 <HAL_GPIO_Init+0x350>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	43db      	mvns	r3, r3
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4013      	ands	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a6c:	4a12      	ldr	r2, [pc, #72]	@ (8004ab8 <HAL_GPIO_Init+0x350>)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	3301      	adds	r3, #1
 8004a76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f47f ae78 	bne.w	8004778 <HAL_GPIO_Init+0x10>
  }
}
 8004a88:	bf00      	nop
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	48000400 	.word	0x48000400
 8004aa4:	48000800 	.word	0x48000800
 8004aa8:	48000c00 	.word	0x48000c00
 8004aac:	48001000 	.word	0x48001000
 8004ab0:	48001400 	.word	0x48001400
 8004ab4:	48001800 	.word	0x48001800
 8004ab8:	40010400 	.word	0x40010400

08004abc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	887b      	ldrh	r3, [r7, #2]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	73fb      	strb	r3, [r7, #15]
 8004ad8:	e001      	b.n	8004ade <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ada:	2300      	movs	r3, #0
 8004adc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	807b      	strh	r3, [r7, #2]
 8004af8:	4613      	mov	r3, r2
 8004afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004afc:	787b      	ldrb	r3, [r7, #1]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b02:	887a      	ldrh	r2, [r7, #2]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b08:	e002      	b.n	8004b10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b0a:	887a      	ldrh	r2, [r7, #2]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b2e:	887a      	ldrh	r2, [r7, #2]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4013      	ands	r3, r2
 8004b34:	041a      	lsls	r2, r3, #16
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	43d9      	mvns	r1, r3
 8004b3a:	887b      	ldrh	r3, [r7, #2]
 8004b3c:	400b      	ands	r3, r1
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	619a      	str	r2, [r3, #24]
}
 8004b44:	bf00      	nop
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e08d      	b.n	8004c7e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fd f91e 	bl	8001db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2224      	movs	r2, #36	@ 0x24
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0201 	bic.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ba0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d107      	bne.n	8004bca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bc6:	609a      	str	r2, [r3, #8]
 8004bc8:	e006      	b.n	8004bd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004bd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d108      	bne.n	8004bf2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bee:	605a      	str	r2, [r3, #4]
 8004bf0:	e007      	b.n	8004c02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691a      	ldr	r2, [r3, #16]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69d9      	ldr	r1, [r3, #28]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a1a      	ldr	r2, [r3, #32]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	461a      	mov	r2, r3
 8004c94:	460b      	mov	r3, r1
 8004c96:	817b      	strh	r3, [r7, #10]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	f040 80fd 	bne.w	8004ea4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_I2C_Master_Transmit+0x30>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e0f6      	b.n	8004ea6 <HAL_I2C_Master_Transmit+0x21e>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cc0:	f7fd fc46 	bl	8002550 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	2319      	movs	r3, #25
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f001 fc79 	bl	80065ca <I2C_WaitOnFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e0e1      	b.n	8004ea6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2221      	movs	r2, #33	@ 0x21
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2210      	movs	r2, #16
 8004cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	893a      	ldrh	r2, [r7, #8]
 8004d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2bff      	cmp	r3, #255	@ 0xff
 8004d12:	d906      	bls.n	8004d22 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	22ff      	movs	r2, #255	@ 0xff
 8004d18:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004d1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	e007      	b.n	8004d32 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004d2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d30:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d024      	beq.n	8004d84 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3e:	781a      	ldrb	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	3301      	adds	r3, #1
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	8979      	ldrh	r1, [r7, #10]
 8004d76:	4b4e      	ldr	r3, [pc, #312]	@ (8004eb0 <HAL_I2C_Master_Transmit+0x228>)
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f001 fde7 	bl	8006950 <I2C_TransferConfig>
 8004d82:	e066      	b.n	8004e52 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	8979      	ldrh	r1, [r7, #10]
 8004d8c:	4b48      	ldr	r3, [pc, #288]	@ (8004eb0 <HAL_I2C_Master_Transmit+0x228>)
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f001 fddc 	bl	8006950 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004d98:	e05b      	b.n	8004e52 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	6a39      	ldr	r1, [r7, #32]
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f001 fc6c 	bl	800667c <I2C_WaitOnTXISFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e07b      	b.n	8004ea6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	781a      	ldrb	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d034      	beq.n	8004e52 <HAL_I2C_Master_Transmit+0x1ca>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d130      	bne.n	8004e52 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	2200      	movs	r2, #0
 8004df8:	2180      	movs	r1, #128	@ 0x80
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f001 fbe5 	bl	80065ca <I2C_WaitOnFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e04d      	b.n	8004ea6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2bff      	cmp	r3, #255	@ 0xff
 8004e12:	d90e      	bls.n	8004e32 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	22ff      	movs	r2, #255	@ 0xff
 8004e18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	8979      	ldrh	r1, [r7, #10]
 8004e22:	2300      	movs	r3, #0
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f001 fd90 	bl	8006950 <I2C_TransferConfig>
 8004e30:	e00f      	b.n	8004e52 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	8979      	ldrh	r1, [r7, #10]
 8004e44:	2300      	movs	r3, #0
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f001 fd7f 	bl	8006950 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d19e      	bne.n	8004d9a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	6a39      	ldr	r1, [r7, #32]
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f001 fc52 	bl	800670a <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e01a      	b.n	8004ea6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2220      	movs	r2, #32
 8004e76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6859      	ldr	r1, [r3, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb4 <HAL_I2C_Master_Transmit+0x22c>)
 8004e84:	400b      	ands	r3, r1
 8004e86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	e000      	b.n	8004ea6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004ea4:	2302      	movs	r3, #2
  }
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	80002000 	.word	0x80002000
 8004eb4:	fe00e800 	.word	0xfe00e800

08004eb8 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	607a      	str	r2, [r7, #4]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	817b      	strh	r3, [r7, #10]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	d17c      	bne.n	8004fd2 <HAL_I2C_Master_Transmit_IT+0x11a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ee2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ee6:	d101      	bne.n	8004eec <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e073      	b.n	8004fd4 <HAL_I2C_Master_Transmit_IT+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_I2C_Master_Transmit_IT+0x42>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e06c      	b.n	8004fd4 <HAL_I2C_Master_Transmit_IT+0x11c>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2221      	movs	r2, #33	@ 0x21
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2210      	movs	r2, #16
 8004f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	893a      	ldrh	r2, [r7, #8]
 8004f22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4a2d      	ldr	r2, [pc, #180]	@ (8004fdc <HAL_I2C_Master_Transmit_IT+0x124>)
 8004f28:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4a2c      	ldr	r2, [pc, #176]	@ (8004fe0 <HAL_I2C_Master_Transmit_IT+0x128>)
 8004f2e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2bff      	cmp	r3, #255	@ 0xff
 8004f38:	d906      	bls.n	8004f48 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	22ff      	movs	r2, #255	@ 0xff
 8004f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004f40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	e007      	b.n	8004f58 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004f52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f56:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferSize > 0U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d024      	beq.n	8004faa <HAL_I2C_Master_Transmit_IT+0xf2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f64:	781a      	ldrb	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	851a      	strh	r2, [r3, #40]	@ 0x28

      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	3301      	adds	r3, #1
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	8979      	ldrh	r1, [r7, #10]
 8004f9c:	4b11      	ldr	r3, [pc, #68]	@ (8004fe4 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f001 fcd4 	bl	8006950 <I2C_TransferConfig>
 8004fa8:	e009      	b.n	8004fbe <HAL_I2C_Master_Transmit_IT+0x106>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	8979      	ldrh	r1, [r7, #10]
 8004fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe4 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f001 fcc9 	bl	8006950 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f001 fcf3 	bl	80069b4 <I2C_Enable_IRQ>

    return HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e000      	b.n	8004fd4 <HAL_I2C_Master_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004fd2:	2302      	movs	r3, #2
  }
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	ffff0000 	.word	0xffff0000
 8004fe0:	080050d9 	.word	0x080050d9
 8004fe4:	80002000 	.word	0x80002000

08004fe8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	68f9      	ldr	r1, [r7, #12]
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	4798      	blx	r3
  }
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	70fb      	strb	r3, [r7, #3]
 8005064:	4613      	mov	r3, r2
 8005066:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <I2C_Master_ISR_IT+0x1e>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e12e      	b.n	8005354 <I2C_Master_ISR_IT+0x27c>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	091b      	lsrs	r3, r3, #4
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d013      	beq.n	8005132 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00d      	beq.n	8005132 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2210      	movs	r2, #16
 800511c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005122:	f043 0204 	orr.w	r2, r3, #4
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f001 fa0b 	bl	8006546 <I2C_Flush_TXDR>
 8005130:	e0fb      	b.n	800532a <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	089b      	lsrs	r3, r3, #2
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d023      	beq.n	8005186 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	089b      	lsrs	r3, r3, #2
 8005142:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005146:	2b00      	cmp	r3, #0
 8005148:	d01d      	beq.n	8005186 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f023 0304 	bic.w	r3, r3, #4
 8005150:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005184:	e0d1      	b.n	800532a <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	099b      	lsrs	r3, r3, #6
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d12a      	bne.n	80051e8 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	085b      	lsrs	r3, r3, #1
 8005196:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800519a:	2b00      	cmp	r3, #0
 800519c:	d024      	beq.n	80051e8 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d01e      	beq.n	80051e8 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 80ba 	beq.w	800532a <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ba:	781a      	ldrb	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80051e6:	e0a0      	b.n	800532a <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	09db      	lsrs	r3, r3, #7
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d06b      	beq.n	80052cc <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	099b      	lsrs	r3, r3, #6
 80051f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d065      	beq.n	80052cc <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005204:	b29b      	uxth	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d04e      	beq.n	80052a8 <I2C_Master_ISR_IT+0x1d0>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800520e:	2b00      	cmp	r3, #0
 8005210:	d14a      	bne.n	80052a8 <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	b29b      	uxth	r3, r3
 800521a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800521e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005224:	b29b      	uxth	r3, r3
 8005226:	2bff      	cmp	r3, #255	@ 0xff
 8005228:	d91c      	bls.n	8005264 <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	0c1b      	lsrs	r3, r3, #16
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b01      	cmp	r3, #1
 800523c:	d103      	bne.n	8005246 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005244:	e002      	b.n	800524c <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	22ff      	movs	r2, #255	@ 0xff
 800524a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005250:	b2da      	uxtb	r2, r3
 8005252:	8a79      	ldrh	r1, [r7, #18]
 8005254:	2300      	movs	r3, #0
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f001 fb77 	bl	8006950 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005262:	e032      	b.n	80052ca <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005272:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005276:	d00b      	beq.n	8005290 <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800527c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005282:	8a79      	ldrh	r1, [r7, #18]
 8005284:	2000      	movs	r0, #0
 8005286:	9000      	str	r0, [sp, #0]
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f001 fb61 	bl	8006950 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800528e:	e01c      	b.n	80052ca <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005294:	b2da      	uxtb	r2, r3
 8005296:	8a79      	ldrh	r1, [r7, #18]
 8005298:	2300      	movs	r3, #0
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f001 fb55 	bl	8006950 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052a6:	e010      	b.n	80052ca <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052b6:	d003      	beq.n	80052c0 <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 fd08 	bl	8005cce <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052be:	e034      	b.n	800532a <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80052c0:	2140      	movs	r1, #64	@ 0x40
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f001 f828 	bl	8006318 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052c8:	e02f      	b.n	800532a <I2C_Master_ISR_IT+0x252>
 80052ca:	e02e      	b.n	800532a <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	099b      	lsrs	r3, r3, #6
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d028      	beq.n	800532a <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	099b      	lsrs	r3, r3, #6
 80052dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d022      	beq.n	800532a <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d119      	bne.n	8005322 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052fc:	d015      	beq.n	800532a <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005302:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005306:	d108      	bne.n	800531a <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005316:	605a      	str	r2, [r3, #4]
 8005318:	e007      	b.n	800532a <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 fcd7 	bl	8005cce <I2C_ITMasterSeqCplt>
 8005320:	e003      	b.n	800532a <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005322:	2140      	movs	r1, #64	@ 0x40
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 fff7 	bl	8006318 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	095b      	lsrs	r3, r3, #5
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d009      	beq.n	800534a <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005342:	6979      	ldr	r1, [r7, #20]
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 fd5d 	bl	8005e04 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005378:	2b01      	cmp	r3, #1
 800537a:	d101      	bne.n	8005380 <I2C_Slave_ISR_IT+0x24>
 800537c:	2302      	movs	r3, #2
 800537e:	e0ed      	b.n	800555c <I2C_Slave_ISR_IT+0x200>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800539c:	2b00      	cmp	r3, #0
 800539e:	d004      	beq.n	80053aa <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80053a0:	6939      	ldr	r1, [r7, #16]
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 fdf8 	bl	8005f98 <I2C_ITSlaveCplt>
 80053a8:	e0d3      	b.n	8005552 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	091b      	lsrs	r3, r3, #4
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d04d      	beq.n	8005452 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	091b      	lsrs	r3, r3, #4
 80053ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d047      	beq.n	8005452 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d128      	bne.n	800541e <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b28      	cmp	r3, #40	@ 0x28
 80053d6:	d108      	bne.n	80053ea <I2C_Slave_ISR_IT+0x8e>
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053de:	d104      	bne.n	80053ea <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80053e0:	6939      	ldr	r1, [r7, #16]
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 ff42 	bl	800626c <I2C_ITListenCplt>
 80053e8:	e032      	b.n	8005450 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b29      	cmp	r3, #41	@ 0x29
 80053f4:	d10e      	bne.n	8005414 <I2C_Slave_ISR_IT+0xb8>
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053fc:	d00a      	beq.n	8005414 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2210      	movs	r2, #16
 8005404:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f001 f89d 	bl	8006546 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 fc9b 	bl	8005d48 <I2C_ITSlaveSeqCplt>
 8005412:	e01d      	b.n	8005450 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2210      	movs	r2, #16
 800541a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800541c:	e096      	b.n	800554c <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2210      	movs	r2, #16
 8005424:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800542a:	f043 0204 	orr.w	r2, r3, #4
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d004      	beq.n	8005442 <I2C_Slave_ISR_IT+0xe6>
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800543e:	f040 8085 	bne.w	800554c <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005446:	4619      	mov	r1, r3
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 ff65 	bl	8006318 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800544e:	e07d      	b.n	800554c <I2C_Slave_ISR_IT+0x1f0>
 8005450:	e07c      	b.n	800554c <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	089b      	lsrs	r3, r3, #2
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d030      	beq.n	80054c0 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	089b      	lsrs	r3, r3, #2
 8005462:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005466:	2b00      	cmp	r3, #0
 8005468:	d02a      	beq.n	80054c0 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d018      	beq.n	80054a6 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800549c:	b29b      	uxth	r3, r3
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d14f      	bne.n	8005550 <I2C_Slave_ISR_IT+0x1f4>
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054b6:	d04b      	beq.n	8005550 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 fc45 	bl	8005d48 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80054be:	e047      	b.n	8005550 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	08db      	lsrs	r3, r3, #3
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	08db      	lsrs	r3, r3, #3
 80054d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d004      	beq.n	80054e2 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80054d8:	6939      	ldr	r1, [r7, #16]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fb73 	bl	8005bc6 <I2C_ITAddrCplt>
 80054e0:	e037      	b.n	8005552 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	085b      	lsrs	r3, r3, #1
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d031      	beq.n	8005552 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	085b      	lsrs	r3, r3, #1
 80054f2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d02b      	beq.n	8005552 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054fe:	b29b      	uxth	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d018      	beq.n	8005536 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005508:	781a      	ldrb	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005534:	e00d      	b.n	8005552 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800553c:	d002      	beq.n	8005544 <I2C_Slave_ISR_IT+0x1e8>
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d106      	bne.n	8005552 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 fbff 	bl	8005d48 <I2C_ITSlaveSeqCplt>
 800554a:	e002      	b.n	8005552 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800554c:	bf00      	nop
 800554e:	e000      	b.n	8005552 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8005550:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <I2C_Master_ISR_DMA+0x1a>
 800557a:	2302      	movs	r3, #2
 800557c:	e0f0      	b.n	8005760 <I2C_Master_ISR_DMA+0x1fc>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	091b      	lsrs	r3, r3, #4
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d017      	beq.n	80055c2 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	091b      	lsrs	r3, r3, #4
 8005596:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800559a:	2b00      	cmp	r3, #0
 800559c:	d011      	beq.n	80055c2 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2210      	movs	r2, #16
 80055a4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055aa:	f043 0204 	orr.w	r2, r3, #4
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80055b2:	2120      	movs	r1, #32
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f001 f9fd 	bl	80069b4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 ffc3 	bl	8006546 <I2C_Flush_TXDR>
 80055c0:	e0c9      	b.n	8005756 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	09db      	lsrs	r3, r3, #7
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 8081 	beq.w	80056d2 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	099b      	lsrs	r3, r3, #6
 80055d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d07a      	beq.n	80056d2 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055ea:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d05c      	beq.n	80056b0 <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005602:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005608:	b29b      	uxth	r3, r3
 800560a:	2bff      	cmp	r3, #255	@ 0xff
 800560c:	d914      	bls.n	8005638 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	0c1b      	lsrs	r3, r3, #16
 8005616:	b2db      	uxtb	r3, r3
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b01      	cmp	r3, #1
 8005620:	d103      	bne.n	800562a <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005628:	e002      	b.n	8005630 <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	22ff      	movs	r2, #255	@ 0xff
 800562e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8005630:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	e010      	b.n	800565a <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005646:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800564a:	d003      	beq.n	8005654 <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	e002      	b.n	800565a <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005654:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005658:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800565e:	b2da      	uxtb	r2, r3
 8005660:	8a79      	ldrh	r1, [r7, #18]
 8005662:	2300      	movs	r3, #0
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f001 f971 	bl	8006950 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b22      	cmp	r3, #34	@ 0x22
 800568a:	d108      	bne.n	800569e <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800569a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800569c:	e05b      	b.n	8005756 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056ac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80056ae:	e052      	b.n	8005756 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056be:	d003      	beq.n	80056c8 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 fb04 	bl	8005cce <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80056c6:	e046      	b.n	8005756 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80056c8:	2140      	movs	r1, #64	@ 0x40
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 fe24 	bl	8006318 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80056d0:	e041      	b.n	8005756 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	099b      	lsrs	r3, r3, #6
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d029      	beq.n	8005732 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	099b      	lsrs	r3, r3, #6
 80056e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d023      	beq.n	8005732 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d119      	bne.n	8005728 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005702:	d027      	beq.n	8005754 <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005708:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800570c:	d108      	bne.n	8005720 <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800571c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800571e:	e019      	b.n	8005754 <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 fad4 	bl	8005cce <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005726:	e015      	b.n	8005754 <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005728:	2140      	movs	r1, #64	@ 0x40
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 fdf4 	bl	8006318 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005730:	e010      	b.n	8005754 <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	095b      	lsrs	r3, r3, #5
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00b      	beq.n	8005756 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	095b      	lsrs	r3, r3, #5
 8005742:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800574a:	68b9      	ldr	r1, [r7, #8]
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 fb59 	bl	8005e04 <I2C_ITMasterCplt>
 8005752:	e000      	b.n	8005756 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 8005754:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005774:	4b94      	ldr	r3, [pc, #592]	@ (80059c8 <I2C_Mem_ISR_DMA+0x260>)
 8005776:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800577e:	2b01      	cmp	r3, #1
 8005780:	d101      	bne.n	8005786 <I2C_Mem_ISR_DMA+0x1e>
 8005782:	2302      	movs	r3, #2
 8005784:	e139      	b.n	80059fa <I2C_Mem_ISR_DMA+0x292>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d017      	beq.n	80057ca <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	091b      	lsrs	r3, r3, #4
 800579e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d011      	beq.n	80057ca <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2210      	movs	r2, #16
 80057ac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b2:	f043 0204 	orr.w	r2, r3, #4
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80057ba:	2120      	movs	r1, #32
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f001 f8f9 	bl	80069b4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 febf 	bl	8006546 <I2C_Flush_TXDR>
 80057c8:	e112      	b.n	80059f0 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	085b      	lsrs	r3, r3, #1
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00f      	beq.n	80057f6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	085b      	lsrs	r3, r3, #1
 80057da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80057ea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f04f 32ff 	mov.w	r2, #4294967295
 80057f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80057f4:	e0fc      	b.n	80059f0 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	09db      	lsrs	r3, r3, #7
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d06e      	beq.n	80058e0 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	099b      	lsrs	r3, r3, #6
 8005806:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800580a:	2b00      	cmp	r3, #0
 800580c:	d068      	beq.n	80058e0 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800580e:	2101      	movs	r1, #1
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f001 f953 	bl	8006abc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005816:	2110      	movs	r1, #16
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f001 f8cb 	bl	80069b4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005822:	b29b      	uxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d056      	beq.n	80058d6 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800582c:	b29b      	uxth	r3, r3
 800582e:	2bff      	cmp	r3, #255	@ 0xff
 8005830:	d91e      	bls.n	8005870 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	0c1b      	lsrs	r3, r3, #16
 800583a:	b2db      	uxtb	r3, r3
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b01      	cmp	r3, #1
 8005844:	d103      	bne.n	800584e <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2201      	movs	r2, #1
 800584a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800584c:	e002      	b.n	8005854 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	22ff      	movs	r2, #255	@ 0xff
 8005852:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005858:	b299      	uxth	r1, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800585e:	b2da      	uxtb	r2, r3
 8005860:	2300      	movs	r3, #0
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f001 f871 	bl	8006950 <I2C_TransferConfig>
 800586e:	e011      	b.n	8005894 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800587e:	b299      	uxth	r1, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005884:	b2da      	uxtb	r2, r3
 8005886:	2300      	movs	r3, #0
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f001 f85e 	bl	8006950 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b22      	cmp	r3, #34	@ 0x22
 80058b0:	d108      	bne.n	80058c4 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058c0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80058c2:	e095      	b.n	80059f0 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058d2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80058d4:	e08c      	b.n	80059f0 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80058d6:	2140      	movs	r1, #64	@ 0x40
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f000 fd1d 	bl	8006318 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80058de:	e087      	b.n	80059f0 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	099b      	lsrs	r3, r3, #6
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d071      	beq.n	80059d0 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	099b      	lsrs	r3, r3, #6
 80058f0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d06b      	beq.n	80059d0 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80058f8:	2101      	movs	r1, #1
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f001 f8de 	bl	8006abc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005900:	2110      	movs	r1, #16
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f001 f856 	bl	80069b4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b22      	cmp	r3, #34	@ 0x22
 8005912:	d101      	bne.n	8005918 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8005914:	4b2d      	ldr	r3, [pc, #180]	@ (80059cc <I2C_Mem_ISR_DMA+0x264>)
 8005916:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800591c:	b29b      	uxth	r3, r3
 800591e:	2bff      	cmp	r3, #255	@ 0xff
 8005920:	d91e      	bls.n	8005960 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	0c1b      	lsrs	r3, r3, #16
 800592a:	b2db      	uxtb	r3, r3
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b01      	cmp	r3, #1
 8005934:	d103      	bne.n	800593e <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800593c:	e002      	b.n	8005944 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	22ff      	movs	r2, #255	@ 0xff
 8005942:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005948:	b299      	uxth	r1, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800594e:	b2da      	uxtb	r2, r3
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 fff9 	bl	8006950 <I2C_TransferConfig>
 800595e:	e011      	b.n	8005984 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800596e:	b299      	uxth	r1, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005974:	b2da      	uxtb	r2, r3
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 ffe6 	bl	8006950 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b22      	cmp	r3, #34	@ 0x22
 80059a0:	d108      	bne.n	80059b4 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059b0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80059b2:	e01d      	b.n	80059f0 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059c2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80059c4:	e014      	b.n	80059f0 <I2C_Mem_ISR_DMA+0x288>
 80059c6:	bf00      	nop
 80059c8:	80002000 	.word	0x80002000
 80059cc:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d009      	beq.n	80059f0 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 fa0a 	bl	8005e04 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop

08005a04 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a14:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <I2C_Slave_ISR_DMA+0x24>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e0ca      	b.n	8005bbe <I2C_Slave_ISR_DMA+0x1ba>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	095b      	lsrs	r3, r3, #5
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d004      	beq.n	8005a52 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 faa4 	bl	8005f98 <I2C_ITSlaveCplt>
 8005a50:	e0b0      	b.n	8005bb4 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	091b      	lsrs	r3, r3, #4
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 809a 	beq.w	8005b94 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	091b      	lsrs	r3, r3, #4
 8005a64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 8093 	beq.w	8005b94 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	0b9b      	lsrs	r3, r3, #14
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d105      	bne.n	8005a86 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	0bdb      	lsrs	r3, r3, #15
 8005a7e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d07f      	beq.n	8005b86 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00d      	beq.n	8005aaa <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	0bdb      	lsrs	r3, r3, #15
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00d      	beq.n	8005ace <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	0b9b      	lsrs	r3, r3, #14
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d007      	beq.n	8005ace <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8005aca:	2301      	movs	r3, #1
 8005acc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d128      	bne.n	8005b26 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b28      	cmp	r3, #40	@ 0x28
 8005ade:	d108      	bne.n	8005af2 <I2C_Slave_ISR_DMA+0xee>
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ae6:	d104      	bne.n	8005af2 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 fbbe 	bl	800626c <I2C_ITListenCplt>
 8005af0:	e048      	b.n	8005b84 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b29      	cmp	r3, #41	@ 0x29
 8005afc:	d10e      	bne.n	8005b1c <I2C_Slave_ISR_DMA+0x118>
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b04:	d00a      	beq.n	8005b1c <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2210      	movs	r2, #16
 8005b0c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 fd19 	bl	8006546 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f917 	bl	8005d48 <I2C_ITSlaveSeqCplt>
 8005b1a:	e033      	b.n	8005b84 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2210      	movs	r2, #16
 8005b22:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005b24:	e034      	b.n	8005b90 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2210      	movs	r2, #16
 8005b2c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b32:	f043 0204 	orr.w	r2, r3, #4
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b40:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <I2C_Slave_ISR_DMA+0x14c>
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b4e:	d11f      	bne.n	8005b90 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	2b21      	cmp	r3, #33	@ 0x21
 8005b54:	d002      	beq.n	8005b5c <I2C_Slave_ISR_DMA+0x158>
 8005b56:	7dfb      	ldrb	r3, [r7, #23]
 8005b58:	2b29      	cmp	r3, #41	@ 0x29
 8005b5a:	d103      	bne.n	8005b64 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2221      	movs	r2, #33	@ 0x21
 8005b60:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b62:	e008      	b.n	8005b76 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	2b22      	cmp	r3, #34	@ 0x22
 8005b68:	d002      	beq.n	8005b70 <I2C_Slave_ISR_DMA+0x16c>
 8005b6a:	7dfb      	ldrb	r3, [r7, #23]
 8005b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b6e:	d102      	bne.n	8005b76 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2222      	movs	r2, #34	@ 0x22
 8005b74:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 fbcb 	bl	8006318 <I2C_ITError>
      if (treatdmanack == 1U)
 8005b82:	e005      	b.n	8005b90 <I2C_Slave_ISR_DMA+0x18c>
 8005b84:	e004      	b.n	8005b90 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2210      	movs	r2, #16
 8005b8c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005b8e:	e011      	b.n	8005bb4 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8005b90:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005b92:	e00f      	b.n	8005bb4 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	08db      	lsrs	r3, r3, #3
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d009      	beq.n	8005bb4 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	08db      	lsrs	r3, r3, #3
 8005ba4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005bac:	68b9      	ldr	r1, [r7, #8]
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 f809 	bl	8005bc6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005bdc:	2b28      	cmp	r3, #40	@ 0x28
 8005bde:	d16a      	bne.n	8005cb6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	0c1b      	lsrs	r3, r3, #16
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	0c1b      	lsrs	r3, r3, #16
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005bfe:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c0c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005c1a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d138      	bne.n	8005c96 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005c24:	897b      	ldrh	r3, [r7, #10]
 8005c26:	09db      	lsrs	r3, r3, #7
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	89bb      	ldrh	r3, [r7, #12]
 8005c2c:	4053      	eors	r3, r2
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	f003 0306 	and.w	r3, r3, #6
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d11c      	bne.n	8005c72 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005c38:	897b      	ldrh	r3, [r7, #10]
 8005c3a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d13b      	bne.n	8005cc6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2208      	movs	r2, #8
 8005c5a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005c64:	89ba      	ldrh	r2, [r7, #12]
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7ff f9f4 	bl	8005058 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005c70:	e029      	b.n	8005cc6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005c72:	893b      	ldrh	r3, [r7, #8]
 8005c74:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005c76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 ff1e 	bl	8006abc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005c88:	89ba      	ldrh	r2, [r7, #12]
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff f9e2 	bl	8005058 <HAL_I2C_AddrCallback>
}
 8005c94:	e017      	b.n	8005cc6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005c96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 ff0e 	bl	8006abc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ca8:	89ba      	ldrh	r2, [r7, #12]
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	4619      	mov	r1, r3
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7ff f9d2 	bl	8005058 <HAL_I2C_AddrCallback>
}
 8005cb4:	e007      	b.n	8005cc6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2208      	movs	r2, #8
 8005cbc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005cc6:	bf00      	nop
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b082      	sub	sp, #8
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b21      	cmp	r3, #33	@ 0x21
 8005ce8:	d115      	bne.n	8005d16 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2211      	movs	r2, #17
 8005cf6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005cfe:	2101      	movs	r1, #1
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fedb 	bl	8006abc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7fb fa00 	bl	8001114 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d14:	e014      	b.n	8005d40 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2212      	movs	r2, #18
 8005d22:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005d2a:	2102      	movs	r1, #2
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fec5 	bl	8006abc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7ff f96e 	bl	800501c <HAL_I2C_MasterRxCpltCallback>
}
 8005d40:	bf00      	nop
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	0b9b      	lsrs	r3, r3, #14
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	e00d      	b.n	8005d9a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	0bdb      	lsrs	r3, r3, #15
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d007      	beq.n	8005d9a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d98:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b29      	cmp	r3, #41	@ 0x29
 8005da4:	d112      	bne.n	8005dcc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2228      	movs	r2, #40	@ 0x28
 8005daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2221      	movs	r2, #33	@ 0x21
 8005db2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005db4:	2101      	movs	r1, #1
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fe80 	bl	8006abc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff f933 	bl	8005030 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005dca:	e017      	b.n	8005dfc <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dd6:	d111      	bne.n	8005dfc <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2228      	movs	r2, #40	@ 0x28
 8005ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2222      	movs	r2, #34	@ 0x22
 8005de4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005de6:	2102      	movs	r1, #2
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fe67 	bl	8006abc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff f924 	bl	8005044 <HAL_I2C_SlaveRxCpltCallback>
}
 8005dfc:	bf00      	nop
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2220      	movs	r2, #32
 8005e18:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b21      	cmp	r3, #33	@ 0x21
 8005e24:	d107      	bne.n	8005e36 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005e26:	2101      	movs	r1, #1
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fe47 	bl	8006abc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2211      	movs	r2, #17
 8005e32:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e34:	e00c      	b.n	8005e50 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b22      	cmp	r3, #34	@ 0x22
 8005e40:	d106      	bne.n	8005e50 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005e42:	2102      	movs	r1, #2
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fe39 	bl	8006abc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2212      	movs	r2, #18
 8005e4e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6859      	ldr	r1, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	4b4d      	ldr	r3, [pc, #308]	@ (8005f90 <I2C_ITMasterCplt+0x18c>)
 8005e5c:	400b      	ands	r3, r1
 8005e5e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a4a      	ldr	r2, [pc, #296]	@ (8005f94 <I2C_ITMasterCplt+0x190>)
 8005e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	091b      	lsrs	r3, r3, #4
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d009      	beq.n	8005e8c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2210      	movs	r2, #16
 8005e7e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e84:	f043 0204 	orr.w	r2, r3, #4
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b60      	cmp	r3, #96	@ 0x60
 8005e96:	d10b      	bne.n	8005eb0 <I2C_ITMasterCplt+0xac>
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	089b      	lsrs	r3, r3, #2
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005eae:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fb48 	bl	8006546 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eba:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b60      	cmp	r3, #96	@ 0x60
 8005ec6:	d002      	beq.n	8005ece <I2C_ITMasterCplt+0xca>
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d006      	beq.n	8005edc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fa1f 	bl	8006318 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005eda:	e054      	b.n	8005f86 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b21      	cmp	r3, #33	@ 0x21
 8005ee6:	d124      	bne.n	8005f32 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b40      	cmp	r3, #64	@ 0x40
 8005f00:	d10b      	bne.n	8005f1a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff f8b8 	bl	8005088 <HAL_I2C_MemTxCpltCallback>
}
 8005f18:	e035      	b.n	8005f86 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7fb f8f2 	bl	8001114 <HAL_I2C_MasterTxCpltCallback>
}
 8005f30:	e029      	b.n	8005f86 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b22      	cmp	r3, #34	@ 0x22
 8005f3c:	d123      	bne.n	8005f86 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b40      	cmp	r3, #64	@ 0x40
 8005f56:	d10b      	bne.n	8005f70 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff f897 	bl	800509c <HAL_I2C_MemRxCpltCallback>
}
 8005f6e:	e00a      	b.n	8005f86 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7ff f84b 	bl	800501c <HAL_I2C_MasterRxCpltCallback>
}
 8005f86:	bf00      	nop
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	fe00e800 	.word	0xfe00e800
 8005f94:	ffff0000 	.word	0xffff0000

08005f98 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fba:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fc4:	7afb      	ldrb	r3, [r7, #11]
 8005fc6:	2b21      	cmp	r3, #33	@ 0x21
 8005fc8:	d002      	beq.n	8005fd0 <I2C_ITSlaveCplt+0x38>
 8005fca:	7afb      	ldrb	r3, [r7, #11]
 8005fcc:	2b29      	cmp	r3, #41	@ 0x29
 8005fce:	d108      	bne.n	8005fe2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005fd0:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fd71 	bl	8006abc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2221      	movs	r2, #33	@ 0x21
 8005fde:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fe0:	e019      	b.n	8006016 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005fe2:	7afb      	ldrb	r3, [r7, #11]
 8005fe4:	2b22      	cmp	r3, #34	@ 0x22
 8005fe6:	d002      	beq.n	8005fee <I2C_ITSlaveCplt+0x56>
 8005fe8:	7afb      	ldrb	r3, [r7, #11]
 8005fea:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fec:	d108      	bne.n	8006000 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005fee:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fd62 	bl	8006abc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2222      	movs	r2, #34	@ 0x22
 8005ffc:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ffe:	e00a      	b.n	8006016 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006000:	7afb      	ldrb	r3, [r7, #11]
 8006002:	2b28      	cmp	r3, #40	@ 0x28
 8006004:	d107      	bne.n	8006016 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006006:	f248 0103 	movw	r1, #32771	@ 0x8003
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fd56 	bl	8006abc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006024:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6859      	ldr	r1, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	4b8c      	ldr	r3, [pc, #560]	@ (8006264 <I2C_ITSlaveCplt+0x2cc>)
 8006032:	400b      	ands	r3, r1
 8006034:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fa85 	bl	8006546 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	0b9b      	lsrs	r3, r3, #14
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d013      	beq.n	8006070 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006056:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605c:	2b00      	cmp	r3, #0
 800605e:	d020      	beq.n	80060a2 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	b29a      	uxth	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800606e:	e018      	b.n	80060a2 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	0bdb      	lsrs	r3, r3, #15
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d012      	beq.n	80060a2 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800608a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006090:	2b00      	cmp	r3, #0
 8006092:	d006      	beq.n	80060a2 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	b29a      	uxth	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	089b      	lsrs	r3, r3, #2
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d020      	beq.n	80060f0 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f023 0304 	bic.w	r3, r3, #4
 80060b4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00c      	beq.n	80060f0 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060fe:	f043 0204 	orr.w	r2, r3, #4
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	091b      	lsrs	r3, r3, #4
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d04a      	beq.n	80061a8 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	091b      	lsrs	r3, r3, #4
 8006116:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800611a:	2b00      	cmp	r3, #0
 800611c:	d044      	beq.n	80061a8 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d128      	bne.n	800617a <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b28      	cmp	r3, #40	@ 0x28
 8006132:	d108      	bne.n	8006146 <I2C_ITSlaveCplt+0x1ae>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800613a:	d104      	bne.n	8006146 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800613c:	6979      	ldr	r1, [r7, #20]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f894 	bl	800626c <I2C_ITListenCplt>
 8006144:	e030      	b.n	80061a8 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b29      	cmp	r3, #41	@ 0x29
 8006150:	d10e      	bne.n	8006170 <I2C_ITSlaveCplt+0x1d8>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006158:	d00a      	beq.n	8006170 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2210      	movs	r2, #16
 8006160:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f9ef 	bl	8006546 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff fded 	bl	8005d48 <I2C_ITSlaveSeqCplt>
 800616e:	e01b      	b.n	80061a8 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2210      	movs	r2, #16
 8006176:	61da      	str	r2, [r3, #28]
 8006178:	e016      	b.n	80061a8 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2210      	movs	r2, #16
 8006180:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006186:	f043 0204 	orr.w	r2, r3, #4
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <I2C_ITSlaveCplt+0x204>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800619a:	d105      	bne.n	80061a8 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a0:	4619      	mov	r1, r3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f8b8 	bl	8006318 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d010      	beq.n	80061e0 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c2:	4619      	mov	r1, r3
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f8a7 	bl	8006318 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b28      	cmp	r3, #40	@ 0x28
 80061d4:	d141      	bne.n	800625a <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80061d6:	6979      	ldr	r1, [r7, #20]
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f847 	bl	800626c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80061de:	e03c      	b.n	800625a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061e8:	d014      	beq.n	8006214 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7ff fdac 	bl	8005d48 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a1d      	ldr	r2, [pc, #116]	@ (8006268 <I2C_ITSlaveCplt+0x2d0>)
 80061f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7fe ff31 	bl	8005074 <HAL_I2C_ListenCpltCallback>
}
 8006212:	e022      	b.n	800625a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b22      	cmp	r3, #34	@ 0x22
 800621e:	d10e      	bne.n	800623e <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fe ff04 	bl	8005044 <HAL_I2C_SlaveRxCpltCallback>
}
 800623c:	e00d      	b.n	800625a <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7fe feeb 	bl	8005030 <HAL_I2C_SlaveTxCpltCallback>
}
 800625a:	bf00      	nop
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	fe00e800 	.word	0xfe00e800
 8006268:	ffff0000 	.word	0xffff0000

0800626c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a26      	ldr	r2, [pc, #152]	@ (8006314 <I2C_ITListenCplt+0xa8>)
 800627a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	089b      	lsrs	r3, r3, #2
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d022      	beq.n	80062ea <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ae:	b2d2      	uxtb	r2, r2
 80062b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d012      	beq.n	80062ea <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062c8:	3b01      	subs	r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b29a      	uxth	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e2:	f043 0204 	orr.w	r2, r3, #4
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80062ea:	f248 0103 	movw	r1, #32771	@ 0x8003
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fbe4 	bl	8006abc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2210      	movs	r2, #16
 80062fa:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7fe feb5 	bl	8005074 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800630a:	bf00      	nop
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	ffff0000 	.word	0xffff0000

08006318 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006328:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a6d      	ldr	r2, [pc, #436]	@ (80064ec <I2C_ITError+0x1d4>)
 8006336:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	431a      	orrs	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	2b28      	cmp	r3, #40	@ 0x28
 800634e:	d005      	beq.n	800635c <I2C_ITError+0x44>
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	2b29      	cmp	r3, #41	@ 0x29
 8006354:	d002      	beq.n	800635c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	2b2a      	cmp	r3, #42	@ 0x2a
 800635a:	d10b      	bne.n	8006374 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800635c:	2103      	movs	r1, #3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fbac 	bl	8006abc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2228      	movs	r2, #40	@ 0x28
 8006368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a60      	ldr	r2, [pc, #384]	@ (80064f0 <I2C_ITError+0x1d8>)
 8006370:	635a      	str	r2, [r3, #52]	@ 0x34
 8006372:	e030      	b.n	80063d6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006374:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fb9f 	bl	8006abc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f8e1 	bl	8006546 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b60      	cmp	r3, #96	@ 0x60
 800638e:	d01f      	beq.n	80063d0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2220      	movs	r2, #32
 8006394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	d114      	bne.n	80063d0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	f003 0310 	and.w	r3, r3, #16
 80063b0:	2b10      	cmp	r3, #16
 80063b2:	d109      	bne.n	80063c8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2210      	movs	r2, #16
 80063ba:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c0:	f043 0204 	orr.w	r2, r3, #4
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2220      	movs	r2, #32
 80063ce:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063da:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d039      	beq.n	8006458 <I2C_ITError+0x140>
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b11      	cmp	r3, #17
 80063e8:	d002      	beq.n	80063f0 <I2C_ITError+0xd8>
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b21      	cmp	r3, #33	@ 0x21
 80063ee:	d133      	bne.n	8006458 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063fe:	d107      	bne.n	8006410 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800640e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006414:	4618      	mov	r0, r3
 8006416:	f7fe f969 	bl	80046ec <HAL_DMA_GetState>
 800641a:	4603      	mov	r3, r0
 800641c:	2b01      	cmp	r3, #1
 800641e:	d017      	beq.n	8006450 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006424:	4a33      	ldr	r2, [pc, #204]	@ (80064f4 <I2C_ITError+0x1dc>)
 8006426:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006434:	4618      	mov	r0, r3
 8006436:	f7fe f869 	bl	800450c <HAL_DMA_Abort_IT>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d04d      	beq.n	80064dc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800644a:	4610      	mov	r0, r2
 800644c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800644e:	e045      	b.n	80064dc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f851 	bl	80064f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006456:	e041      	b.n	80064dc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800645c:	2b00      	cmp	r3, #0
 800645e:	d039      	beq.n	80064d4 <I2C_ITError+0x1bc>
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b12      	cmp	r3, #18
 8006464:	d002      	beq.n	800646c <I2C_ITError+0x154>
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b22      	cmp	r3, #34	@ 0x22
 800646a:	d133      	bne.n	80064d4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006476:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800647a:	d107      	bne.n	800648c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800648a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006490:	4618      	mov	r0, r3
 8006492:	f7fe f92b 	bl	80046ec <HAL_DMA_GetState>
 8006496:	4603      	mov	r3, r0
 8006498:	2b01      	cmp	r3, #1
 800649a:	d017      	beq.n	80064cc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a0:	4a14      	ldr	r2, [pc, #80]	@ (80064f4 <I2C_ITError+0x1dc>)
 80064a2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7fe f82b 	bl	800450c <HAL_DMA_Abort_IT>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d011      	beq.n	80064e0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80064c6:	4610      	mov	r0, r2
 80064c8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064ca:	e009      	b.n	80064e0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f813 	bl	80064f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064d2:	e005      	b.n	80064e0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f80f 	bl	80064f8 <I2C_TreatErrorCallback>
  }
}
 80064da:	e002      	b.n	80064e2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064dc:	bf00      	nop
 80064de:	e000      	b.n	80064e2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064e0:	bf00      	nop
}
 80064e2:	bf00      	nop
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	ffff0000 	.word	0xffff0000
 80064f0:	0800535d 	.word	0x0800535d
 80064f4:	0800658f 	.word	0x0800658f

080064f8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b60      	cmp	r3, #96	@ 0x60
 800650a:	d10e      	bne.n	800652a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7fe fdce 	bl	80050c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006528:	e009      	b.n	800653e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7fe fdb9 	bl	80050b0 <HAL_I2C_ErrorCallback>
}
 800653e:	bf00      	nop
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b02      	cmp	r3, #2
 800655a:	d103      	bne.n	8006564 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2200      	movs	r2, #0
 8006562:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	2b01      	cmp	r3, #1
 8006570:	d007      	beq.n	8006582 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	699a      	ldr	r2, [r3, #24]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f042 0201 	orr.w	r2, r2, #1
 8006580:	619a      	str	r2, [r3, #24]
  }
}
 8006582:	bf00      	nop
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a8:	2200      	movs	r2, #0
 80065aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b8:	2200      	movs	r2, #0
 80065ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f7ff ff9b 	bl	80064f8 <I2C_TreatErrorCallback>
}
 80065c2:	bf00      	nop
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	603b      	str	r3, [r7, #0]
 80065d6:	4613      	mov	r3, r2
 80065d8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065da:	e03b      	b.n	8006654 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	6839      	ldr	r1, [r7, #0]
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 f8d5 	bl	8006790 <I2C_IsErrorOccurred>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e041      	b.n	8006674 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f6:	d02d      	beq.n	8006654 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f8:	f7fb ffaa 	bl	8002550 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	429a      	cmp	r2, r3
 8006606:	d302      	bcc.n	800660e <I2C_WaitOnFlagUntilTimeout+0x44>
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d122      	bne.n	8006654 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	699a      	ldr	r2, [r3, #24]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4013      	ands	r3, r2
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	429a      	cmp	r2, r3
 800661c:	bf0c      	ite	eq
 800661e:	2301      	moveq	r3, #1
 8006620:	2300      	movne	r3, #0
 8006622:	b2db      	uxtb	r3, r3
 8006624:	461a      	mov	r2, r3
 8006626:	79fb      	ldrb	r3, [r7, #7]
 8006628:	429a      	cmp	r2, r3
 800662a:	d113      	bne.n	8006654 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006630:	f043 0220 	orr.w	r2, r3, #32
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2220      	movs	r2, #32
 800663c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e00f      	b.n	8006674 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	4013      	ands	r3, r2
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	429a      	cmp	r2, r3
 8006662:	bf0c      	ite	eq
 8006664:	2301      	moveq	r3, #1
 8006666:	2300      	movne	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	461a      	mov	r2, r3
 800666c:	79fb      	ldrb	r3, [r7, #7]
 800666e:	429a      	cmp	r2, r3
 8006670:	d0b4      	beq.n	80065dc <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006688:	e033      	b.n	80066f2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 f87e 	bl	8006790 <I2C_IsErrorOccurred>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e031      	b.n	8006702 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a4:	d025      	beq.n	80066f2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a6:	f7fb ff53 	bl	8002550 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d302      	bcc.n	80066bc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d11a      	bne.n	80066f2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d013      	beq.n	80066f2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ce:	f043 0220 	orr.w	r2, r3, #32
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2220      	movs	r2, #32
 80066da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e007      	b.n	8006702 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d1c4      	bne.n	800668a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b084      	sub	sp, #16
 800670e:	af00      	add	r7, sp, #0
 8006710:	60f8      	str	r0, [r7, #12]
 8006712:	60b9      	str	r1, [r7, #8]
 8006714:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006716:	e02f      	b.n	8006778 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	68b9      	ldr	r1, [r7, #8]
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 f837 	bl	8006790 <I2C_IsErrorOccurred>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e02d      	b.n	8006788 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800672c:	f7fb ff10 	bl	8002550 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	429a      	cmp	r2, r3
 800673a:	d302      	bcc.n	8006742 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d11a      	bne.n	8006778 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	f003 0320 	and.w	r3, r3, #32
 800674c:	2b20      	cmp	r3, #32
 800674e:	d013      	beq.n	8006778 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006754:	f043 0220 	orr.w	r2, r3, #32
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2220      	movs	r2, #32
 8006760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e007      	b.n	8006788 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b20      	cmp	r3, #32
 8006784:	d1c8      	bne.n	8006718 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	@ 0x28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	f003 0310 	and.w	r3, r3, #16
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d068      	beq.n	800688e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2210      	movs	r2, #16
 80067c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80067c4:	e049      	b.n	800685a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067cc:	d045      	beq.n	800685a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80067ce:	f7fb febf 	bl	8002550 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d302      	bcc.n	80067e4 <I2C_IsErrorOccurred+0x54>
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d13a      	bne.n	800685a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006806:	d121      	bne.n	800684c <I2C_IsErrorOccurred+0xbc>
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800680e:	d01d      	beq.n	800684c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006810:	7cfb      	ldrb	r3, [r7, #19]
 8006812:	2b20      	cmp	r3, #32
 8006814:	d01a      	beq.n	800684c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006824:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006826:	f7fb fe93 	bl	8002550 <HAL_GetTick>
 800682a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800682c:	e00e      	b.n	800684c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800682e:	f7fb fe8f 	bl	8002550 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	2b19      	cmp	r3, #25
 800683a:	d907      	bls.n	800684c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	f043 0320 	orr.w	r3, r3, #32
 8006842:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800684a:	e006      	b.n	800685a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	f003 0320 	and.w	r3, r3, #32
 8006856:	2b20      	cmp	r3, #32
 8006858:	d1e9      	bne.n	800682e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	f003 0320 	and.w	r3, r3, #32
 8006864:	2b20      	cmp	r3, #32
 8006866:	d003      	beq.n	8006870 <I2C_IsErrorOccurred+0xe0>
 8006868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0aa      	beq.n	80067c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006874:	2b00      	cmp	r3, #0
 8006876:	d103      	bne.n	8006880 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2220      	movs	r2, #32
 800687e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	f043 0304 	orr.w	r3, r3, #4
 8006886:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00b      	beq.n	80068b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	f043 0301 	orr.w	r3, r3, #1
 80068a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00b      	beq.n	80068da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	f043 0308 	orr.w	r3, r3, #8
 80068c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80068d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00b      	beq.n	80068fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	f043 0302 	orr.w	r3, r3, #2
 80068ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80068fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01c      	beq.n	800693e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f7ff fe1e 	bl	8006546 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6859      	ldr	r1, [r3, #4]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	4b0d      	ldr	r3, [pc, #52]	@ (800694c <I2C_IsErrorOccurred+0x1bc>)
 8006916:	400b      	ands	r3, r1
 8006918:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	431a      	orrs	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2220      	movs	r2, #32
 800692a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800693e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006942:	4618      	mov	r0, r3
 8006944:	3728      	adds	r7, #40	@ 0x28
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	fe00e800 	.word	0xfe00e800

08006950 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	607b      	str	r3, [r7, #4]
 800695a:	460b      	mov	r3, r1
 800695c:	817b      	strh	r3, [r7, #10]
 800695e:	4613      	mov	r3, r2
 8006960:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006962:	897b      	ldrh	r3, [r7, #10]
 8006964:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006968:	7a7b      	ldrb	r3, [r7, #9]
 800696a:	041b      	lsls	r3, r3, #16
 800696c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006970:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	4313      	orrs	r3, r2
 800697a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800697e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	0d5b      	lsrs	r3, r3, #21
 800698a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800698e:	4b08      	ldr	r3, [pc, #32]	@ (80069b0 <I2C_TransferConfig+0x60>)
 8006990:	430b      	orrs	r3, r1
 8006992:	43db      	mvns	r3, r3
 8006994:	ea02 0103 	and.w	r1, r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	03ff63ff 	.word	0x03ff63ff

080069b4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069c8:	4a39      	ldr	r2, [pc, #228]	@ (8006ab0 <I2C_Enable_IRQ+0xfc>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d032      	beq.n	8006a34 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80069d2:	4a38      	ldr	r2, [pc, #224]	@ (8006ab4 <I2C_Enable_IRQ+0x100>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d02d      	beq.n	8006a34 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80069dc:	4a36      	ldr	r2, [pc, #216]	@ (8006ab8 <I2C_Enable_IRQ+0x104>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d028      	beq.n	8006a34 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80069e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	da03      	bge.n	80069f2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80069f0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80069f2:	887b      	ldrh	r3, [r7, #2]
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006a02:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006a04:	887b      	ldrh	r3, [r7, #2]
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006a14:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006a16:	887b      	ldrh	r3, [r7, #2]
 8006a18:	2b10      	cmp	r3, #16
 8006a1a:	d103      	bne.n	8006a24 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006a22:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006a24:	887b      	ldrh	r3, [r7, #2]
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d133      	bne.n	8006a92 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f043 0320 	orr.w	r3, r3, #32
 8006a30:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006a32:	e02e      	b.n	8006a92 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006a34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	da03      	bge.n	8006a44 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006a42:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006a44:	887b      	ldrh	r3, [r7, #2]
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006a54:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006a56:	887b      	ldrh	r3, [r7, #2]
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006a66:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006a68:	887b      	ldrh	r3, [r7, #2]
 8006a6a:	2b10      	cmp	r3, #16
 8006a6c:	d103      	bne.n	8006a76 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006a74:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006a76:	887b      	ldrh	r3, [r7, #2]
 8006a78:	2b20      	cmp	r3, #32
 8006a7a:	d103      	bne.n	8006a84 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006a82:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006a84:	887b      	ldrh	r3, [r7, #2]
 8006a86:	2b40      	cmp	r3, #64	@ 0x40
 8006a88:	d103      	bne.n	8006a92 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a90:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6819      	ldr	r1, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	601a      	str	r2, [r3, #0]
}
 8006aa2:	bf00      	nop
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	08005565 	.word	0x08005565
 8006ab4:	08005a05 	.word	0x08005a05
 8006ab8:	08005769 	.word	0x08005769

08006abc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006acc:	887b      	ldrh	r3, [r7, #2]
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00f      	beq.n	8006af6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006adc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006aea:	2b28      	cmp	r3, #40	@ 0x28
 8006aec:	d003      	beq.n	8006af6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006af4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006af6:	887b      	ldrh	r3, [r7, #2]
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00f      	beq.n	8006b20 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006b06:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006b14:	2b28      	cmp	r3, #40	@ 0x28
 8006b16:	d003      	beq.n	8006b20 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006b1e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	da03      	bge.n	8006b30 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006b2e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006b30:	887b      	ldrh	r3, [r7, #2]
 8006b32:	2b10      	cmp	r3, #16
 8006b34:	d103      	bne.n	8006b3e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006b3c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b3e:	887b      	ldrh	r3, [r7, #2]
 8006b40:	2b20      	cmp	r3, #32
 8006b42:	d103      	bne.n	8006b4c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f043 0320 	orr.w	r3, r3, #32
 8006b4a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006b4c:	887b      	ldrh	r3, [r7, #2]
 8006b4e:	2b40      	cmp	r3, #64	@ 0x40
 8006b50:	d103      	bne.n	8006b5a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b58:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6819      	ldr	r1, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	43da      	mvns	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	400a      	ands	r2, r1
 8006b6a:	601a      	str	r2, [r3, #0]
}
 8006b6c:	bf00      	nop
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d138      	bne.n	8006c00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e032      	b.n	8006c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2224      	movs	r2, #36	@ 0x24
 8006ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0201 	bic.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006bca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6819      	ldr	r1, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0201 	orr.w	r2, r2, #1
 8006bea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	e000      	b.n	8006c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c00:	2302      	movs	r3, #2
  }
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b085      	sub	sp, #20
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	d139      	bne.n	8006c98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d101      	bne.n	8006c32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c2e:	2302      	movs	r3, #2
 8006c30:	e033      	b.n	8006c9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2224      	movs	r2, #36	@ 0x24
 8006c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0201 	bic.w	r2, r2, #1
 8006c50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	021b      	lsls	r3, r3, #8
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0201 	orr.w	r2, r2, #1
 8006c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	e000      	b.n	8006c9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c98:	2302      	movs	r3, #2
  }
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
	...

08006ca8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006cac:	4b04      	ldr	r3, [pc, #16]	@ (8006cc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40007000 	.word	0x40007000

08006cc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cd2:	d130      	bne.n	8006d36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cd4:	4b23      	ldr	r3, [pc, #140]	@ (8006d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ce0:	d038      	beq.n	8006d54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ce2:	4b20      	ldr	r3, [pc, #128]	@ (8006d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006cea:	4a1e      	ldr	r2, [pc, #120]	@ (8006d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006cf0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2232      	movs	r2, #50	@ 0x32
 8006cf8:	fb02 f303 	mul.w	r3, r2, r3
 8006cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8006d6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006d02:	0c9b      	lsrs	r3, r3, #18
 8006d04:	3301      	adds	r3, #1
 8006d06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d08:	e002      	b.n	8006d10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d10:	4b14      	ldr	r3, [pc, #80]	@ (8006d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d1c:	d102      	bne.n	8006d24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1f2      	bne.n	8006d0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d24:	4b0f      	ldr	r3, [pc, #60]	@ (8006d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d30:	d110      	bne.n	8006d54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e00f      	b.n	8006d56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d36:	4b0b      	ldr	r3, [pc, #44]	@ (8006d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d42:	d007      	beq.n	8006d54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d44:	4b07      	ldr	r3, [pc, #28]	@ (8006d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d4c:	4a05      	ldr	r2, [pc, #20]	@ (8006d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006d52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40007000 	.word	0x40007000
 8006d68:	20000014 	.word	0x20000014
 8006d6c:	431bde83 	.word	0x431bde83

08006d70 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b088      	sub	sp, #32
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e3ca      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d82:	4b97      	ldr	r3, [pc, #604]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 030c 	and.w	r3, r3, #12
 8006d8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d8c:	4b94      	ldr	r3, [pc, #592]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f003 0303 	and.w	r3, r3, #3
 8006d94:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0310 	and.w	r3, r3, #16
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 80e4 	beq.w	8006f6c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d007      	beq.n	8006dba <HAL_RCC_OscConfig+0x4a>
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	2b0c      	cmp	r3, #12
 8006dae:	f040 808b 	bne.w	8006ec8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	f040 8087 	bne.w	8006ec8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006dba:	4b89      	ldr	r3, [pc, #548]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d005      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x62>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e3a2      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1a      	ldr	r2, [r3, #32]
 8006dd6:	4b82      	ldr	r3, [pc, #520]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0308 	and.w	r3, r3, #8
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d004      	beq.n	8006dec <HAL_RCC_OscConfig+0x7c>
 8006de2:	4b7f      	ldr	r3, [pc, #508]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006dea:	e005      	b.n	8006df8 <HAL_RCC_OscConfig+0x88>
 8006dec:	4b7c      	ldr	r3, [pc, #496]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006df2:	091b      	lsrs	r3, r3, #4
 8006df4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d223      	bcs.n	8006e44 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 fd55 	bl	80078b0 <RCC_SetFlashLatencyFromMSIRange>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e383      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e10:	4b73      	ldr	r3, [pc, #460]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a72      	ldr	r2, [pc, #456]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e16:	f043 0308 	orr.w	r3, r3, #8
 8006e1a:	6013      	str	r3, [r2, #0]
 8006e1c:	4b70      	ldr	r3, [pc, #448]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	496d      	ldr	r1, [pc, #436]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e2e:	4b6c      	ldr	r3, [pc, #432]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	021b      	lsls	r3, r3, #8
 8006e3c:	4968      	ldr	r1, [pc, #416]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	604b      	str	r3, [r1, #4]
 8006e42:	e025      	b.n	8006e90 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e44:	4b66      	ldr	r3, [pc, #408]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a65      	ldr	r2, [pc, #404]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e4a:	f043 0308 	orr.w	r3, r3, #8
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	4b63      	ldr	r3, [pc, #396]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	4960      	ldr	r1, [pc, #384]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e62:	4b5f      	ldr	r3, [pc, #380]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	021b      	lsls	r3, r3, #8
 8006e70:	495b      	ldr	r1, [pc, #364]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d109      	bne.n	8006e90 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 fd15 	bl	80078b0 <RCC_SetFlashLatencyFromMSIRange>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e343      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e90:	f000 fc4a 	bl	8007728 <HAL_RCC_GetSysClockFreq>
 8006e94:	4602      	mov	r2, r0
 8006e96:	4b52      	ldr	r3, [pc, #328]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	091b      	lsrs	r3, r3, #4
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	4950      	ldr	r1, [pc, #320]	@ (8006fe4 <HAL_RCC_OscConfig+0x274>)
 8006ea2:	5ccb      	ldrb	r3, [r1, r3]
 8006ea4:	f003 031f 	and.w	r3, r3, #31
 8006ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8006eac:	4a4e      	ldr	r2, [pc, #312]	@ (8006fe8 <HAL_RCC_OscConfig+0x278>)
 8006eae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006eb0:	4b4e      	ldr	r3, [pc, #312]	@ (8006fec <HAL_RCC_OscConfig+0x27c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fb fafb 	bl	80024b0 <HAL_InitTick>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d052      	beq.n	8006f6a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	e327      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d032      	beq.n	8006f36 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006ed0:	4b43      	ldr	r3, [pc, #268]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a42      	ldr	r2, [pc, #264]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006ed6:	f043 0301 	orr.w	r3, r3, #1
 8006eda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006edc:	f7fb fb38 	bl	8002550 <HAL_GetTick>
 8006ee0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ee2:	e008      	b.n	8006ef6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ee4:	f7fb fb34 	bl	8002550 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e310      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0302 	and.w	r3, r3, #2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d0f0      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f02:	4b37      	ldr	r3, [pc, #220]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a36      	ldr	r2, [pc, #216]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f08:	f043 0308 	orr.w	r3, r3, #8
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	4b34      	ldr	r3, [pc, #208]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	4931      	ldr	r1, [pc, #196]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f20:	4b2f      	ldr	r3, [pc, #188]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	492c      	ldr	r1, [pc, #176]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	604b      	str	r3, [r1, #4]
 8006f34:	e01a      	b.n	8006f6c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006f36:	4b2a      	ldr	r3, [pc, #168]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a29      	ldr	r2, [pc, #164]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f3c:	f023 0301 	bic.w	r3, r3, #1
 8006f40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f42:	f7fb fb05 	bl	8002550 <HAL_GetTick>
 8006f46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006f48:	e008      	b.n	8006f5c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f4a:	f7fb fb01 	bl	8002550 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e2dd      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006f5c:	4b20      	ldr	r3, [pc, #128]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1f0      	bne.n	8006f4a <HAL_RCC_OscConfig+0x1da>
 8006f68:	e000      	b.n	8006f6c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006f6a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d074      	beq.n	8007062 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	2b08      	cmp	r3, #8
 8006f7c:	d005      	beq.n	8006f8a <HAL_RCC_OscConfig+0x21a>
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2b0c      	cmp	r3, #12
 8006f82:	d10e      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	d10b      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f8a:	4b15      	ldr	r3, [pc, #84]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d064      	beq.n	8007060 <HAL_RCC_OscConfig+0x2f0>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d160      	bne.n	8007060 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e2ba      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006faa:	d106      	bne.n	8006fba <HAL_RCC_OscConfig+0x24a>
 8006fac:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006fb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	e026      	b.n	8007008 <HAL_RCC_OscConfig+0x298>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fc2:	d115      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x280>
 8006fc4:	4b06      	ldr	r3, [pc, #24]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a05      	ldr	r2, [pc, #20]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006fca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	4b03      	ldr	r3, [pc, #12]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a02      	ldr	r2, [pc, #8]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006fd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	e014      	b.n	8007008 <HAL_RCC_OscConfig+0x298>
 8006fde:	bf00      	nop
 8006fe0:	40021000 	.word	0x40021000
 8006fe4:	0800da28 	.word	0x0800da28
 8006fe8:	20000014 	.word	0x20000014
 8006fec:	20000018 	.word	0x20000018
 8006ff0:	4ba0      	ldr	r3, [pc, #640]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a9f      	ldr	r2, [pc, #636]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8006ff6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	4b9d      	ldr	r3, [pc, #628]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a9c      	ldr	r2, [pc, #624]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007002:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d013      	beq.n	8007038 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007010:	f7fb fa9e 	bl	8002550 <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007018:	f7fb fa9a 	bl	8002550 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b64      	cmp	r3, #100	@ 0x64
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e276      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800702a:	4b92      	ldr	r3, [pc, #584]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0f0      	beq.n	8007018 <HAL_RCC_OscConfig+0x2a8>
 8007036:	e014      	b.n	8007062 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007038:	f7fb fa8a 	bl	8002550 <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800703e:	e008      	b.n	8007052 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007040:	f7fb fa86 	bl	8002550 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b64      	cmp	r3, #100	@ 0x64
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e262      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007052:	4b88      	ldr	r3, [pc, #544]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1f0      	bne.n	8007040 <HAL_RCC_OscConfig+0x2d0>
 800705e:	e000      	b.n	8007062 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d060      	beq.n	8007130 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	2b04      	cmp	r3, #4
 8007072:	d005      	beq.n	8007080 <HAL_RCC_OscConfig+0x310>
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	2b0c      	cmp	r3, #12
 8007078:	d119      	bne.n	80070ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2b02      	cmp	r3, #2
 800707e:	d116      	bne.n	80070ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007080:	4b7c      	ldr	r3, [pc, #496]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <HAL_RCC_OscConfig+0x328>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e23f      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007098:	4b76      	ldr	r3, [pc, #472]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	061b      	lsls	r3, r3, #24
 80070a6:	4973      	ldr	r1, [pc, #460]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070ac:	e040      	b.n	8007130 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d023      	beq.n	80070fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070b6:	4b6f      	ldr	r3, [pc, #444]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a6e      	ldr	r2, [pc, #440]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80070bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c2:	f7fb fa45 	bl	8002550 <HAL_GetTick>
 80070c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070c8:	e008      	b.n	80070dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070ca:	f7fb fa41 	bl	8002550 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d901      	bls.n	80070dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e21d      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070dc:	4b65      	ldr	r3, [pc, #404]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0f0      	beq.n	80070ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070e8:	4b62      	ldr	r3, [pc, #392]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	061b      	lsls	r3, r3, #24
 80070f6:	495f      	ldr	r1, [pc, #380]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	604b      	str	r3, [r1, #4]
 80070fc:	e018      	b.n	8007130 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070fe:	4b5d      	ldr	r3, [pc, #372]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a5c      	ldr	r2, [pc, #368]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800710a:	f7fb fa21 	bl	8002550 <HAL_GetTick>
 800710e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007110:	e008      	b.n	8007124 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007112:	f7fb fa1d 	bl	8002550 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	2b02      	cmp	r3, #2
 800711e:	d901      	bls.n	8007124 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e1f9      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007124:	4b53      	ldr	r3, [pc, #332]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1f0      	bne.n	8007112 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0308 	and.w	r3, r3, #8
 8007138:	2b00      	cmp	r3, #0
 800713a:	d03c      	beq.n	80071b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d01c      	beq.n	800717e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007144:	4b4b      	ldr	r3, [pc, #300]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007146:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800714a:	4a4a      	ldr	r2, [pc, #296]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 800714c:	f043 0301 	orr.w	r3, r3, #1
 8007150:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007154:	f7fb f9fc 	bl	8002550 <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800715c:	f7fb f9f8 	bl	8002550 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e1d4      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800716e:	4b41      	ldr	r3, [pc, #260]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007170:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d0ef      	beq.n	800715c <HAL_RCC_OscConfig+0x3ec>
 800717c:	e01b      	b.n	80071b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800717e:	4b3d      	ldr	r3, [pc, #244]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007180:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007184:	4a3b      	ldr	r2, [pc, #236]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007186:	f023 0301 	bic.w	r3, r3, #1
 800718a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800718e:	f7fb f9df 	bl	8002550 <HAL_GetTick>
 8007192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007194:	e008      	b.n	80071a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007196:	f7fb f9db 	bl	8002550 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d901      	bls.n	80071a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e1b7      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071a8:	4b32      	ldr	r3, [pc, #200]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80071aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1ef      	bne.n	8007196 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0304 	and.w	r3, r3, #4
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 80a6 	beq.w	8007310 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071c4:	2300      	movs	r3, #0
 80071c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80071c8:	4b2a      	ldr	r3, [pc, #168]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80071ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10d      	bne.n	80071f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071d4:	4b27      	ldr	r3, [pc, #156]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80071d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d8:	4a26      	ldr	r2, [pc, #152]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80071da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071de:	6593      	str	r3, [r2, #88]	@ 0x58
 80071e0:	4b24      	ldr	r3, [pc, #144]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80071e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071e8:	60bb      	str	r3, [r7, #8]
 80071ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071ec:	2301      	movs	r3, #1
 80071ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071f0:	4b21      	ldr	r3, [pc, #132]	@ (8007278 <HAL_RCC_OscConfig+0x508>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d118      	bne.n	800722e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071fc:	4b1e      	ldr	r3, [pc, #120]	@ (8007278 <HAL_RCC_OscConfig+0x508>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a1d      	ldr	r2, [pc, #116]	@ (8007278 <HAL_RCC_OscConfig+0x508>)
 8007202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007206:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007208:	f7fb f9a2 	bl	8002550 <HAL_GetTick>
 800720c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007210:	f7fb f99e 	bl	8002550 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b02      	cmp	r3, #2
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e17a      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007222:	4b15      	ldr	r3, [pc, #84]	@ (8007278 <HAL_RCC_OscConfig+0x508>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0f0      	beq.n	8007210 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d108      	bne.n	8007248 <HAL_RCC_OscConfig+0x4d8>
 8007236:	4b0f      	ldr	r3, [pc, #60]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800723c:	4a0d      	ldr	r2, [pc, #52]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 800723e:	f043 0301 	orr.w	r3, r3, #1
 8007242:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007246:	e029      	b.n	800729c <HAL_RCC_OscConfig+0x52c>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	2b05      	cmp	r3, #5
 800724e:	d115      	bne.n	800727c <HAL_RCC_OscConfig+0x50c>
 8007250:	4b08      	ldr	r3, [pc, #32]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007256:	4a07      	ldr	r2, [pc, #28]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007258:	f043 0304 	orr.w	r3, r3, #4
 800725c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007260:	4b04      	ldr	r3, [pc, #16]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007266:	4a03      	ldr	r2, [pc, #12]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007268:	f043 0301 	orr.w	r3, r3, #1
 800726c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007270:	e014      	b.n	800729c <HAL_RCC_OscConfig+0x52c>
 8007272:	bf00      	nop
 8007274:	40021000 	.word	0x40021000
 8007278:	40007000 	.word	0x40007000
 800727c:	4b9c      	ldr	r3, [pc, #624]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 800727e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007282:	4a9b      	ldr	r2, [pc, #620]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 8007284:	f023 0301 	bic.w	r3, r3, #1
 8007288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800728c:	4b98      	ldr	r3, [pc, #608]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 800728e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007292:	4a97      	ldr	r2, [pc, #604]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 8007294:	f023 0304 	bic.w	r3, r3, #4
 8007298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d016      	beq.n	80072d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a4:	f7fb f954 	bl	8002550 <HAL_GetTick>
 80072a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072aa:	e00a      	b.n	80072c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ac:	f7fb f950 	bl	8002550 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d901      	bls.n	80072c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e12a      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072c2:	4b8b      	ldr	r3, [pc, #556]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 80072c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072c8:	f003 0302 	and.w	r3, r3, #2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0ed      	beq.n	80072ac <HAL_RCC_OscConfig+0x53c>
 80072d0:	e015      	b.n	80072fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d2:	f7fb f93d 	bl	8002550 <HAL_GetTick>
 80072d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80072d8:	e00a      	b.n	80072f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072da:	f7fb f939 	bl	8002550 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d901      	bls.n	80072f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e113      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80072f0:	4b7f      	ldr	r3, [pc, #508]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 80072f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1ed      	bne.n	80072da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072fe:	7ffb      	ldrb	r3, [r7, #31]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d105      	bne.n	8007310 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007304:	4b7a      	ldr	r3, [pc, #488]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 8007306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007308:	4a79      	ldr	r2, [pc, #484]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 800730a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800730e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 80fe 	beq.w	8007516 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800731e:	2b02      	cmp	r3, #2
 8007320:	f040 80d0 	bne.w	80074c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007324:	4b72      	ldr	r3, [pc, #456]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f003 0203 	and.w	r2, r3, #3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007334:	429a      	cmp	r2, r3
 8007336:	d130      	bne.n	800739a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007342:	3b01      	subs	r3, #1
 8007344:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007346:	429a      	cmp	r2, r3
 8007348:	d127      	bne.n	800739a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007354:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007356:	429a      	cmp	r2, r3
 8007358:	d11f      	bne.n	800739a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007364:	2a07      	cmp	r2, #7
 8007366:	bf14      	ite	ne
 8007368:	2201      	movne	r2, #1
 800736a:	2200      	moveq	r2, #0
 800736c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800736e:	4293      	cmp	r3, r2
 8007370:	d113      	bne.n	800739a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800737c:	085b      	lsrs	r3, r3, #1
 800737e:	3b01      	subs	r3, #1
 8007380:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007382:	429a      	cmp	r2, r3
 8007384:	d109      	bne.n	800739a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007390:	085b      	lsrs	r3, r3, #1
 8007392:	3b01      	subs	r3, #1
 8007394:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007396:	429a      	cmp	r2, r3
 8007398:	d06e      	beq.n	8007478 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	2b0c      	cmp	r3, #12
 800739e:	d069      	beq.n	8007474 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80073a0:	4b53      	ldr	r3, [pc, #332]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d105      	bne.n	80073b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80073ac:	4b50      	ldr	r3, [pc, #320]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e0ad      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80073bc:	4b4c      	ldr	r3, [pc, #304]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a4b      	ldr	r2, [pc, #300]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 80073c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80073c8:	f7fb f8c2 	bl	8002550 <HAL_GetTick>
 80073cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073ce:	e008      	b.n	80073e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073d0:	f7fb f8be 	bl	8002550 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e09a      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073e2:	4b43      	ldr	r3, [pc, #268]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1f0      	bne.n	80073d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073ee:	4b40      	ldr	r3, [pc, #256]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	4b40      	ldr	r3, [pc, #256]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 80073f4:	4013      	ands	r3, r2
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80073fe:	3a01      	subs	r2, #1
 8007400:	0112      	lsls	r2, r2, #4
 8007402:	4311      	orrs	r1, r2
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007408:	0212      	lsls	r2, r2, #8
 800740a:	4311      	orrs	r1, r2
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007410:	0852      	lsrs	r2, r2, #1
 8007412:	3a01      	subs	r2, #1
 8007414:	0552      	lsls	r2, r2, #21
 8007416:	4311      	orrs	r1, r2
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800741c:	0852      	lsrs	r2, r2, #1
 800741e:	3a01      	subs	r2, #1
 8007420:	0652      	lsls	r2, r2, #25
 8007422:	4311      	orrs	r1, r2
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007428:	0912      	lsrs	r2, r2, #4
 800742a:	0452      	lsls	r2, r2, #17
 800742c:	430a      	orrs	r2, r1
 800742e:	4930      	ldr	r1, [pc, #192]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 8007430:	4313      	orrs	r3, r2
 8007432:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007434:	4b2e      	ldr	r3, [pc, #184]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a2d      	ldr	r2, [pc, #180]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 800743a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800743e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007440:	4b2b      	ldr	r3, [pc, #172]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	4a2a      	ldr	r2, [pc, #168]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 8007446:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800744a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800744c:	f7fb f880 	bl	8002550 <HAL_GetTick>
 8007450:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007452:	e008      	b.n	8007466 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007454:	f7fb f87c 	bl	8002550 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b02      	cmp	r3, #2
 8007460:	d901      	bls.n	8007466 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e058      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007466:	4b22      	ldr	r3, [pc, #136]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d0f0      	beq.n	8007454 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007472:	e050      	b.n	8007516 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e04f      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007478:	4b1d      	ldr	r3, [pc, #116]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d148      	bne.n	8007516 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007484:	4b1a      	ldr	r3, [pc, #104]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a19      	ldr	r2, [pc, #100]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 800748a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800748e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007490:	4b17      	ldr	r3, [pc, #92]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	4a16      	ldr	r2, [pc, #88]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 8007496:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800749a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800749c:	f7fb f858 	bl	8002550 <HAL_GetTick>
 80074a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074a2:	e008      	b.n	80074b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074a4:	f7fb f854 	bl	8002550 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d901      	bls.n	80074b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e030      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074b6:	4b0e      	ldr	r3, [pc, #56]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d0f0      	beq.n	80074a4 <HAL_RCC_OscConfig+0x734>
 80074c2:	e028      	b.n	8007516 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	2b0c      	cmp	r3, #12
 80074c8:	d023      	beq.n	8007512 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074ca:	4b09      	ldr	r3, [pc, #36]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a08      	ldr	r2, [pc, #32]	@ (80074f0 <HAL_RCC_OscConfig+0x780>)
 80074d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d6:	f7fb f83b 	bl	8002550 <HAL_GetTick>
 80074da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074dc:	e00c      	b.n	80074f8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074de:	f7fb f837 	bl	8002550 <HAL_GetTick>
 80074e2:	4602      	mov	r2, r0
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d905      	bls.n	80074f8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e013      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
 80074f0:	40021000 	.word	0x40021000
 80074f4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074f8:	4b09      	ldr	r3, [pc, #36]	@ (8007520 <HAL_RCC_OscConfig+0x7b0>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1ec      	bne.n	80074de <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007504:	4b06      	ldr	r3, [pc, #24]	@ (8007520 <HAL_RCC_OscConfig+0x7b0>)
 8007506:	68da      	ldr	r2, [r3, #12]
 8007508:	4905      	ldr	r1, [pc, #20]	@ (8007520 <HAL_RCC_OscConfig+0x7b0>)
 800750a:	4b06      	ldr	r3, [pc, #24]	@ (8007524 <HAL_RCC_OscConfig+0x7b4>)
 800750c:	4013      	ands	r3, r2
 800750e:	60cb      	str	r3, [r1, #12]
 8007510:	e001      	b.n	8007516 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e000      	b.n	8007518 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3720      	adds	r7, #32
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	40021000 	.word	0x40021000
 8007524:	feeefffc 	.word	0xfeeefffc

08007528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e0e7      	b.n	800770c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800753c:	4b75      	ldr	r3, [pc, #468]	@ (8007714 <HAL_RCC_ClockConfig+0x1ec>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0307 	and.w	r3, r3, #7
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d910      	bls.n	800756c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800754a:	4b72      	ldr	r3, [pc, #456]	@ (8007714 <HAL_RCC_ClockConfig+0x1ec>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f023 0207 	bic.w	r2, r3, #7
 8007552:	4970      	ldr	r1, [pc, #448]	@ (8007714 <HAL_RCC_ClockConfig+0x1ec>)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	4313      	orrs	r3, r2
 8007558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800755a:	4b6e      	ldr	r3, [pc, #440]	@ (8007714 <HAL_RCC_ClockConfig+0x1ec>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0307 	and.w	r3, r3, #7
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	429a      	cmp	r2, r3
 8007566:	d001      	beq.n	800756c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e0cf      	b.n	800770c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b00      	cmp	r3, #0
 8007576:	d010      	beq.n	800759a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689a      	ldr	r2, [r3, #8]
 800757c:	4b66      	ldr	r3, [pc, #408]	@ (8007718 <HAL_RCC_ClockConfig+0x1f0>)
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007584:	429a      	cmp	r2, r3
 8007586:	d908      	bls.n	800759a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007588:	4b63      	ldr	r3, [pc, #396]	@ (8007718 <HAL_RCC_ClockConfig+0x1f0>)
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	4960      	ldr	r1, [pc, #384]	@ (8007718 <HAL_RCC_ClockConfig+0x1f0>)
 8007596:	4313      	orrs	r3, r2
 8007598:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d04c      	beq.n	8007640 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d107      	bne.n	80075be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075ae:	4b5a      	ldr	r3, [pc, #360]	@ (8007718 <HAL_RCC_ClockConfig+0x1f0>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d121      	bne.n	80075fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e0a6      	b.n	800770c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d107      	bne.n	80075d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075c6:	4b54      	ldr	r3, [pc, #336]	@ (8007718 <HAL_RCC_ClockConfig+0x1f0>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d115      	bne.n	80075fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e09a      	b.n	800770c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d107      	bne.n	80075ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80075de:	4b4e      	ldr	r3, [pc, #312]	@ (8007718 <HAL_RCC_ClockConfig+0x1f0>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d109      	bne.n	80075fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e08e      	b.n	800770c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075ee:	4b4a      	ldr	r3, [pc, #296]	@ (8007718 <HAL_RCC_ClockConfig+0x1f0>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e086      	b.n	800770c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075fe:	4b46      	ldr	r3, [pc, #280]	@ (8007718 <HAL_RCC_ClockConfig+0x1f0>)
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f023 0203 	bic.w	r2, r3, #3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	4943      	ldr	r1, [pc, #268]	@ (8007718 <HAL_RCC_ClockConfig+0x1f0>)
 800760c:	4313      	orrs	r3, r2
 800760e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007610:	f7fa ff9e 	bl	8002550 <HAL_GetTick>
 8007614:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007616:	e00a      	b.n	800762e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007618:	f7fa ff9a 	bl	8002550 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007626:	4293      	cmp	r3, r2
 8007628:	d901      	bls.n	800762e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e06e      	b.n	800770c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800762e:	4b3a      	ldr	r3, [pc, #232]	@ (8007718 <HAL_RCC_ClockConfig+0x1f0>)
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f003 020c 	and.w	r2, r3, #12
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	429a      	cmp	r2, r3
 800763e:	d1eb      	bne.n	8007618 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d010      	beq.n	800766e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	4b31      	ldr	r3, [pc, #196]	@ (8007718 <HAL_RCC_ClockConfig+0x1f0>)
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007658:	429a      	cmp	r2, r3
 800765a:	d208      	bcs.n	800766e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800765c:	4b2e      	ldr	r3, [pc, #184]	@ (8007718 <HAL_RCC_ClockConfig+0x1f0>)
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	492b      	ldr	r1, [pc, #172]	@ (8007718 <HAL_RCC_ClockConfig+0x1f0>)
 800766a:	4313      	orrs	r3, r2
 800766c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800766e:	4b29      	ldr	r3, [pc, #164]	@ (8007714 <HAL_RCC_ClockConfig+0x1ec>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	429a      	cmp	r2, r3
 800767a:	d210      	bcs.n	800769e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800767c:	4b25      	ldr	r3, [pc, #148]	@ (8007714 <HAL_RCC_ClockConfig+0x1ec>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f023 0207 	bic.w	r2, r3, #7
 8007684:	4923      	ldr	r1, [pc, #140]	@ (8007714 <HAL_RCC_ClockConfig+0x1ec>)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	4313      	orrs	r3, r2
 800768a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800768c:	4b21      	ldr	r3, [pc, #132]	@ (8007714 <HAL_RCC_ClockConfig+0x1ec>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0307 	and.w	r3, r3, #7
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	429a      	cmp	r2, r3
 8007698:	d001      	beq.n	800769e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e036      	b.n	800770c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0304 	and.w	r3, r3, #4
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d008      	beq.n	80076bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076aa:	4b1b      	ldr	r3, [pc, #108]	@ (8007718 <HAL_RCC_ClockConfig+0x1f0>)
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	4918      	ldr	r1, [pc, #96]	@ (8007718 <HAL_RCC_ClockConfig+0x1f0>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0308 	and.w	r3, r3, #8
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d009      	beq.n	80076dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076c8:	4b13      	ldr	r3, [pc, #76]	@ (8007718 <HAL_RCC_ClockConfig+0x1f0>)
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	00db      	lsls	r3, r3, #3
 80076d6:	4910      	ldr	r1, [pc, #64]	@ (8007718 <HAL_RCC_ClockConfig+0x1f0>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80076dc:	f000 f824 	bl	8007728 <HAL_RCC_GetSysClockFreq>
 80076e0:	4602      	mov	r2, r0
 80076e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007718 <HAL_RCC_ClockConfig+0x1f0>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	091b      	lsrs	r3, r3, #4
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	490b      	ldr	r1, [pc, #44]	@ (800771c <HAL_RCC_ClockConfig+0x1f4>)
 80076ee:	5ccb      	ldrb	r3, [r1, r3]
 80076f0:	f003 031f 	and.w	r3, r3, #31
 80076f4:	fa22 f303 	lsr.w	r3, r2, r3
 80076f8:	4a09      	ldr	r2, [pc, #36]	@ (8007720 <HAL_RCC_ClockConfig+0x1f8>)
 80076fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80076fc:	4b09      	ldr	r3, [pc, #36]	@ (8007724 <HAL_RCC_ClockConfig+0x1fc>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4618      	mov	r0, r3
 8007702:	f7fa fed5 	bl	80024b0 <HAL_InitTick>
 8007706:	4603      	mov	r3, r0
 8007708:	72fb      	strb	r3, [r7, #11]

  return status;
 800770a:	7afb      	ldrb	r3, [r7, #11]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	40022000 	.word	0x40022000
 8007718:	40021000 	.word	0x40021000
 800771c:	0800da28 	.word	0x0800da28
 8007720:	20000014 	.word	0x20000014
 8007724:	20000018 	.word	0x20000018

08007728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007728:	b480      	push	{r7}
 800772a:	b089      	sub	sp, #36	@ 0x24
 800772c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	61fb      	str	r3, [r7, #28]
 8007732:	2300      	movs	r3, #0
 8007734:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007736:	4b3e      	ldr	r3, [pc, #248]	@ (8007830 <HAL_RCC_GetSysClockFreq+0x108>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f003 030c 	and.w	r3, r3, #12
 800773e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007740:	4b3b      	ldr	r3, [pc, #236]	@ (8007830 <HAL_RCC_GetSysClockFreq+0x108>)
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	f003 0303 	and.w	r3, r3, #3
 8007748:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d005      	beq.n	800775c <HAL_RCC_GetSysClockFreq+0x34>
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	2b0c      	cmp	r3, #12
 8007754:	d121      	bne.n	800779a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d11e      	bne.n	800779a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800775c:	4b34      	ldr	r3, [pc, #208]	@ (8007830 <HAL_RCC_GetSysClockFreq+0x108>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0308 	and.w	r3, r3, #8
 8007764:	2b00      	cmp	r3, #0
 8007766:	d107      	bne.n	8007778 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007768:	4b31      	ldr	r3, [pc, #196]	@ (8007830 <HAL_RCC_GetSysClockFreq+0x108>)
 800776a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800776e:	0a1b      	lsrs	r3, r3, #8
 8007770:	f003 030f 	and.w	r3, r3, #15
 8007774:	61fb      	str	r3, [r7, #28]
 8007776:	e005      	b.n	8007784 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007778:	4b2d      	ldr	r3, [pc, #180]	@ (8007830 <HAL_RCC_GetSysClockFreq+0x108>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	091b      	lsrs	r3, r3, #4
 800777e:	f003 030f 	and.w	r3, r3, #15
 8007782:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007784:	4a2b      	ldr	r2, [pc, #172]	@ (8007834 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800778c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10d      	bne.n	80077b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007798:	e00a      	b.n	80077b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	2b04      	cmp	r3, #4
 800779e:	d102      	bne.n	80077a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80077a0:	4b25      	ldr	r3, [pc, #148]	@ (8007838 <HAL_RCC_GetSysClockFreq+0x110>)
 80077a2:	61bb      	str	r3, [r7, #24]
 80077a4:	e004      	b.n	80077b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d101      	bne.n	80077b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80077ac:	4b23      	ldr	r3, [pc, #140]	@ (800783c <HAL_RCC_GetSysClockFreq+0x114>)
 80077ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	2b0c      	cmp	r3, #12
 80077b4:	d134      	bne.n	8007820 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80077b6:	4b1e      	ldr	r3, [pc, #120]	@ (8007830 <HAL_RCC_GetSysClockFreq+0x108>)
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d003      	beq.n	80077ce <HAL_RCC_GetSysClockFreq+0xa6>
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2b03      	cmp	r3, #3
 80077ca:	d003      	beq.n	80077d4 <HAL_RCC_GetSysClockFreq+0xac>
 80077cc:	e005      	b.n	80077da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80077ce:	4b1a      	ldr	r3, [pc, #104]	@ (8007838 <HAL_RCC_GetSysClockFreq+0x110>)
 80077d0:	617b      	str	r3, [r7, #20]
      break;
 80077d2:	e005      	b.n	80077e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80077d4:	4b19      	ldr	r3, [pc, #100]	@ (800783c <HAL_RCC_GetSysClockFreq+0x114>)
 80077d6:	617b      	str	r3, [r7, #20]
      break;
 80077d8:	e002      	b.n	80077e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	617b      	str	r3, [r7, #20]
      break;
 80077de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077e0:	4b13      	ldr	r3, [pc, #76]	@ (8007830 <HAL_RCC_GetSysClockFreq+0x108>)
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	091b      	lsrs	r3, r3, #4
 80077e6:	f003 0307 	and.w	r3, r3, #7
 80077ea:	3301      	adds	r3, #1
 80077ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80077ee:	4b10      	ldr	r3, [pc, #64]	@ (8007830 <HAL_RCC_GetSysClockFreq+0x108>)
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	0a1b      	lsrs	r3, r3, #8
 80077f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	fb03 f202 	mul.w	r2, r3, r2
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	fbb2 f3f3 	udiv	r3, r2, r3
 8007804:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007806:	4b0a      	ldr	r3, [pc, #40]	@ (8007830 <HAL_RCC_GetSysClockFreq+0x108>)
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	0e5b      	lsrs	r3, r3, #25
 800780c:	f003 0303 	and.w	r3, r3, #3
 8007810:	3301      	adds	r3, #1
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	fbb2 f3f3 	udiv	r3, r2, r3
 800781e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007820:	69bb      	ldr	r3, [r7, #24]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3724      	adds	r7, #36	@ 0x24
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	40021000 	.word	0x40021000
 8007834:	0800da40 	.word	0x0800da40
 8007838:	00f42400 	.word	0x00f42400
 800783c:	007a1200 	.word	0x007a1200

08007840 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007840:	b480      	push	{r7}
 8007842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007844:	4b03      	ldr	r3, [pc, #12]	@ (8007854 <HAL_RCC_GetHCLKFreq+0x14>)
 8007846:	681b      	ldr	r3, [r3, #0]
}
 8007848:	4618      	mov	r0, r3
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	20000014 	.word	0x20000014

08007858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800785c:	f7ff fff0 	bl	8007840 <HAL_RCC_GetHCLKFreq>
 8007860:	4602      	mov	r2, r0
 8007862:	4b06      	ldr	r3, [pc, #24]	@ (800787c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	0a1b      	lsrs	r3, r3, #8
 8007868:	f003 0307 	and.w	r3, r3, #7
 800786c:	4904      	ldr	r1, [pc, #16]	@ (8007880 <HAL_RCC_GetPCLK1Freq+0x28>)
 800786e:	5ccb      	ldrb	r3, [r1, r3]
 8007870:	f003 031f 	and.w	r3, r3, #31
 8007874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007878:	4618      	mov	r0, r3
 800787a:	bd80      	pop	{r7, pc}
 800787c:	40021000 	.word	0x40021000
 8007880:	0800da38 	.word	0x0800da38

08007884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007888:	f7ff ffda 	bl	8007840 <HAL_RCC_GetHCLKFreq>
 800788c:	4602      	mov	r2, r0
 800788e:	4b06      	ldr	r3, [pc, #24]	@ (80078a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	0adb      	lsrs	r3, r3, #11
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	4904      	ldr	r1, [pc, #16]	@ (80078ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800789a:	5ccb      	ldrb	r3, [r1, r3]
 800789c:	f003 031f 	and.w	r3, r3, #31
 80078a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	40021000 	.word	0x40021000
 80078ac:	0800da38 	.word	0x0800da38

080078b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80078b8:	2300      	movs	r3, #0
 80078ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80078bc:	4b2a      	ldr	r3, [pc, #168]	@ (8007968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80078be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d003      	beq.n	80078d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80078c8:	f7ff f9ee 	bl	8006ca8 <HAL_PWREx_GetVoltageRange>
 80078cc:	6178      	str	r0, [r7, #20]
 80078ce:	e014      	b.n	80078fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80078d0:	4b25      	ldr	r3, [pc, #148]	@ (8007968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80078d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078d4:	4a24      	ldr	r2, [pc, #144]	@ (8007968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80078d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078da:	6593      	str	r3, [r2, #88]	@ 0x58
 80078dc:	4b22      	ldr	r3, [pc, #136]	@ (8007968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80078de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078e4:	60fb      	str	r3, [r7, #12]
 80078e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80078e8:	f7ff f9de 	bl	8006ca8 <HAL_PWREx_GetVoltageRange>
 80078ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80078ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80078f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078f2:	4a1d      	ldr	r2, [pc, #116]	@ (8007968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80078f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007900:	d10b      	bne.n	800791a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b80      	cmp	r3, #128	@ 0x80
 8007906:	d919      	bls.n	800793c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2ba0      	cmp	r3, #160	@ 0xa0
 800790c:	d902      	bls.n	8007914 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800790e:	2302      	movs	r3, #2
 8007910:	613b      	str	r3, [r7, #16]
 8007912:	e013      	b.n	800793c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007914:	2301      	movs	r3, #1
 8007916:	613b      	str	r3, [r7, #16]
 8007918:	e010      	b.n	800793c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b80      	cmp	r3, #128	@ 0x80
 800791e:	d902      	bls.n	8007926 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007920:	2303      	movs	r3, #3
 8007922:	613b      	str	r3, [r7, #16]
 8007924:	e00a      	b.n	800793c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b80      	cmp	r3, #128	@ 0x80
 800792a:	d102      	bne.n	8007932 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800792c:	2302      	movs	r3, #2
 800792e:	613b      	str	r3, [r7, #16]
 8007930:	e004      	b.n	800793c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b70      	cmp	r3, #112	@ 0x70
 8007936:	d101      	bne.n	800793c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007938:	2301      	movs	r3, #1
 800793a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800793c:	4b0b      	ldr	r3, [pc, #44]	@ (800796c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f023 0207 	bic.w	r2, r3, #7
 8007944:	4909      	ldr	r1, [pc, #36]	@ (800796c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	4313      	orrs	r3, r2
 800794a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800794c:	4b07      	ldr	r3, [pc, #28]	@ (800796c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0307 	and.w	r3, r3, #7
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	429a      	cmp	r2, r3
 8007958:	d001      	beq.n	800795e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e000      	b.n	8007960 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	40021000 	.word	0x40021000
 800796c:	40022000 	.word	0x40022000

08007970 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007978:	2300      	movs	r3, #0
 800797a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800797c:	2300      	movs	r3, #0
 800797e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007988:	2b00      	cmp	r3, #0
 800798a:	d041      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007990:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007994:	d02a      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007996:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800799a:	d824      	bhi.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800799c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80079a0:	d008      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80079a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80079a6:	d81e      	bhi.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00a      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80079ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079b0:	d010      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80079b2:	e018      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80079b4:	4b86      	ldr	r3, [pc, #536]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	4a85      	ldr	r2, [pc, #532]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80079c0:	e015      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	3304      	adds	r3, #4
 80079c6:	2100      	movs	r1, #0
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 fabb 	bl	8007f44 <RCCEx_PLLSAI1_Config>
 80079ce:	4603      	mov	r3, r0
 80079d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80079d2:	e00c      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3320      	adds	r3, #32
 80079d8:	2100      	movs	r1, #0
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 fba6 	bl	800812c <RCCEx_PLLSAI2_Config>
 80079e0:	4603      	mov	r3, r0
 80079e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80079e4:	e003      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	74fb      	strb	r3, [r7, #19]
      break;
 80079ea:	e000      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80079ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079ee:	7cfb      	ldrb	r3, [r7, #19]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10b      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079f4:	4b76      	ldr	r3, [pc, #472]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a02:	4973      	ldr	r1, [pc, #460]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a04:	4313      	orrs	r3, r2
 8007a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007a0a:	e001      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a0c:	7cfb      	ldrb	r3, [r7, #19]
 8007a0e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d041      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007a24:	d02a      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007a26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007a2a:	d824      	bhi.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007a2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a30:	d008      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007a32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a36:	d81e      	bhi.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007a3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a40:	d010      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007a42:	e018      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007a44:	4b62      	ldr	r3, [pc, #392]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	4a61      	ldr	r2, [pc, #388]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a4e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007a50:	e015      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	3304      	adds	r3, #4
 8007a56:	2100      	movs	r1, #0
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 fa73 	bl	8007f44 <RCCEx_PLLSAI1_Config>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007a62:	e00c      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	3320      	adds	r3, #32
 8007a68:	2100      	movs	r1, #0
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fb5e 	bl	800812c <RCCEx_PLLSAI2_Config>
 8007a70:	4603      	mov	r3, r0
 8007a72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007a74:	e003      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	74fb      	strb	r3, [r7, #19]
      break;
 8007a7a:	e000      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a7e:	7cfb      	ldrb	r3, [r7, #19]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10b      	bne.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a84:	4b52      	ldr	r3, [pc, #328]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a8a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a92:	494f      	ldr	r1, [pc, #316]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007a9a:	e001      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9c:	7cfb      	ldrb	r3, [r7, #19]
 8007a9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 80a0 	beq.w	8007bee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007ab2:	4b47      	ldr	r3, [pc, #284]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e000      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00d      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ac8:	4b41      	ldr	r3, [pc, #260]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007acc:	4a40      	ldr	r2, [pc, #256]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ad2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ad4:	4b3e      	ldr	r3, [pc, #248]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007adc:	60bb      	str	r3, [r7, #8]
 8007ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a3a      	ldr	r2, [pc, #232]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007aee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007af0:	f7fa fd2e 	bl	8002550 <HAL_GetTick>
 8007af4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007af6:	e009      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007af8:	f7fa fd2a 	bl	8002550 <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d902      	bls.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	74fb      	strb	r3, [r7, #19]
        break;
 8007b0a:	e005      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007b0c:	4b31      	ldr	r3, [pc, #196]	@ (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0ef      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007b18:	7cfb      	ldrb	r3, [r7, #19]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d15c      	bne.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01f      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d019      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007b3c:	4b24      	ldr	r3, [pc, #144]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b48:	4b21      	ldr	r3, [pc, #132]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b4e:	4a20      	ldr	r2, [pc, #128]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b58:	4b1d      	ldr	r3, [pc, #116]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b68:	4a19      	ldr	r2, [pc, #100]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d016      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b7a:	f7fa fce9 	bl	8002550 <HAL_GetTick>
 8007b7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b80:	e00b      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b82:	f7fa fce5 	bl	8002550 <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d902      	bls.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	74fb      	strb	r3, [r7, #19]
            break;
 8007b98:	e006      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba0:	f003 0302 	and.w	r3, r3, #2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d0ec      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007ba8:	7cfb      	ldrb	r3, [r7, #19]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10c      	bne.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bae:	4b08      	ldr	r3, [pc, #32]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bbe:	4904      	ldr	r1, [pc, #16]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007bc6:	e009      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007bc8:	7cfb      	ldrb	r3, [r7, #19]
 8007bca:	74bb      	strb	r3, [r7, #18]
 8007bcc:	e006      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007bce:	bf00      	nop
 8007bd0:	40021000 	.word	0x40021000
 8007bd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd8:	7cfb      	ldrb	r3, [r7, #19]
 8007bda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007bdc:	7c7b      	ldrb	r3, [r7, #17]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d105      	bne.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007be2:	4b9e      	ldr	r3, [pc, #632]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007be6:	4a9d      	ldr	r2, [pc, #628]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007be8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007bfa:	4b98      	ldr	r3, [pc, #608]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c00:	f023 0203 	bic.w	r2, r3, #3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c08:	4994      	ldr	r1, [pc, #592]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0302 	and.w	r3, r3, #2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00a      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c1c:	4b8f      	ldr	r3, [pc, #572]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c22:	f023 020c 	bic.w	r2, r3, #12
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c2a:	498c      	ldr	r1, [pc, #560]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0304 	and.w	r3, r3, #4
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c3e:	4b87      	ldr	r3, [pc, #540]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c44:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4c:	4983      	ldr	r1, [pc, #524]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0308 	and.w	r3, r3, #8
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c60:	4b7e      	ldr	r3, [pc, #504]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c6e:	497b      	ldr	r1, [pc, #492]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0310 	and.w	r3, r3, #16
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c82:	4b76      	ldr	r3, [pc, #472]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c90:	4972      	ldr	r1, [pc, #456]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0320 	and.w	r3, r3, #32
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00a      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ca4:	4b6d      	ldr	r3, [pc, #436]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007caa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cb2:	496a      	ldr	r1, [pc, #424]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00a      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cc6:	4b65      	ldr	r3, [pc, #404]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ccc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cd4:	4961      	ldr	r1, [pc, #388]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ce8:	4b5c      	ldr	r3, [pc, #368]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cf6:	4959      	ldr	r1, [pc, #356]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d0a:	4b54      	ldr	r3, [pc, #336]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d10:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d18:	4950      	ldr	r1, [pc, #320]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00a      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d32:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d3a:	4948      	ldr	r1, [pc, #288]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d4e:	4b43      	ldr	r3, [pc, #268]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d5c:	493f      	ldr	r1, [pc, #252]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d028      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d70:	4b3a      	ldr	r3, [pc, #232]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d7e:	4937      	ldr	r1, [pc, #220]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d8e:	d106      	bne.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d90:	4b32      	ldr	r3, [pc, #200]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	4a31      	ldr	r2, [pc, #196]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d9a:	60d3      	str	r3, [r2, #12]
 8007d9c:	e011      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007da2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007da6:	d10c      	bne.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	3304      	adds	r3, #4
 8007dac:	2101      	movs	r1, #1
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 f8c8 	bl	8007f44 <RCCEx_PLLSAI1_Config>
 8007db4:	4603      	mov	r3, r0
 8007db6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007db8:	7cfb      	ldrb	r3, [r7, #19]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007dbe:	7cfb      	ldrb	r3, [r7, #19]
 8007dc0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d028      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007dce:	4b23      	ldr	r3, [pc, #140]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dd4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ddc:	491f      	ldr	r1, [pc, #124]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007de8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dec:	d106      	bne.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dee:	4b1b      	ldr	r3, [pc, #108]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	4a1a      	ldr	r2, [pc, #104]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007df4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007df8:	60d3      	str	r3, [r2, #12]
 8007dfa:	e011      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e04:	d10c      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 f899 	bl	8007f44 <RCCEx_PLLSAI1_Config>
 8007e12:	4603      	mov	r3, r0
 8007e14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e16:	7cfb      	ldrb	r3, [r7, #19]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007e1c:	7cfb      	ldrb	r3, [r7, #19]
 8007e1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d02b      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e3a:	4908      	ldr	r1, [pc, #32]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e4a:	d109      	bne.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e4c:	4b03      	ldr	r3, [pc, #12]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	4a02      	ldr	r2, [pc, #8]	@ (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e56:	60d3      	str	r3, [r2, #12]
 8007e58:	e014      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007e5a:	bf00      	nop
 8007e5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e68:	d10c      	bne.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	2101      	movs	r1, #1
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 f867 	bl	8007f44 <RCCEx_PLLSAI1_Config>
 8007e76:	4603      	mov	r3, r0
 8007e78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e7a:	7cfb      	ldrb	r3, [r7, #19]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007e80:	7cfb      	ldrb	r3, [r7, #19]
 8007e82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d02f      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e90:	4b2b      	ldr	r3, [pc, #172]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e96:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e9e:	4928      	ldr	r1, [pc, #160]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007eaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007eae:	d10d      	bne.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	2102      	movs	r1, #2
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 f844 	bl	8007f44 <RCCEx_PLLSAI1_Config>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ec0:	7cfb      	ldrb	r3, [r7, #19]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d014      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007ec6:	7cfb      	ldrb	r3, [r7, #19]
 8007ec8:	74bb      	strb	r3, [r7, #18]
 8007eca:	e011      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ed4:	d10c      	bne.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	3320      	adds	r3, #32
 8007eda:	2102      	movs	r1, #2
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 f925 	bl	800812c <RCCEx_PLLSAI2_Config>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ee6:	7cfb      	ldrb	r3, [r7, #19]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007eec:	7cfb      	ldrb	r3, [r7, #19]
 8007eee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00a      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007efc:	4b10      	ldr	r3, [pc, #64]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f02:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f0a:	490d      	ldr	r1, [pc, #52]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00b      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f1e:	4b08      	ldr	r3, [pc, #32]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f2e:	4904      	ldr	r1, [pc, #16]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007f30:	4313      	orrs	r3, r2
 8007f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007f36:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3718      	adds	r7, #24
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	40021000 	.word	0x40021000

08007f44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007f52:	4b75      	ldr	r3, [pc, #468]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	f003 0303 	and.w	r3, r3, #3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d018      	beq.n	8007f90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007f5e:	4b72      	ldr	r3, [pc, #456]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f003 0203 	and.w	r2, r3, #3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d10d      	bne.n	8007f8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
       ||
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d009      	beq.n	8007f8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007f76:	4b6c      	ldr	r3, [pc, #432]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	091b      	lsrs	r3, r3, #4
 8007f7c:	f003 0307 	and.w	r3, r3, #7
 8007f80:	1c5a      	adds	r2, r3, #1
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
       ||
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d047      	beq.n	800801a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	73fb      	strb	r3, [r7, #15]
 8007f8e:	e044      	b.n	800801a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d018      	beq.n	8007fca <RCCEx_PLLSAI1_Config+0x86>
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d825      	bhi.n	8007fe8 <RCCEx_PLLSAI1_Config+0xa4>
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d002      	beq.n	8007fa6 <RCCEx_PLLSAI1_Config+0x62>
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d009      	beq.n	8007fb8 <RCCEx_PLLSAI1_Config+0x74>
 8007fa4:	e020      	b.n	8007fe8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007fa6:	4b60      	ldr	r3, [pc, #384]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0302 	and.w	r3, r3, #2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d11d      	bne.n	8007fee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fb6:	e01a      	b.n	8007fee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007fb8:	4b5b      	ldr	r3, [pc, #364]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d116      	bne.n	8007ff2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fc8:	e013      	b.n	8007ff2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007fca:	4b57      	ldr	r3, [pc, #348]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10f      	bne.n	8007ff6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007fd6:	4b54      	ldr	r3, [pc, #336]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d109      	bne.n	8007ff6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007fe6:	e006      	b.n	8007ff6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	73fb      	strb	r3, [r7, #15]
      break;
 8007fec:	e004      	b.n	8007ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007fee:	bf00      	nop
 8007ff0:	e002      	b.n	8007ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007ff2:	bf00      	nop
 8007ff4:	e000      	b.n	8007ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007ff6:	bf00      	nop
    }

    if(status == HAL_OK)
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10d      	bne.n	800801a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6819      	ldr	r1, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	3b01      	subs	r3, #1
 8008010:	011b      	lsls	r3, r3, #4
 8008012:	430b      	orrs	r3, r1
 8008014:	4944      	ldr	r1, [pc, #272]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008016:	4313      	orrs	r3, r2
 8008018:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d17d      	bne.n	800811c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008020:	4b41      	ldr	r3, [pc, #260]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a40      	ldr	r2, [pc, #256]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008026:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800802a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800802c:	f7fa fa90 	bl	8002550 <HAL_GetTick>
 8008030:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008032:	e009      	b.n	8008048 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008034:	f7fa fa8c 	bl	8002550 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b02      	cmp	r3, #2
 8008040:	d902      	bls.n	8008048 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	73fb      	strb	r3, [r7, #15]
        break;
 8008046:	e005      	b.n	8008054 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008048:	4b37      	ldr	r3, [pc, #220]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1ef      	bne.n	8008034 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008054:	7bfb      	ldrb	r3, [r7, #15]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d160      	bne.n	800811c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d111      	bne.n	8008084 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008060:	4b31      	ldr	r3, [pc, #196]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8008068:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	6892      	ldr	r2, [r2, #8]
 8008070:	0211      	lsls	r1, r2, #8
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	68d2      	ldr	r2, [r2, #12]
 8008076:	0912      	lsrs	r2, r2, #4
 8008078:	0452      	lsls	r2, r2, #17
 800807a:	430a      	orrs	r2, r1
 800807c:	492a      	ldr	r1, [pc, #168]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800807e:	4313      	orrs	r3, r2
 8008080:	610b      	str	r3, [r1, #16]
 8008082:	e027      	b.n	80080d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d112      	bne.n	80080b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800808a:	4b27      	ldr	r3, [pc, #156]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8008092:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	6892      	ldr	r2, [r2, #8]
 800809a:	0211      	lsls	r1, r2, #8
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	6912      	ldr	r2, [r2, #16]
 80080a0:	0852      	lsrs	r2, r2, #1
 80080a2:	3a01      	subs	r2, #1
 80080a4:	0552      	lsls	r2, r2, #21
 80080a6:	430a      	orrs	r2, r1
 80080a8:	491f      	ldr	r1, [pc, #124]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	610b      	str	r3, [r1, #16]
 80080ae:	e011      	b.n	80080d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80080b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80080b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6892      	ldr	r2, [r2, #8]
 80080c0:	0211      	lsls	r1, r2, #8
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	6952      	ldr	r2, [r2, #20]
 80080c6:	0852      	lsrs	r2, r2, #1
 80080c8:	3a01      	subs	r2, #1
 80080ca:	0652      	lsls	r2, r2, #25
 80080cc:	430a      	orrs	r2, r1
 80080ce:	4916      	ldr	r1, [pc, #88]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80080d4:	4b14      	ldr	r3, [pc, #80]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a13      	ldr	r2, [pc, #76]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80080da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80080de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080e0:	f7fa fa36 	bl	8002550 <HAL_GetTick>
 80080e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80080e6:	e009      	b.n	80080fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80080e8:	f7fa fa32 	bl	8002550 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d902      	bls.n	80080fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	73fb      	strb	r3, [r7, #15]
          break;
 80080fa:	e005      	b.n	8008108 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80080fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d0ef      	beq.n	80080e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008108:	7bfb      	ldrb	r3, [r7, #15]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d106      	bne.n	800811c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800810e:	4b06      	ldr	r3, [pc, #24]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008110:	691a      	ldr	r2, [r3, #16]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	4904      	ldr	r1, [pc, #16]	@ (8008128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008118:	4313      	orrs	r3, r2
 800811a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	40021000 	.word	0x40021000

0800812c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800813a:	4b6a      	ldr	r3, [pc, #424]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	f003 0303 	and.w	r3, r3, #3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d018      	beq.n	8008178 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008146:	4b67      	ldr	r3, [pc, #412]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f003 0203 	and.w	r2, r3, #3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	429a      	cmp	r2, r3
 8008154:	d10d      	bne.n	8008172 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
       ||
 800815a:	2b00      	cmp	r3, #0
 800815c:	d009      	beq.n	8008172 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800815e:	4b61      	ldr	r3, [pc, #388]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	091b      	lsrs	r3, r3, #4
 8008164:	f003 0307 	and.w	r3, r3, #7
 8008168:	1c5a      	adds	r2, r3, #1
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
       ||
 800816e:	429a      	cmp	r2, r3
 8008170:	d047      	beq.n	8008202 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	73fb      	strb	r3, [r7, #15]
 8008176:	e044      	b.n	8008202 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b03      	cmp	r3, #3
 800817e:	d018      	beq.n	80081b2 <RCCEx_PLLSAI2_Config+0x86>
 8008180:	2b03      	cmp	r3, #3
 8008182:	d825      	bhi.n	80081d0 <RCCEx_PLLSAI2_Config+0xa4>
 8008184:	2b01      	cmp	r3, #1
 8008186:	d002      	beq.n	800818e <RCCEx_PLLSAI2_Config+0x62>
 8008188:	2b02      	cmp	r3, #2
 800818a:	d009      	beq.n	80081a0 <RCCEx_PLLSAI2_Config+0x74>
 800818c:	e020      	b.n	80081d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800818e:	4b55      	ldr	r3, [pc, #340]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0302 	and.w	r3, r3, #2
 8008196:	2b00      	cmp	r3, #0
 8008198:	d11d      	bne.n	80081d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800819e:	e01a      	b.n	80081d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80081a0:	4b50      	ldr	r3, [pc, #320]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d116      	bne.n	80081da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081b0:	e013      	b.n	80081da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80081b2:	4b4c      	ldr	r3, [pc, #304]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10f      	bne.n	80081de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80081be:	4b49      	ldr	r3, [pc, #292]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d109      	bne.n	80081de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081ce:	e006      	b.n	80081de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	73fb      	strb	r3, [r7, #15]
      break;
 80081d4:	e004      	b.n	80081e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80081d6:	bf00      	nop
 80081d8:	e002      	b.n	80081e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80081da:	bf00      	nop
 80081dc:	e000      	b.n	80081e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80081de:	bf00      	nop
    }

    if(status == HAL_OK)
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10d      	bne.n	8008202 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80081e6:	4b3f      	ldr	r3, [pc, #252]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6819      	ldr	r1, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	3b01      	subs	r3, #1
 80081f8:	011b      	lsls	r3, r3, #4
 80081fa:	430b      	orrs	r3, r1
 80081fc:	4939      	ldr	r1, [pc, #228]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d167      	bne.n	80082d8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008208:	4b36      	ldr	r3, [pc, #216]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a35      	ldr	r2, [pc, #212]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800820e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008214:	f7fa f99c 	bl	8002550 <HAL_GetTick>
 8008218:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800821a:	e009      	b.n	8008230 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800821c:	f7fa f998 	bl	8002550 <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b02      	cmp	r3, #2
 8008228:	d902      	bls.n	8008230 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	73fb      	strb	r3, [r7, #15]
        break;
 800822e:	e005      	b.n	800823c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008230:	4b2c      	ldr	r3, [pc, #176]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1ef      	bne.n	800821c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d14a      	bne.n	80082d8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d111      	bne.n	800826c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008248:	4b26      	ldr	r3, [pc, #152]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800824a:	695b      	ldr	r3, [r3, #20]
 800824c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8008250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	6892      	ldr	r2, [r2, #8]
 8008258:	0211      	lsls	r1, r2, #8
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	68d2      	ldr	r2, [r2, #12]
 800825e:	0912      	lsrs	r2, r2, #4
 8008260:	0452      	lsls	r2, r2, #17
 8008262:	430a      	orrs	r2, r1
 8008264:	491f      	ldr	r1, [pc, #124]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008266:	4313      	orrs	r3, r2
 8008268:	614b      	str	r3, [r1, #20]
 800826a:	e011      	b.n	8008290 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800826c:	4b1d      	ldr	r3, [pc, #116]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008274:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	6892      	ldr	r2, [r2, #8]
 800827c:	0211      	lsls	r1, r2, #8
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	6912      	ldr	r2, [r2, #16]
 8008282:	0852      	lsrs	r2, r2, #1
 8008284:	3a01      	subs	r2, #1
 8008286:	0652      	lsls	r2, r2, #25
 8008288:	430a      	orrs	r2, r1
 800828a:	4916      	ldr	r1, [pc, #88]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800828c:	4313      	orrs	r3, r2
 800828e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008290:	4b14      	ldr	r3, [pc, #80]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a13      	ldr	r2, [pc, #76]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800829a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800829c:	f7fa f958 	bl	8002550 <HAL_GetTick>
 80082a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80082a2:	e009      	b.n	80082b8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80082a4:	f7fa f954 	bl	8002550 <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d902      	bls.n	80082b8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	73fb      	strb	r3, [r7, #15]
          break;
 80082b6:	e005      	b.n	80082c4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80082b8:	4b0a      	ldr	r3, [pc, #40]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d0ef      	beq.n	80082a4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d106      	bne.n	80082d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80082ca:	4b06      	ldr	r3, [pc, #24]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80082cc:	695a      	ldr	r2, [r3, #20]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	4904      	ldr	r1, [pc, #16]	@ (80082e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80082d4:	4313      	orrs	r3, r2
 80082d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	40021000 	.word	0x40021000

080082e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e049      	b.n	800838e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d106      	bne.n	8008314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7f9 fdb8 	bl	8001e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	3304      	adds	r3, #4
 8008324:	4619      	mov	r1, r3
 8008326:	4610      	mov	r0, r2
 8008328:	f001 f876 	bl	8009418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
	...

08008398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d001      	beq.n	80083b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e04f      	b.n	8008450 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2202      	movs	r2, #2
 80083b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68da      	ldr	r2, [r3, #12]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f042 0201 	orr.w	r2, r2, #1
 80083c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a23      	ldr	r2, [pc, #140]	@ (800845c <HAL_TIM_Base_Start_IT+0xc4>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d01d      	beq.n	800840e <HAL_TIM_Base_Start_IT+0x76>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083da:	d018      	beq.n	800840e <HAL_TIM_Base_Start_IT+0x76>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a1f      	ldr	r2, [pc, #124]	@ (8008460 <HAL_TIM_Base_Start_IT+0xc8>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d013      	beq.n	800840e <HAL_TIM_Base_Start_IT+0x76>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a1e      	ldr	r2, [pc, #120]	@ (8008464 <HAL_TIM_Base_Start_IT+0xcc>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d00e      	beq.n	800840e <HAL_TIM_Base_Start_IT+0x76>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008468 <HAL_TIM_Base_Start_IT+0xd0>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d009      	beq.n	800840e <HAL_TIM_Base_Start_IT+0x76>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a1b      	ldr	r2, [pc, #108]	@ (800846c <HAL_TIM_Base_Start_IT+0xd4>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d004      	beq.n	800840e <HAL_TIM_Base_Start_IT+0x76>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a19      	ldr	r2, [pc, #100]	@ (8008470 <HAL_TIM_Base_Start_IT+0xd8>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d115      	bne.n	800843a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	689a      	ldr	r2, [r3, #8]
 8008414:	4b17      	ldr	r3, [pc, #92]	@ (8008474 <HAL_TIM_Base_Start_IT+0xdc>)
 8008416:	4013      	ands	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2b06      	cmp	r3, #6
 800841e:	d015      	beq.n	800844c <HAL_TIM_Base_Start_IT+0xb4>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008426:	d011      	beq.n	800844c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f042 0201 	orr.w	r2, r2, #1
 8008436:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008438:	e008      	b.n	800844c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f042 0201 	orr.w	r2, r2, #1
 8008448:	601a      	str	r2, [r3, #0]
 800844a:	e000      	b.n	800844e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800844c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	40012c00 	.word	0x40012c00
 8008460:	40000400 	.word	0x40000400
 8008464:	40000800 	.word	0x40000800
 8008468:	40000c00 	.word	0x40000c00
 800846c:	40013400 	.word	0x40013400
 8008470:	40014000 	.word	0x40014000
 8008474:	00010007 	.word	0x00010007

08008478 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e049      	b.n	800851e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d106      	bne.n	80084a4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f841 	bl	8008526 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	3304      	adds	r3, #4
 80084b4:	4619      	mov	r1, r3
 80084b6:	4610      	mov	r0, r2
 80084b8:	f000 ffae 	bl	8009418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008526:	b480      	push	{r7}
 8008528:	b083      	sub	sp, #12
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800852e:	bf00      	nop
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
	...

0800853c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d109      	bne.n	8008564 <HAL_TIM_OC_Start_IT+0x28>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b01      	cmp	r3, #1
 800855a:	bf14      	ite	ne
 800855c:	2301      	movne	r3, #1
 800855e:	2300      	moveq	r3, #0
 8008560:	b2db      	uxtb	r3, r3
 8008562:	e03c      	b.n	80085de <HAL_TIM_OC_Start_IT+0xa2>
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2b04      	cmp	r3, #4
 8008568:	d109      	bne.n	800857e <HAL_TIM_OC_Start_IT+0x42>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b01      	cmp	r3, #1
 8008574:	bf14      	ite	ne
 8008576:	2301      	movne	r3, #1
 8008578:	2300      	moveq	r3, #0
 800857a:	b2db      	uxtb	r3, r3
 800857c:	e02f      	b.n	80085de <HAL_TIM_OC_Start_IT+0xa2>
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b08      	cmp	r3, #8
 8008582:	d109      	bne.n	8008598 <HAL_TIM_OC_Start_IT+0x5c>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b01      	cmp	r3, #1
 800858e:	bf14      	ite	ne
 8008590:	2301      	movne	r3, #1
 8008592:	2300      	moveq	r3, #0
 8008594:	b2db      	uxtb	r3, r3
 8008596:	e022      	b.n	80085de <HAL_TIM_OC_Start_IT+0xa2>
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2b0c      	cmp	r3, #12
 800859c:	d109      	bne.n	80085b2 <HAL_TIM_OC_Start_IT+0x76>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	bf14      	ite	ne
 80085aa:	2301      	movne	r3, #1
 80085ac:	2300      	moveq	r3, #0
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	e015      	b.n	80085de <HAL_TIM_OC_Start_IT+0xa2>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b10      	cmp	r3, #16
 80085b6:	d109      	bne.n	80085cc <HAL_TIM_OC_Start_IT+0x90>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	bf14      	ite	ne
 80085c4:	2301      	movne	r3, #1
 80085c6:	2300      	moveq	r3, #0
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	e008      	b.n	80085de <HAL_TIM_OC_Start_IT+0xa2>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	bf14      	ite	ne
 80085d8:	2301      	movne	r3, #1
 80085da:	2300      	moveq	r3, #0
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e0e7      	b.n	80087b6 <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d104      	bne.n	80085f6 <HAL_TIM_OC_Start_IT+0xba>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085f4:	e023      	b.n	800863e <HAL_TIM_OC_Start_IT+0x102>
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b04      	cmp	r3, #4
 80085fa:	d104      	bne.n	8008606 <HAL_TIM_OC_Start_IT+0xca>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008604:	e01b      	b.n	800863e <HAL_TIM_OC_Start_IT+0x102>
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2b08      	cmp	r3, #8
 800860a:	d104      	bne.n	8008616 <HAL_TIM_OC_Start_IT+0xda>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008614:	e013      	b.n	800863e <HAL_TIM_OC_Start_IT+0x102>
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	2b0c      	cmp	r3, #12
 800861a:	d104      	bne.n	8008626 <HAL_TIM_OC_Start_IT+0xea>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008624:	e00b      	b.n	800863e <HAL_TIM_OC_Start_IT+0x102>
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b10      	cmp	r3, #16
 800862a:	d104      	bne.n	8008636 <HAL_TIM_OC_Start_IT+0xfa>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2202      	movs	r2, #2
 8008630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008634:	e003      	b.n	800863e <HAL_TIM_OC_Start_IT+0x102>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2202      	movs	r2, #2
 800863a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2b0c      	cmp	r3, #12
 8008642:	d841      	bhi.n	80086c8 <HAL_TIM_OC_Start_IT+0x18c>
 8008644:	a201      	add	r2, pc, #4	@ (adr r2, 800864c <HAL_TIM_OC_Start_IT+0x110>)
 8008646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864a:	bf00      	nop
 800864c:	08008681 	.word	0x08008681
 8008650:	080086c9 	.word	0x080086c9
 8008654:	080086c9 	.word	0x080086c9
 8008658:	080086c9 	.word	0x080086c9
 800865c:	08008693 	.word	0x08008693
 8008660:	080086c9 	.word	0x080086c9
 8008664:	080086c9 	.word	0x080086c9
 8008668:	080086c9 	.word	0x080086c9
 800866c:	080086a5 	.word	0x080086a5
 8008670:	080086c9 	.word	0x080086c9
 8008674:	080086c9 	.word	0x080086c9
 8008678:	080086c9 	.word	0x080086c9
 800867c:	080086b7 	.word	0x080086b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68da      	ldr	r2, [r3, #12]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0202 	orr.w	r2, r2, #2
 800868e:	60da      	str	r2, [r3, #12]
      break;
 8008690:	e01d      	b.n	80086ce <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68da      	ldr	r2, [r3, #12]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f042 0204 	orr.w	r2, r2, #4
 80086a0:	60da      	str	r2, [r3, #12]
      break;
 80086a2:	e014      	b.n	80086ce <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f042 0208 	orr.w	r2, r2, #8
 80086b2:	60da      	str	r2, [r3, #12]
      break;
 80086b4:	e00b      	b.n	80086ce <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68da      	ldr	r2, [r3, #12]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f042 0210 	orr.w	r2, r2, #16
 80086c4:	60da      	str	r2, [r3, #12]
      break;
 80086c6:	e002      	b.n	80086ce <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	73fb      	strb	r3, [r7, #15]
      break;
 80086cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d16f      	bne.n	80087b4 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2201      	movs	r2, #1
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	4618      	mov	r0, r3
 80086de:	f001 fab1 	bl	8009c44 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a36      	ldr	r2, [pc, #216]	@ (80087c0 <HAL_TIM_OC_Start_IT+0x284>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d013      	beq.n	8008714 <HAL_TIM_OC_Start_IT+0x1d8>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a34      	ldr	r2, [pc, #208]	@ (80087c4 <HAL_TIM_OC_Start_IT+0x288>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d00e      	beq.n	8008714 <HAL_TIM_OC_Start_IT+0x1d8>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a33      	ldr	r2, [pc, #204]	@ (80087c8 <HAL_TIM_OC_Start_IT+0x28c>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d009      	beq.n	8008714 <HAL_TIM_OC_Start_IT+0x1d8>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a31      	ldr	r2, [pc, #196]	@ (80087cc <HAL_TIM_OC_Start_IT+0x290>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d004      	beq.n	8008714 <HAL_TIM_OC_Start_IT+0x1d8>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a30      	ldr	r2, [pc, #192]	@ (80087d0 <HAL_TIM_OC_Start_IT+0x294>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d101      	bne.n	8008718 <HAL_TIM_OC_Start_IT+0x1dc>
 8008714:	2301      	movs	r3, #1
 8008716:	e000      	b.n	800871a <HAL_TIM_OC_Start_IT+0x1de>
 8008718:	2300      	movs	r3, #0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d007      	beq.n	800872e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800872c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a23      	ldr	r2, [pc, #140]	@ (80087c0 <HAL_TIM_OC_Start_IT+0x284>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d01d      	beq.n	8008774 <HAL_TIM_OC_Start_IT+0x238>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008740:	d018      	beq.n	8008774 <HAL_TIM_OC_Start_IT+0x238>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a23      	ldr	r2, [pc, #140]	@ (80087d4 <HAL_TIM_OC_Start_IT+0x298>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d013      	beq.n	8008774 <HAL_TIM_OC_Start_IT+0x238>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a21      	ldr	r2, [pc, #132]	@ (80087d8 <HAL_TIM_OC_Start_IT+0x29c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d00e      	beq.n	8008774 <HAL_TIM_OC_Start_IT+0x238>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a20      	ldr	r2, [pc, #128]	@ (80087dc <HAL_TIM_OC_Start_IT+0x2a0>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d009      	beq.n	8008774 <HAL_TIM_OC_Start_IT+0x238>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a17      	ldr	r2, [pc, #92]	@ (80087c4 <HAL_TIM_OC_Start_IT+0x288>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d004      	beq.n	8008774 <HAL_TIM_OC_Start_IT+0x238>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a16      	ldr	r2, [pc, #88]	@ (80087c8 <HAL_TIM_OC_Start_IT+0x28c>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d115      	bne.n	80087a0 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	689a      	ldr	r2, [r3, #8]
 800877a:	4b19      	ldr	r3, [pc, #100]	@ (80087e0 <HAL_TIM_OC_Start_IT+0x2a4>)
 800877c:	4013      	ands	r3, r2
 800877e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2b06      	cmp	r3, #6
 8008784:	d015      	beq.n	80087b2 <HAL_TIM_OC_Start_IT+0x276>
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800878c:	d011      	beq.n	80087b2 <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f042 0201 	orr.w	r2, r2, #1
 800879c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800879e:	e008      	b.n	80087b2 <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f042 0201 	orr.w	r2, r2, #1
 80087ae:	601a      	str	r2, [r3, #0]
 80087b0:	e000      	b.n	80087b4 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087b2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	40012c00 	.word	0x40012c00
 80087c4:	40013400 	.word	0x40013400
 80087c8:	40014000 	.word	0x40014000
 80087cc:	40014400 	.word	0x40014400
 80087d0:	40014800 	.word	0x40014800
 80087d4:	40000400 	.word	0x40000400
 80087d8:	40000800 	.word	0x40000800
 80087dc:	40000c00 	.word	0x40000c00
 80087e0:	00010007 	.word	0x00010007

080087e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e049      	b.n	800888a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d106      	bne.n	8008810 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f841 	bl	8008892 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	3304      	adds	r3, #4
 8008820:	4619      	mov	r1, r3
 8008822:	4610      	mov	r0, r2
 8008824:	f000 fdf8 	bl	8009418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008892:	b480      	push	{r7}
 8008894:	b083      	sub	sp, #12
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800889a:	bf00      	nop
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
	...

080088a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d109      	bne.n	80088cc <HAL_TIM_PWM_Start+0x24>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	bf14      	ite	ne
 80088c4:	2301      	movne	r3, #1
 80088c6:	2300      	moveq	r3, #0
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	e03c      	b.n	8008946 <HAL_TIM_PWM_Start+0x9e>
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b04      	cmp	r3, #4
 80088d0:	d109      	bne.n	80088e6 <HAL_TIM_PWM_Start+0x3e>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b01      	cmp	r3, #1
 80088dc:	bf14      	ite	ne
 80088de:	2301      	movne	r3, #1
 80088e0:	2300      	moveq	r3, #0
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	e02f      	b.n	8008946 <HAL_TIM_PWM_Start+0x9e>
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b08      	cmp	r3, #8
 80088ea:	d109      	bne.n	8008900 <HAL_TIM_PWM_Start+0x58>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	bf14      	ite	ne
 80088f8:	2301      	movne	r3, #1
 80088fa:	2300      	moveq	r3, #0
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	e022      	b.n	8008946 <HAL_TIM_PWM_Start+0x9e>
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2b0c      	cmp	r3, #12
 8008904:	d109      	bne.n	800891a <HAL_TIM_PWM_Start+0x72>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b01      	cmp	r3, #1
 8008910:	bf14      	ite	ne
 8008912:	2301      	movne	r3, #1
 8008914:	2300      	moveq	r3, #0
 8008916:	b2db      	uxtb	r3, r3
 8008918:	e015      	b.n	8008946 <HAL_TIM_PWM_Start+0x9e>
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	2b10      	cmp	r3, #16
 800891e:	d109      	bne.n	8008934 <HAL_TIM_PWM_Start+0x8c>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008926:	b2db      	uxtb	r3, r3
 8008928:	2b01      	cmp	r3, #1
 800892a:	bf14      	ite	ne
 800892c:	2301      	movne	r3, #1
 800892e:	2300      	moveq	r3, #0
 8008930:	b2db      	uxtb	r3, r3
 8008932:	e008      	b.n	8008946 <HAL_TIM_PWM_Start+0x9e>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b01      	cmp	r3, #1
 800893e:	bf14      	ite	ne
 8008940:	2301      	movne	r3, #1
 8008942:	2300      	moveq	r3, #0
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e09c      	b.n	8008a88 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d104      	bne.n	800895e <HAL_TIM_PWM_Start+0xb6>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2202      	movs	r2, #2
 8008958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800895c:	e023      	b.n	80089a6 <HAL_TIM_PWM_Start+0xfe>
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2b04      	cmp	r3, #4
 8008962:	d104      	bne.n	800896e <HAL_TIM_PWM_Start+0xc6>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2202      	movs	r2, #2
 8008968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800896c:	e01b      	b.n	80089a6 <HAL_TIM_PWM_Start+0xfe>
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	2b08      	cmp	r3, #8
 8008972:	d104      	bne.n	800897e <HAL_TIM_PWM_Start+0xd6>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800897c:	e013      	b.n	80089a6 <HAL_TIM_PWM_Start+0xfe>
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b0c      	cmp	r3, #12
 8008982:	d104      	bne.n	800898e <HAL_TIM_PWM_Start+0xe6>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2202      	movs	r2, #2
 8008988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800898c:	e00b      	b.n	80089a6 <HAL_TIM_PWM_Start+0xfe>
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2b10      	cmp	r3, #16
 8008992:	d104      	bne.n	800899e <HAL_TIM_PWM_Start+0xf6>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2202      	movs	r2, #2
 8008998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800899c:	e003      	b.n	80089a6 <HAL_TIM_PWM_Start+0xfe>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2202      	movs	r2, #2
 80089a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2201      	movs	r2, #1
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f001 f948 	bl	8009c44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a35      	ldr	r2, [pc, #212]	@ (8008a90 <HAL_TIM_PWM_Start+0x1e8>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d013      	beq.n	80089e6 <HAL_TIM_PWM_Start+0x13e>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a34      	ldr	r2, [pc, #208]	@ (8008a94 <HAL_TIM_PWM_Start+0x1ec>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d00e      	beq.n	80089e6 <HAL_TIM_PWM_Start+0x13e>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a32      	ldr	r2, [pc, #200]	@ (8008a98 <HAL_TIM_PWM_Start+0x1f0>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d009      	beq.n	80089e6 <HAL_TIM_PWM_Start+0x13e>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a31      	ldr	r2, [pc, #196]	@ (8008a9c <HAL_TIM_PWM_Start+0x1f4>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d004      	beq.n	80089e6 <HAL_TIM_PWM_Start+0x13e>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a2f      	ldr	r2, [pc, #188]	@ (8008aa0 <HAL_TIM_PWM_Start+0x1f8>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d101      	bne.n	80089ea <HAL_TIM_PWM_Start+0x142>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e000      	b.n	80089ec <HAL_TIM_PWM_Start+0x144>
 80089ea:	2300      	movs	r3, #0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d007      	beq.n	8008a00 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a22      	ldr	r2, [pc, #136]	@ (8008a90 <HAL_TIM_PWM_Start+0x1e8>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d01d      	beq.n	8008a46 <HAL_TIM_PWM_Start+0x19e>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a12:	d018      	beq.n	8008a46 <HAL_TIM_PWM_Start+0x19e>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a22      	ldr	r2, [pc, #136]	@ (8008aa4 <HAL_TIM_PWM_Start+0x1fc>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d013      	beq.n	8008a46 <HAL_TIM_PWM_Start+0x19e>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a21      	ldr	r2, [pc, #132]	@ (8008aa8 <HAL_TIM_PWM_Start+0x200>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d00e      	beq.n	8008a46 <HAL_TIM_PWM_Start+0x19e>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8008aac <HAL_TIM_PWM_Start+0x204>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d009      	beq.n	8008a46 <HAL_TIM_PWM_Start+0x19e>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a17      	ldr	r2, [pc, #92]	@ (8008a94 <HAL_TIM_PWM_Start+0x1ec>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d004      	beq.n	8008a46 <HAL_TIM_PWM_Start+0x19e>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a15      	ldr	r2, [pc, #84]	@ (8008a98 <HAL_TIM_PWM_Start+0x1f0>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d115      	bne.n	8008a72 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	689a      	ldr	r2, [r3, #8]
 8008a4c:	4b18      	ldr	r3, [pc, #96]	@ (8008ab0 <HAL_TIM_PWM_Start+0x208>)
 8008a4e:	4013      	ands	r3, r2
 8008a50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2b06      	cmp	r3, #6
 8008a56:	d015      	beq.n	8008a84 <HAL_TIM_PWM_Start+0x1dc>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a5e:	d011      	beq.n	8008a84 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f042 0201 	orr.w	r2, r2, #1
 8008a6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a70:	e008      	b.n	8008a84 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f042 0201 	orr.w	r2, r2, #1
 8008a80:	601a      	str	r2, [r3, #0]
 8008a82:	e000      	b.n	8008a86 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	40012c00 	.word	0x40012c00
 8008a94:	40013400 	.word	0x40013400
 8008a98:	40014000 	.word	0x40014000
 8008a9c:	40014400 	.word	0x40014400
 8008aa0:	40014800 	.word	0x40014800
 8008aa4:	40000400 	.word	0x40000400
 8008aa8:	40000800 	.word	0x40000800
 8008aac:	40000c00 	.word	0x40000c00
 8008ab0:	00010007 	.word	0x00010007

08008ab4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d101      	bne.n	8008ac8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e097      	b.n	8008bf8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d106      	bne.n	8008ae2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7f9 fa47 	bl	8001f70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	6812      	ldr	r2, [r2, #0]
 8008af4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8008af8:	f023 0307 	bic.w	r3, r3, #7
 8008afc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	3304      	adds	r3, #4
 8008b06:	4619      	mov	r1, r3
 8008b08:	4610      	mov	r0, r2
 8008b0a:	f000 fc85 	bl	8009418 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b36:	f023 0303 	bic.w	r3, r3, #3
 8008b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	689a      	ldr	r2, [r3, #8]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	021b      	lsls	r3, r3, #8
 8008b46:	4313      	orrs	r3, r2
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008b54:	f023 030c 	bic.w	r3, r3, #12
 8008b58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008b60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	68da      	ldr	r2, [r3, #12]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	021b      	lsls	r3, r3, #8
 8008b70:	4313      	orrs	r3, r2
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	011a      	lsls	r2, r3, #4
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	031b      	lsls	r3, r3, #12
 8008b84:	4313      	orrs	r3, r2
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008b92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008b9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	011b      	lsls	r3, r3, #4
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	697a      	ldr	r2, [r7, #20]
 8008bb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008c18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d110      	bne.n	8008c52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d102      	bne.n	8008c3c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c36:	7b7b      	ldrb	r3, [r7, #13]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d001      	beq.n	8008c40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e069      	b.n	8008d14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c50:	e031      	b.n	8008cb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	d110      	bne.n	8008c7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c58:	7bbb      	ldrb	r3, [r7, #14]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d102      	bne.n	8008c64 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c5e:	7b3b      	ldrb	r3, [r7, #12]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d001      	beq.n	8008c68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e055      	b.n	8008d14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2202      	movs	r2, #2
 8008c74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c78:	e01d      	b.n	8008cb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c7a:	7bfb      	ldrb	r3, [r7, #15]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d108      	bne.n	8008c92 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d105      	bne.n	8008c92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c86:	7b7b      	ldrb	r3, [r7, #13]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d102      	bne.n	8008c92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c8c:	7b3b      	ldrb	r3, [r7, #12]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d001      	beq.n	8008c96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e03e      	b.n	8008d14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2202      	movs	r2, #2
 8008c9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2202      	movs	r2, #2
 8008caa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2202      	movs	r2, #2
 8008cb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <HAL_TIM_Encoder_Start+0xc4>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2b04      	cmp	r3, #4
 8008cc0:	d008      	beq.n	8008cd4 <HAL_TIM_Encoder_Start+0xd4>
 8008cc2:	e00f      	b.n	8008ce4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	2100      	movs	r1, #0
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 ffb9 	bl	8009c44 <TIM_CCxChannelCmd>
      break;
 8008cd2:	e016      	b.n	8008d02 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	2104      	movs	r1, #4
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 ffb1 	bl	8009c44 <TIM_CCxChannelCmd>
      break;
 8008ce2:	e00e      	b.n	8008d02 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	2100      	movs	r1, #0
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 ffa9 	bl	8009c44 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	2104      	movs	r1, #4
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 ffa2 	bl	8009c44 <TIM_CCxChannelCmd>
      break;
 8008d00:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f042 0201 	orr.w	r2, r2, #1
 8008d10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d020      	beq.n	8008d80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f003 0302 	and.w	r3, r3, #2
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d01b      	beq.n	8008d80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f06f 0202 	mvn.w	r2, #2
 8008d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	f003 0303 	and.w	r3, r3, #3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d003      	beq.n	8008d6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fb37 	bl	80093da <HAL_TIM_IC_CaptureCallback>
 8008d6c:	e005      	b.n	8008d7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7f8 fac6 	bl	8001300 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fb3a 	bl	80093ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	f003 0304 	and.w	r3, r3, #4
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d020      	beq.n	8008dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f003 0304 	and.w	r3, r3, #4
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d01b      	beq.n	8008dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f06f 0204 	mvn.w	r2, #4
 8008d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2202      	movs	r2, #2
 8008da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d003      	beq.n	8008dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fb11 	bl	80093da <HAL_TIM_IC_CaptureCallback>
 8008db8:	e005      	b.n	8008dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7f8 faa0 	bl	8001300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fb14 	bl	80093ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	f003 0308 	and.w	r3, r3, #8
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d020      	beq.n	8008e18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f003 0308 	and.w	r3, r3, #8
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d01b      	beq.n	8008e18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f06f 0208 	mvn.w	r2, #8
 8008de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2204      	movs	r2, #4
 8008dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	69db      	ldr	r3, [r3, #28]
 8008df6:	f003 0303 	and.w	r3, r3, #3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d003      	beq.n	8008e06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 faeb 	bl	80093da <HAL_TIM_IC_CaptureCallback>
 8008e04:	e005      	b.n	8008e12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7f8 fa7a 	bl	8001300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 faee 	bl	80093ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	f003 0310 	and.w	r3, r3, #16
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d020      	beq.n	8008e64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f003 0310 	and.w	r3, r3, #16
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01b      	beq.n	8008e64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f06f 0210 	mvn.w	r2, #16
 8008e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2208      	movs	r2, #8
 8008e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fac5 	bl	80093da <HAL_TIM_IC_CaptureCallback>
 8008e50:	e005      	b.n	8008e5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7f8 fa54 	bl	8001300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fac8 	bl	80093ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00c      	beq.n	8008e88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d007      	beq.n	8008e88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f06f 0201 	mvn.w	r2, #1
 8008e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7f8 fa14 	bl	80012b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d104      	bne.n	8008e9c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00c      	beq.n	8008eb6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d007      	beq.n	8008eb6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fffd 	bl	8009eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00c      	beq.n	8008eda <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d007      	beq.n	8008eda <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fff5 	bl	8009ec4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00c      	beq.n	8008efe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d007      	beq.n	8008efe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fa82 	bl	8009402 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f003 0320 	and.w	r3, r3, #32
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00c      	beq.n	8008f22 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f003 0320 	and.w	r3, r3, #32
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d007      	beq.n	8008f22 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f06f 0220 	mvn.w	r2, #32
 8008f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 ffbd 	bl	8009e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f22:	bf00      	nop
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
	...

08008f2c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d101      	bne.n	8008f4a <HAL_TIM_OC_ConfigChannel+0x1e>
 8008f46:	2302      	movs	r3, #2
 8008f48:	e066      	b.n	8009018 <HAL_TIM_OC_ConfigChannel+0xec>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b14      	cmp	r3, #20
 8008f56:	d857      	bhi.n	8009008 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008f58:	a201      	add	r2, pc, #4	@ (adr r2, 8008f60 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5e:	bf00      	nop
 8008f60:	08008fb5 	.word	0x08008fb5
 8008f64:	08009009 	.word	0x08009009
 8008f68:	08009009 	.word	0x08009009
 8008f6c:	08009009 	.word	0x08009009
 8008f70:	08008fc3 	.word	0x08008fc3
 8008f74:	08009009 	.word	0x08009009
 8008f78:	08009009 	.word	0x08009009
 8008f7c:	08009009 	.word	0x08009009
 8008f80:	08008fd1 	.word	0x08008fd1
 8008f84:	08009009 	.word	0x08009009
 8008f88:	08009009 	.word	0x08009009
 8008f8c:	08009009 	.word	0x08009009
 8008f90:	08008fdf 	.word	0x08008fdf
 8008f94:	08009009 	.word	0x08009009
 8008f98:	08009009 	.word	0x08009009
 8008f9c:	08009009 	.word	0x08009009
 8008fa0:	08008fed 	.word	0x08008fed
 8008fa4:	08009009 	.word	0x08009009
 8008fa8:	08009009 	.word	0x08009009
 8008fac:	08009009 	.word	0x08009009
 8008fb0:	08008ffb 	.word	0x08008ffb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68b9      	ldr	r1, [r7, #8]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 fad2 	bl	8009564 <TIM_OC1_SetConfig>
      break;
 8008fc0:	e025      	b.n	800900e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68b9      	ldr	r1, [r7, #8]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 fb5b 	bl	8009684 <TIM_OC2_SetConfig>
      break;
 8008fce:	e01e      	b.n	800900e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 fbde 	bl	8009798 <TIM_OC3_SetConfig>
      break;
 8008fdc:	e017      	b.n	800900e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68b9      	ldr	r1, [r7, #8]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 fc5f 	bl	80098a8 <TIM_OC4_SetConfig>
      break;
 8008fea:	e010      	b.n	800900e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68b9      	ldr	r1, [r7, #8]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 fcc2 	bl	800997c <TIM_OC5_SetConfig>
      break;
 8008ff8:	e009      	b.n	800900e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68b9      	ldr	r1, [r7, #8]
 8009000:	4618      	mov	r0, r3
 8009002:	f000 fd1f 	bl	8009a44 <TIM_OC6_SetConfig>
      break;
 8009006:	e002      	b.n	800900e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	75fb      	strb	r3, [r7, #23]
      break;
 800900c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009016:	7dfb      	ldrb	r3, [r7, #23]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3718      	adds	r7, #24
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009036:	2b01      	cmp	r3, #1
 8009038:	d101      	bne.n	800903e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800903a:	2302      	movs	r3, #2
 800903c:	e0ff      	b.n	800923e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b14      	cmp	r3, #20
 800904a:	f200 80f0 	bhi.w	800922e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800904e:	a201      	add	r2, pc, #4	@ (adr r2, 8009054 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009054:	080090a9 	.word	0x080090a9
 8009058:	0800922f 	.word	0x0800922f
 800905c:	0800922f 	.word	0x0800922f
 8009060:	0800922f 	.word	0x0800922f
 8009064:	080090e9 	.word	0x080090e9
 8009068:	0800922f 	.word	0x0800922f
 800906c:	0800922f 	.word	0x0800922f
 8009070:	0800922f 	.word	0x0800922f
 8009074:	0800912b 	.word	0x0800912b
 8009078:	0800922f 	.word	0x0800922f
 800907c:	0800922f 	.word	0x0800922f
 8009080:	0800922f 	.word	0x0800922f
 8009084:	0800916b 	.word	0x0800916b
 8009088:	0800922f 	.word	0x0800922f
 800908c:	0800922f 	.word	0x0800922f
 8009090:	0800922f 	.word	0x0800922f
 8009094:	080091ad 	.word	0x080091ad
 8009098:	0800922f 	.word	0x0800922f
 800909c:	0800922f 	.word	0x0800922f
 80090a0:	0800922f 	.word	0x0800922f
 80090a4:	080091ed 	.word	0x080091ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68b9      	ldr	r1, [r7, #8]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 fa58 	bl	8009564 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	699a      	ldr	r2, [r3, #24]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f042 0208 	orr.w	r2, r2, #8
 80090c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	699a      	ldr	r2, [r3, #24]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f022 0204 	bic.w	r2, r2, #4
 80090d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6999      	ldr	r1, [r3, #24]
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	691a      	ldr	r2, [r3, #16]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	430a      	orrs	r2, r1
 80090e4:	619a      	str	r2, [r3, #24]
      break;
 80090e6:	e0a5      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68b9      	ldr	r1, [r7, #8]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 fac8 	bl	8009684 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	699a      	ldr	r2, [r3, #24]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	699a      	ldr	r2, [r3, #24]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6999      	ldr	r1, [r3, #24]
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	021a      	lsls	r2, r3, #8
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	430a      	orrs	r2, r1
 8009126:	619a      	str	r2, [r3, #24]
      break;
 8009128:	e084      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68b9      	ldr	r1, [r7, #8]
 8009130:	4618      	mov	r0, r3
 8009132:	f000 fb31 	bl	8009798 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	69da      	ldr	r2, [r3, #28]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f042 0208 	orr.w	r2, r2, #8
 8009144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	69da      	ldr	r2, [r3, #28]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f022 0204 	bic.w	r2, r2, #4
 8009154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	69d9      	ldr	r1, [r3, #28]
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	691a      	ldr	r2, [r3, #16]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	430a      	orrs	r2, r1
 8009166:	61da      	str	r2, [r3, #28]
      break;
 8009168:	e064      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68b9      	ldr	r1, [r7, #8]
 8009170:	4618      	mov	r0, r3
 8009172:	f000 fb99 	bl	80098a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	69da      	ldr	r2, [r3, #28]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	69da      	ldr	r2, [r3, #28]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	69d9      	ldr	r1, [r3, #28]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	021a      	lsls	r2, r3, #8
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	430a      	orrs	r2, r1
 80091a8:	61da      	str	r2, [r3, #28]
      break;
 80091aa:	e043      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68b9      	ldr	r1, [r7, #8]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f000 fbe2 	bl	800997c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f042 0208 	orr.w	r2, r2, #8
 80091c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f022 0204 	bic.w	r2, r2, #4
 80091d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	691a      	ldr	r2, [r3, #16]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	430a      	orrs	r2, r1
 80091e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80091ea:	e023      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68b9      	ldr	r1, [r7, #8]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 fc26 	bl	8009a44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009206:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009216:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	021a      	lsls	r2, r3, #8
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	430a      	orrs	r2, r1
 800922a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800922c:	e002      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	75fb      	strb	r3, [r7, #23]
      break;
 8009232:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800923c:	7dfb      	ldrb	r3, [r7, #23]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3718      	adds	r7, #24
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop

08009248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800925c:	2b01      	cmp	r3, #1
 800925e:	d101      	bne.n	8009264 <HAL_TIM_ConfigClockSource+0x1c>
 8009260:	2302      	movs	r3, #2
 8009262:	e0b6      	b.n	80093d2 <HAL_TIM_ConfigClockSource+0x18a>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2202      	movs	r2, #2
 8009270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009282:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800928e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092a0:	d03e      	beq.n	8009320 <HAL_TIM_ConfigClockSource+0xd8>
 80092a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092a6:	f200 8087 	bhi.w	80093b8 <HAL_TIM_ConfigClockSource+0x170>
 80092aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092ae:	f000 8086 	beq.w	80093be <HAL_TIM_ConfigClockSource+0x176>
 80092b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092b6:	d87f      	bhi.n	80093b8 <HAL_TIM_ConfigClockSource+0x170>
 80092b8:	2b70      	cmp	r3, #112	@ 0x70
 80092ba:	d01a      	beq.n	80092f2 <HAL_TIM_ConfigClockSource+0xaa>
 80092bc:	2b70      	cmp	r3, #112	@ 0x70
 80092be:	d87b      	bhi.n	80093b8 <HAL_TIM_ConfigClockSource+0x170>
 80092c0:	2b60      	cmp	r3, #96	@ 0x60
 80092c2:	d050      	beq.n	8009366 <HAL_TIM_ConfigClockSource+0x11e>
 80092c4:	2b60      	cmp	r3, #96	@ 0x60
 80092c6:	d877      	bhi.n	80093b8 <HAL_TIM_ConfigClockSource+0x170>
 80092c8:	2b50      	cmp	r3, #80	@ 0x50
 80092ca:	d03c      	beq.n	8009346 <HAL_TIM_ConfigClockSource+0xfe>
 80092cc:	2b50      	cmp	r3, #80	@ 0x50
 80092ce:	d873      	bhi.n	80093b8 <HAL_TIM_ConfigClockSource+0x170>
 80092d0:	2b40      	cmp	r3, #64	@ 0x40
 80092d2:	d058      	beq.n	8009386 <HAL_TIM_ConfigClockSource+0x13e>
 80092d4:	2b40      	cmp	r3, #64	@ 0x40
 80092d6:	d86f      	bhi.n	80093b8 <HAL_TIM_ConfigClockSource+0x170>
 80092d8:	2b30      	cmp	r3, #48	@ 0x30
 80092da:	d064      	beq.n	80093a6 <HAL_TIM_ConfigClockSource+0x15e>
 80092dc:	2b30      	cmp	r3, #48	@ 0x30
 80092de:	d86b      	bhi.n	80093b8 <HAL_TIM_ConfigClockSource+0x170>
 80092e0:	2b20      	cmp	r3, #32
 80092e2:	d060      	beq.n	80093a6 <HAL_TIM_ConfigClockSource+0x15e>
 80092e4:	2b20      	cmp	r3, #32
 80092e6:	d867      	bhi.n	80093b8 <HAL_TIM_ConfigClockSource+0x170>
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d05c      	beq.n	80093a6 <HAL_TIM_ConfigClockSource+0x15e>
 80092ec:	2b10      	cmp	r3, #16
 80092ee:	d05a      	beq.n	80093a6 <HAL_TIM_ConfigClockSource+0x15e>
 80092f0:	e062      	b.n	80093b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009302:	f000 fc7f 	bl	8009c04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009314:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	609a      	str	r2, [r3, #8]
      break;
 800931e:	e04f      	b.n	80093c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009330:	f000 fc68 	bl	8009c04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	689a      	ldr	r2, [r3, #8]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009342:	609a      	str	r2, [r3, #8]
      break;
 8009344:	e03c      	b.n	80093c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009352:	461a      	mov	r2, r3
 8009354:	f000 fbdc 	bl	8009b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2150      	movs	r1, #80	@ 0x50
 800935e:	4618      	mov	r0, r3
 8009360:	f000 fc35 	bl	8009bce <TIM_ITRx_SetConfig>
      break;
 8009364:	e02c      	b.n	80093c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009372:	461a      	mov	r2, r3
 8009374:	f000 fbfb 	bl	8009b6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2160      	movs	r1, #96	@ 0x60
 800937e:	4618      	mov	r0, r3
 8009380:	f000 fc25 	bl	8009bce <TIM_ITRx_SetConfig>
      break;
 8009384:	e01c      	b.n	80093c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009392:	461a      	mov	r2, r3
 8009394:	f000 fbbc 	bl	8009b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2140      	movs	r1, #64	@ 0x40
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 fc15 	bl	8009bce <TIM_ITRx_SetConfig>
      break;
 80093a4:	e00c      	b.n	80093c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4619      	mov	r1, r3
 80093b0:	4610      	mov	r0, r2
 80093b2:	f000 fc0c 	bl	8009bce <TIM_ITRx_SetConfig>
      break;
 80093b6:	e003      	b.n	80093c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	73fb      	strb	r3, [r7, #15]
      break;
 80093bc:	e000      	b.n	80093c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80093be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093da:	b480      	push	{r7}
 80093dc:	b083      	sub	sp, #12
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093e2:	bf00      	nop
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b083      	sub	sp, #12
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093f6:	bf00      	nop
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009402:	b480      	push	{r7}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800940a:	bf00      	nop
 800940c:	370c      	adds	r7, #12
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
	...

08009418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a46      	ldr	r2, [pc, #280]	@ (8009544 <TIM_Base_SetConfig+0x12c>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d013      	beq.n	8009458 <TIM_Base_SetConfig+0x40>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009436:	d00f      	beq.n	8009458 <TIM_Base_SetConfig+0x40>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a43      	ldr	r2, [pc, #268]	@ (8009548 <TIM_Base_SetConfig+0x130>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d00b      	beq.n	8009458 <TIM_Base_SetConfig+0x40>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a42      	ldr	r2, [pc, #264]	@ (800954c <TIM_Base_SetConfig+0x134>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d007      	beq.n	8009458 <TIM_Base_SetConfig+0x40>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a41      	ldr	r2, [pc, #260]	@ (8009550 <TIM_Base_SetConfig+0x138>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d003      	beq.n	8009458 <TIM_Base_SetConfig+0x40>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a40      	ldr	r2, [pc, #256]	@ (8009554 <TIM_Base_SetConfig+0x13c>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d108      	bne.n	800946a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800945e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	4313      	orrs	r3, r2
 8009468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a35      	ldr	r2, [pc, #212]	@ (8009544 <TIM_Base_SetConfig+0x12c>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d01f      	beq.n	80094b2 <TIM_Base_SetConfig+0x9a>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009478:	d01b      	beq.n	80094b2 <TIM_Base_SetConfig+0x9a>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a32      	ldr	r2, [pc, #200]	@ (8009548 <TIM_Base_SetConfig+0x130>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d017      	beq.n	80094b2 <TIM_Base_SetConfig+0x9a>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a31      	ldr	r2, [pc, #196]	@ (800954c <TIM_Base_SetConfig+0x134>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d013      	beq.n	80094b2 <TIM_Base_SetConfig+0x9a>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a30      	ldr	r2, [pc, #192]	@ (8009550 <TIM_Base_SetConfig+0x138>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d00f      	beq.n	80094b2 <TIM_Base_SetConfig+0x9a>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a2f      	ldr	r2, [pc, #188]	@ (8009554 <TIM_Base_SetConfig+0x13c>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d00b      	beq.n	80094b2 <TIM_Base_SetConfig+0x9a>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a2e      	ldr	r2, [pc, #184]	@ (8009558 <TIM_Base_SetConfig+0x140>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d007      	beq.n	80094b2 <TIM_Base_SetConfig+0x9a>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a2d      	ldr	r2, [pc, #180]	@ (800955c <TIM_Base_SetConfig+0x144>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d003      	beq.n	80094b2 <TIM_Base_SetConfig+0x9a>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a2c      	ldr	r2, [pc, #176]	@ (8009560 <TIM_Base_SetConfig+0x148>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d108      	bne.n	80094c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	689a      	ldr	r2, [r3, #8]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a16      	ldr	r2, [pc, #88]	@ (8009544 <TIM_Base_SetConfig+0x12c>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d00f      	beq.n	8009510 <TIM_Base_SetConfig+0xf8>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a18      	ldr	r2, [pc, #96]	@ (8009554 <TIM_Base_SetConfig+0x13c>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d00b      	beq.n	8009510 <TIM_Base_SetConfig+0xf8>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a17      	ldr	r2, [pc, #92]	@ (8009558 <TIM_Base_SetConfig+0x140>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d007      	beq.n	8009510 <TIM_Base_SetConfig+0xf8>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a16      	ldr	r2, [pc, #88]	@ (800955c <TIM_Base_SetConfig+0x144>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d003      	beq.n	8009510 <TIM_Base_SetConfig+0xf8>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a15      	ldr	r2, [pc, #84]	@ (8009560 <TIM_Base_SetConfig+0x148>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d103      	bne.n	8009518 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	691a      	ldr	r2, [r3, #16]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b01      	cmp	r3, #1
 8009528:	d105      	bne.n	8009536 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	f023 0201 	bic.w	r2, r3, #1
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	611a      	str	r2, [r3, #16]
  }
}
 8009536:	bf00      	nop
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	40012c00 	.word	0x40012c00
 8009548:	40000400 	.word	0x40000400
 800954c:	40000800 	.word	0x40000800
 8009550:	40000c00 	.word	0x40000c00
 8009554:	40013400 	.word	0x40013400
 8009558:	40014000 	.word	0x40014000
 800955c:	40014400 	.word	0x40014400
 8009560:	40014800 	.word	0x40014800

08009564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009564:	b480      	push	{r7}
 8009566:	b087      	sub	sp, #28
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a1b      	ldr	r3, [r3, #32]
 8009578:	f023 0201 	bic.w	r2, r3, #1
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f023 0303 	bic.w	r3, r3, #3
 800959e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	f023 0302 	bic.w	r3, r3, #2
 80095b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a2c      	ldr	r2, [pc, #176]	@ (8009670 <TIM_OC1_SetConfig+0x10c>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d00f      	beq.n	80095e4 <TIM_OC1_SetConfig+0x80>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a2b      	ldr	r2, [pc, #172]	@ (8009674 <TIM_OC1_SetConfig+0x110>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d00b      	beq.n	80095e4 <TIM_OC1_SetConfig+0x80>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a2a      	ldr	r2, [pc, #168]	@ (8009678 <TIM_OC1_SetConfig+0x114>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d007      	beq.n	80095e4 <TIM_OC1_SetConfig+0x80>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a29      	ldr	r2, [pc, #164]	@ (800967c <TIM_OC1_SetConfig+0x118>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d003      	beq.n	80095e4 <TIM_OC1_SetConfig+0x80>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a28      	ldr	r2, [pc, #160]	@ (8009680 <TIM_OC1_SetConfig+0x11c>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d10c      	bne.n	80095fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	f023 0308 	bic.w	r3, r3, #8
 80095ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	697a      	ldr	r2, [r7, #20]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f023 0304 	bic.w	r3, r3, #4
 80095fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a1b      	ldr	r2, [pc, #108]	@ (8009670 <TIM_OC1_SetConfig+0x10c>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d00f      	beq.n	8009626 <TIM_OC1_SetConfig+0xc2>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a1a      	ldr	r2, [pc, #104]	@ (8009674 <TIM_OC1_SetConfig+0x110>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d00b      	beq.n	8009626 <TIM_OC1_SetConfig+0xc2>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a19      	ldr	r2, [pc, #100]	@ (8009678 <TIM_OC1_SetConfig+0x114>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d007      	beq.n	8009626 <TIM_OC1_SetConfig+0xc2>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a18      	ldr	r2, [pc, #96]	@ (800967c <TIM_OC1_SetConfig+0x118>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d003      	beq.n	8009626 <TIM_OC1_SetConfig+0xc2>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a17      	ldr	r2, [pc, #92]	@ (8009680 <TIM_OC1_SetConfig+0x11c>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d111      	bne.n	800964a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800962c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	4313      	orrs	r3, r2
 800963e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	4313      	orrs	r3, r2
 8009648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	685a      	ldr	r2, [r3, #4]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	697a      	ldr	r2, [r7, #20]
 8009662:	621a      	str	r2, [r3, #32]
}
 8009664:	bf00      	nop
 8009666:	371c      	adds	r7, #28
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr
 8009670:	40012c00 	.word	0x40012c00
 8009674:	40013400 	.word	0x40013400
 8009678:	40014000 	.word	0x40014000
 800967c:	40014400 	.word	0x40014400
 8009680:	40014800 	.word	0x40014800

08009684 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009684:	b480      	push	{r7}
 8009686:	b087      	sub	sp, #28
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a1b      	ldr	r3, [r3, #32]
 8009692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a1b      	ldr	r3, [r3, #32]
 8009698:	f023 0210 	bic.w	r2, r3, #16
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80096b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	021b      	lsls	r3, r3, #8
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	f023 0320 	bic.w	r3, r3, #32
 80096d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	011b      	lsls	r3, r3, #4
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	4313      	orrs	r3, r2
 80096de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a28      	ldr	r2, [pc, #160]	@ (8009784 <TIM_OC2_SetConfig+0x100>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d003      	beq.n	80096f0 <TIM_OC2_SetConfig+0x6c>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a27      	ldr	r2, [pc, #156]	@ (8009788 <TIM_OC2_SetConfig+0x104>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d10d      	bne.n	800970c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	011b      	lsls	r3, r3, #4
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	4313      	orrs	r3, r2
 8009702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800970a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a1d      	ldr	r2, [pc, #116]	@ (8009784 <TIM_OC2_SetConfig+0x100>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d00f      	beq.n	8009734 <TIM_OC2_SetConfig+0xb0>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a1c      	ldr	r2, [pc, #112]	@ (8009788 <TIM_OC2_SetConfig+0x104>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d00b      	beq.n	8009734 <TIM_OC2_SetConfig+0xb0>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a1b      	ldr	r2, [pc, #108]	@ (800978c <TIM_OC2_SetConfig+0x108>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d007      	beq.n	8009734 <TIM_OC2_SetConfig+0xb0>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a1a      	ldr	r2, [pc, #104]	@ (8009790 <TIM_OC2_SetConfig+0x10c>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d003      	beq.n	8009734 <TIM_OC2_SetConfig+0xb0>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a19      	ldr	r2, [pc, #100]	@ (8009794 <TIM_OC2_SetConfig+0x110>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d113      	bne.n	800975c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800973a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009742:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	695b      	ldr	r3, [r3, #20]
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	4313      	orrs	r3, r2
 800974e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	4313      	orrs	r3, r2
 800975a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	697a      	ldr	r2, [r7, #20]
 8009774:	621a      	str	r2, [r3, #32]
}
 8009776:	bf00      	nop
 8009778:	371c      	adds	r7, #28
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	40012c00 	.word	0x40012c00
 8009788:	40013400 	.word	0x40013400
 800978c:	40014000 	.word	0x40014000
 8009790:	40014400 	.word	0x40014400
 8009794:	40014800 	.word	0x40014800

08009798 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009798:	b480      	push	{r7}
 800979a:	b087      	sub	sp, #28
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a1b      	ldr	r3, [r3, #32]
 80097a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a1b      	ldr	r3, [r3, #32]
 80097ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	69db      	ldr	r3, [r3, #28]
 80097be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f023 0303 	bic.w	r3, r3, #3
 80097d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	4313      	orrs	r3, r2
 80097dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80097e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	021b      	lsls	r3, r3, #8
 80097ec:	697a      	ldr	r2, [r7, #20]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a27      	ldr	r2, [pc, #156]	@ (8009894 <TIM_OC3_SetConfig+0xfc>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d003      	beq.n	8009802 <TIM_OC3_SetConfig+0x6a>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a26      	ldr	r2, [pc, #152]	@ (8009898 <TIM_OC3_SetConfig+0x100>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d10d      	bne.n	800981e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	021b      	lsls	r3, r3, #8
 8009810:	697a      	ldr	r2, [r7, #20]
 8009812:	4313      	orrs	r3, r2
 8009814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800981c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	4a1c      	ldr	r2, [pc, #112]	@ (8009894 <TIM_OC3_SetConfig+0xfc>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d00f      	beq.n	8009846 <TIM_OC3_SetConfig+0xae>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4a1b      	ldr	r2, [pc, #108]	@ (8009898 <TIM_OC3_SetConfig+0x100>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d00b      	beq.n	8009846 <TIM_OC3_SetConfig+0xae>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a1a      	ldr	r2, [pc, #104]	@ (800989c <TIM_OC3_SetConfig+0x104>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d007      	beq.n	8009846 <TIM_OC3_SetConfig+0xae>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a19      	ldr	r2, [pc, #100]	@ (80098a0 <TIM_OC3_SetConfig+0x108>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d003      	beq.n	8009846 <TIM_OC3_SetConfig+0xae>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a18      	ldr	r2, [pc, #96]	@ (80098a4 <TIM_OC3_SetConfig+0x10c>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d113      	bne.n	800986e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800984c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	695b      	ldr	r3, [r3, #20]
 800985a:	011b      	lsls	r3, r3, #4
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	4313      	orrs	r3, r2
 8009860:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	011b      	lsls	r3, r3, #4
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	4313      	orrs	r3, r2
 800986c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	685a      	ldr	r2, [r3, #4]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	621a      	str	r2, [r3, #32]
}
 8009888:	bf00      	nop
 800988a:	371c      	adds	r7, #28
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr
 8009894:	40012c00 	.word	0x40012c00
 8009898:	40013400 	.word	0x40013400
 800989c:	40014000 	.word	0x40014000
 80098a0:	40014400 	.word	0x40014400
 80098a4:	40014800 	.word	0x40014800

080098a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b087      	sub	sp, #28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a1b      	ldr	r3, [r3, #32]
 80098bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	69db      	ldr	r3, [r3, #28]
 80098ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80098d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	021b      	lsls	r3, r3, #8
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80098f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	031b      	lsls	r3, r3, #12
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	4313      	orrs	r3, r2
 8009902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4a18      	ldr	r2, [pc, #96]	@ (8009968 <TIM_OC4_SetConfig+0xc0>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d00f      	beq.n	800992c <TIM_OC4_SetConfig+0x84>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a17      	ldr	r2, [pc, #92]	@ (800996c <TIM_OC4_SetConfig+0xc4>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d00b      	beq.n	800992c <TIM_OC4_SetConfig+0x84>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a16      	ldr	r2, [pc, #88]	@ (8009970 <TIM_OC4_SetConfig+0xc8>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d007      	beq.n	800992c <TIM_OC4_SetConfig+0x84>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a15      	ldr	r2, [pc, #84]	@ (8009974 <TIM_OC4_SetConfig+0xcc>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d003      	beq.n	800992c <TIM_OC4_SetConfig+0x84>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a14      	ldr	r2, [pc, #80]	@ (8009978 <TIM_OC4_SetConfig+0xd0>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d109      	bne.n	8009940 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009932:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	695b      	ldr	r3, [r3, #20]
 8009938:	019b      	lsls	r3, r3, #6
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	4313      	orrs	r3, r2
 800993e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	621a      	str	r2, [r3, #32]
}
 800995a:	bf00      	nop
 800995c:	371c      	adds	r7, #28
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	40012c00 	.word	0x40012c00
 800996c:	40013400 	.word	0x40013400
 8009970:	40014000 	.word	0x40014000
 8009974:	40014400 	.word	0x40014400
 8009978:	40014800 	.word	0x40014800

0800997c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800997c:	b480      	push	{r7}
 800997e:	b087      	sub	sp, #28
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6a1b      	ldr	r3, [r3, #32]
 800998a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6a1b      	ldr	r3, [r3, #32]
 8009990:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80099c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	041b      	lsls	r3, r3, #16
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a17      	ldr	r2, [pc, #92]	@ (8009a30 <TIM_OC5_SetConfig+0xb4>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d00f      	beq.n	80099f6 <TIM_OC5_SetConfig+0x7a>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a16      	ldr	r2, [pc, #88]	@ (8009a34 <TIM_OC5_SetConfig+0xb8>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d00b      	beq.n	80099f6 <TIM_OC5_SetConfig+0x7a>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a15      	ldr	r2, [pc, #84]	@ (8009a38 <TIM_OC5_SetConfig+0xbc>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d007      	beq.n	80099f6 <TIM_OC5_SetConfig+0x7a>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a14      	ldr	r2, [pc, #80]	@ (8009a3c <TIM_OC5_SetConfig+0xc0>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d003      	beq.n	80099f6 <TIM_OC5_SetConfig+0x7a>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a13      	ldr	r2, [pc, #76]	@ (8009a40 <TIM_OC5_SetConfig+0xc4>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d109      	bne.n	8009a0a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	021b      	lsls	r3, r3, #8
 8009a04:	697a      	ldr	r2, [r7, #20]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	685a      	ldr	r2, [r3, #4]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	693a      	ldr	r2, [r7, #16]
 8009a22:	621a      	str	r2, [r3, #32]
}
 8009a24:	bf00      	nop
 8009a26:	371c      	adds	r7, #28
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr
 8009a30:	40012c00 	.word	0x40012c00
 8009a34:	40013400 	.word	0x40013400
 8009a38:	40014000 	.word	0x40014000
 8009a3c:	40014400 	.word	0x40014400
 8009a40:	40014800 	.word	0x40014800

08009a44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a1b      	ldr	r3, [r3, #32]
 8009a58:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	021b      	lsls	r3, r3, #8
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009a8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	051b      	lsls	r3, r3, #20
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a18      	ldr	r2, [pc, #96]	@ (8009afc <TIM_OC6_SetConfig+0xb8>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d00f      	beq.n	8009ac0 <TIM_OC6_SetConfig+0x7c>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a17      	ldr	r2, [pc, #92]	@ (8009b00 <TIM_OC6_SetConfig+0xbc>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d00b      	beq.n	8009ac0 <TIM_OC6_SetConfig+0x7c>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a16      	ldr	r2, [pc, #88]	@ (8009b04 <TIM_OC6_SetConfig+0xc0>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d007      	beq.n	8009ac0 <TIM_OC6_SetConfig+0x7c>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a15      	ldr	r2, [pc, #84]	@ (8009b08 <TIM_OC6_SetConfig+0xc4>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d003      	beq.n	8009ac0 <TIM_OC6_SetConfig+0x7c>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a14      	ldr	r2, [pc, #80]	@ (8009b0c <TIM_OC6_SetConfig+0xc8>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d109      	bne.n	8009ad4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	695b      	ldr	r3, [r3, #20]
 8009acc:	029b      	lsls	r3, r3, #10
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	693a      	ldr	r2, [r7, #16]
 8009aec:	621a      	str	r2, [r3, #32]
}
 8009aee:	bf00      	nop
 8009af0:	371c      	adds	r7, #28
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	40012c00 	.word	0x40012c00
 8009b00:	40013400 	.word	0x40013400
 8009b04:	40014000 	.word	0x40014000
 8009b08:	40014400 	.word	0x40014400
 8009b0c:	40014800 	.word	0x40014800

08009b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b087      	sub	sp, #28
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6a1b      	ldr	r3, [r3, #32]
 8009b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	f023 0201 	bic.w	r2, r3, #1
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	011b      	lsls	r3, r3, #4
 8009b40:	693a      	ldr	r2, [r7, #16]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	f023 030a 	bic.w	r3, r3, #10
 8009b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	621a      	str	r2, [r3, #32]
}
 8009b62:	bf00      	nop
 8009b64:	371c      	adds	r7, #28
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b6e:	b480      	push	{r7}
 8009b70:	b087      	sub	sp, #28
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	60f8      	str	r0, [r7, #12]
 8009b76:	60b9      	str	r1, [r7, #8]
 8009b78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6a1b      	ldr	r3, [r3, #32]
 8009b7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6a1b      	ldr	r3, [r3, #32]
 8009b84:	f023 0210 	bic.w	r2, r3, #16
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	031b      	lsls	r3, r3, #12
 8009b9e:	693a      	ldr	r2, [r7, #16]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009baa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	011b      	lsls	r3, r3, #4
 8009bb0:	697a      	ldr	r2, [r7, #20]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	697a      	ldr	r2, [r7, #20]
 8009bc0:	621a      	str	r2, [r3, #32]
}
 8009bc2:	bf00      	nop
 8009bc4:	371c      	adds	r7, #28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bce:	b480      	push	{r7}
 8009bd0:	b085      	sub	sp, #20
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009be4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009be6:	683a      	ldr	r2, [r7, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	f043 0307 	orr.w	r3, r3, #7
 8009bf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	609a      	str	r2, [r3, #8]
}
 8009bf8:	bf00      	nop
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b087      	sub	sp, #28
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
 8009c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	021a      	lsls	r2, r3, #8
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	431a      	orrs	r2, r3
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	697a      	ldr	r2, [r7, #20]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	609a      	str	r2, [r3, #8]
}
 8009c38:	bf00      	nop
 8009c3a:	371c      	adds	r7, #28
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b087      	sub	sp, #28
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	f003 031f 	and.w	r3, r3, #31
 8009c56:	2201      	movs	r2, #1
 8009c58:	fa02 f303 	lsl.w	r3, r2, r3
 8009c5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6a1a      	ldr	r2, [r3, #32]
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	43db      	mvns	r3, r3
 8009c66:	401a      	ands	r2, r3
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6a1a      	ldr	r2, [r3, #32]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	f003 031f 	and.w	r3, r3, #31
 8009c76:	6879      	ldr	r1, [r7, #4]
 8009c78:	fa01 f303 	lsl.w	r3, r1, r3
 8009c7c:	431a      	orrs	r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	621a      	str	r2, [r3, #32]
}
 8009c82:	bf00      	nop
 8009c84:	371c      	adds	r7, #28
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
	...

08009c90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d101      	bne.n	8009ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	e068      	b.n	8009d7a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a2e      	ldr	r2, [pc, #184]	@ (8009d88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d004      	beq.n	8009cdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a2d      	ldr	r2, [pc, #180]	@ (8009d8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d108      	bne.n	8009cee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009ce2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	4313      	orrs	r3, r2
 8009cec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cf4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a1e      	ldr	r2, [pc, #120]	@ (8009d88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d01d      	beq.n	8009d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d1a:	d018      	beq.n	8009d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a1b      	ldr	r2, [pc, #108]	@ (8009d90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d013      	beq.n	8009d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8009d94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d00e      	beq.n	8009d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a18      	ldr	r2, [pc, #96]	@ (8009d98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d009      	beq.n	8009d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a13      	ldr	r2, [pc, #76]	@ (8009d8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d004      	beq.n	8009d4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a14      	ldr	r2, [pc, #80]	@ (8009d9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d10c      	bne.n	8009d68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68ba      	ldr	r2, [r7, #8]
 8009d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3714      	adds	r7, #20
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	40012c00 	.word	0x40012c00
 8009d8c:	40013400 	.word	0x40013400
 8009d90:	40000400 	.word	0x40000400
 8009d94:	40000800 	.word	0x40000800
 8009d98:	40000c00 	.word	0x40000c00
 8009d9c:	40014000 	.word	0x40014000

08009da0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009daa:	2300      	movs	r3, #0
 8009dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d101      	bne.n	8009dbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009db8:	2302      	movs	r3, #2
 8009dba:	e065      	b.n	8009e88 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e22:	4313      	orrs	r3, r2
 8009e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	041b      	lsls	r3, r3, #16
 8009e32:	4313      	orrs	r3, r2
 8009e34:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a16      	ldr	r2, [pc, #88]	@ (8009e94 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d004      	beq.n	8009e4a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a14      	ldr	r2, [pc, #80]	@ (8009e98 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d115      	bne.n	8009e76 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e54:	051b      	lsls	r3, r3, #20
 8009e56:	4313      	orrs	r3, r2
 8009e58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	69db      	ldr	r3, [r3, #28]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3714      	adds	r7, #20
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr
 8009e94:	40012c00 	.word	0x40012c00
 8009e98:	40013400 	.word	0x40013400

08009e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ecc:	bf00      	nop
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d101      	bne.n	8009eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e040      	b.n	8009f6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d106      	bne.n	8009f00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7f8 f8ba 	bl	8002074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2224      	movs	r2, #36	@ 0x24
 8009f04:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f022 0201 	bic.w	r2, r2, #1
 8009f14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fe90 	bl	800ac44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 fbd5 	bl	800a6d4 <UART_SetConfig>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d101      	bne.n	8009f34 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	e01b      	b.n	8009f6c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	685a      	ldr	r2, [r3, #4]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	689a      	ldr	r2, [r3, #8]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f042 0201 	orr.w	r2, r2, #1
 8009f62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 ff0f 	bl	800ad88 <UART_CheckIdleState>
 8009f6a:	4603      	mov	r3, r0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b08a      	sub	sp, #40	@ 0x28
 8009f78:	af02      	add	r7, sp, #8
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	603b      	str	r3, [r7, #0]
 8009f80:	4613      	mov	r3, r2
 8009f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f88:	2b20      	cmp	r3, #32
 8009f8a:	d177      	bne.n	800a07c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d002      	beq.n	8009f98 <HAL_UART_Transmit+0x24>
 8009f92:	88fb      	ldrh	r3, [r7, #6]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d101      	bne.n	8009f9c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e070      	b.n	800a07e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2221      	movs	r2, #33	@ 0x21
 8009fa8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009faa:	f7f8 fad1 	bl	8002550 <HAL_GetTick>
 8009fae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	88fa      	ldrh	r2, [r7, #6]
 8009fb4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	88fa      	ldrh	r2, [r7, #6]
 8009fbc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fc8:	d108      	bne.n	8009fdc <HAL_UART_Transmit+0x68>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d104      	bne.n	8009fdc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	61bb      	str	r3, [r7, #24]
 8009fda:	e003      	b.n	8009fe4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009fe4:	e02f      	b.n	800a046 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	2200      	movs	r2, #0
 8009fee:	2180      	movs	r1, #128	@ 0x80
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 ff71 	bl	800aed8 <UART_WaitOnFlagUntilTimeout>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d004      	beq.n	800a006 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2220      	movs	r2, #32
 800a000:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a002:	2303      	movs	r3, #3
 800a004:	e03b      	b.n	800a07e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10b      	bne.n	800a024 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	881a      	ldrh	r2, [r3, #0]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a018:	b292      	uxth	r2, r2
 800a01a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	3302      	adds	r3, #2
 800a020:	61bb      	str	r3, [r7, #24]
 800a022:	e007      	b.n	800a034 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	781a      	ldrb	r2, [r3, #0]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	3301      	adds	r3, #1
 800a032:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	3b01      	subs	r3, #1
 800a03e:	b29a      	uxth	r2, r3
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1c9      	bne.n	8009fe6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	2200      	movs	r2, #0
 800a05a:	2140      	movs	r1, #64	@ 0x40
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f000 ff3b 	bl	800aed8 <UART_WaitOnFlagUntilTimeout>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d004      	beq.n	800a072 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2220      	movs	r2, #32
 800a06c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a06e:	2303      	movs	r3, #3
 800a070:	e005      	b.n	800a07e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2220      	movs	r2, #32
 800a076:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a078:	2300      	movs	r3, #0
 800a07a:	e000      	b.n	800a07e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a07c:	2302      	movs	r3, #2
  }
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3720      	adds	r7, #32
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
	...

0800a088 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b0ba      	sub	sp, #232	@ 0xe8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	69db      	ldr	r3, [r3, #28]
 800a096:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a0ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a0b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a0bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d115      	bne.n	800a0f0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a0c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0c8:	f003 0320 	and.w	r3, r3, #32
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00f      	beq.n	800a0f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a0d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0d4:	f003 0320 	and.w	r3, r3, #32
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d009      	beq.n	800a0f0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f000 82ca 	beq.w	800a67a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	4798      	blx	r3
      }
      return;
 800a0ee:	e2c4      	b.n	800a67a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800a0f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f000 8117 	beq.w	800a328 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a0fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0fe:	f003 0301 	and.w	r3, r3, #1
 800a102:	2b00      	cmp	r3, #0
 800a104:	d106      	bne.n	800a114 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a106:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a10a:	4b85      	ldr	r3, [pc, #532]	@ (800a320 <HAL_UART_IRQHandler+0x298>)
 800a10c:	4013      	ands	r3, r2
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f000 810a 	beq.w	800a328 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a118:	f003 0301 	and.w	r3, r3, #1
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d011      	beq.n	800a144 <HAL_UART_IRQHandler+0xbc>
 800a120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00b      	beq.n	800a144 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2201      	movs	r2, #1
 800a132:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a13a:	f043 0201 	orr.w	r2, r3, #1
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a148:	f003 0302 	and.w	r3, r3, #2
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d011      	beq.n	800a174 <HAL_UART_IRQHandler+0xec>
 800a150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a154:	f003 0301 	and.w	r3, r3, #1
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00b      	beq.n	800a174 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2202      	movs	r2, #2
 800a162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a16a:	f043 0204 	orr.w	r2, r3, #4
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a178:	f003 0304 	and.w	r3, r3, #4
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d011      	beq.n	800a1a4 <HAL_UART_IRQHandler+0x11c>
 800a180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a184:	f003 0301 	and.w	r3, r3, #1
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00b      	beq.n	800a1a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2204      	movs	r2, #4
 800a192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a19a:	f043 0202 	orr.w	r2, r3, #2
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a1a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1a8:	f003 0308 	and.w	r3, r3, #8
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d017      	beq.n	800a1e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a1b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1b4:	f003 0320 	and.w	r3, r3, #32
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d105      	bne.n	800a1c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a1bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00b      	beq.n	800a1e0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2208      	movs	r2, #8
 800a1ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1d6:	f043 0208 	orr.w	r2, r3, #8
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a1e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d012      	beq.n	800a212 <HAL_UART_IRQHandler+0x18a>
 800a1ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00c      	beq.n	800a212 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a200:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a208:	f043 0220 	orr.w	r2, r3, #32
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f000 8230 	beq.w	800a67e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a21e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a222:	f003 0320 	and.w	r3, r3, #32
 800a226:	2b00      	cmp	r3, #0
 800a228:	d00d      	beq.n	800a246 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a22a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a22e:	f003 0320 	and.w	r3, r3, #32
 800a232:	2b00      	cmp	r3, #0
 800a234:	d007      	beq.n	800a246 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a24c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a25a:	2b40      	cmp	r3, #64	@ 0x40
 800a25c:	d005      	beq.n	800a26a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a25e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a262:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a266:	2b00      	cmp	r3, #0
 800a268:	d04f      	beq.n	800a30a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fea1 	bl	800afb2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a27a:	2b40      	cmp	r3, #64	@ 0x40
 800a27c:	d141      	bne.n	800a302 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	3308      	adds	r3, #8
 800a284:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a288:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a28c:	e853 3f00 	ldrex	r3, [r3]
 800a290:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a294:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a298:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a29c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	3308      	adds	r3, #8
 800a2a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a2aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a2ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a2b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a2ba:	e841 2300 	strex	r3, r2, [r1]
 800a2be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a2c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1d9      	bne.n	800a27e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d013      	beq.n	800a2fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2d6:	4a13      	ldr	r2, [pc, #76]	@ (800a324 <HAL_UART_IRQHandler+0x29c>)
 800a2d8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fa f914 	bl	800450c <HAL_DMA_Abort_IT>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d017      	beq.n	800a31a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a2f4:	4610      	mov	r0, r2
 800a2f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2f8:	e00f      	b.n	800a31a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f9d4 	bl	800a6a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a300:	e00b      	b.n	800a31a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 f9d0 	bl	800a6a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a308:	e007      	b.n	800a31a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f9cc 	bl	800a6a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800a318:	e1b1      	b.n	800a67e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a31a:	bf00      	nop
    return;
 800a31c:	e1af      	b.n	800a67e <HAL_UART_IRQHandler+0x5f6>
 800a31e:	bf00      	nop
 800a320:	04000120 	.word	0x04000120
 800a324:	0800b07b 	.word	0x0800b07b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	f040 816a 	bne.w	800a606 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a336:	f003 0310 	and.w	r3, r3, #16
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f000 8163 	beq.w	800a606 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a344:	f003 0310 	and.w	r3, r3, #16
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 815c 	beq.w	800a606 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2210      	movs	r2, #16
 800a354:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a360:	2b40      	cmp	r3, #64	@ 0x40
 800a362:	f040 80d4 	bne.w	800a50e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a372:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a376:	2b00      	cmp	r3, #0
 800a378:	f000 80ad 	beq.w	800a4d6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a382:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a386:	429a      	cmp	r2, r3
 800a388:	f080 80a5 	bcs.w	800a4d6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a392:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f003 0320 	and.w	r3, r3, #32
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f040 8086 	bne.w	800a4b4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a3b4:	e853 3f00 	ldrex	r3, [r3]
 800a3b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a3bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a3d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a3d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a3de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a3e2:	e841 2300 	strex	r3, r2, [r1]
 800a3e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a3ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1da      	bne.n	800a3a8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	3308      	adds	r3, #8
 800a3f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a3fc:	e853 3f00 	ldrex	r3, [r3]
 800a400:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a402:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a404:	f023 0301 	bic.w	r3, r3, #1
 800a408:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3308      	adds	r3, #8
 800a412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a416:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a41a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a41e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a422:	e841 2300 	strex	r3, r2, [r1]
 800a426:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a428:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1e1      	bne.n	800a3f2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	3308      	adds	r3, #8
 800a434:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a436:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a438:	e853 3f00 	ldrex	r3, [r3]
 800a43c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a43e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a444:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	3308      	adds	r3, #8
 800a44e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a452:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a454:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a456:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a458:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a45a:	e841 2300 	strex	r3, r2, [r1]
 800a45e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a460:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a462:	2b00      	cmp	r3, #0
 800a464:	d1e3      	bne.n	800a42e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2220      	movs	r2, #32
 800a46a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a47c:	e853 3f00 	ldrex	r3, [r3]
 800a480:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a484:	f023 0310 	bic.w	r3, r3, #16
 800a488:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	461a      	mov	r2, r3
 800a492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a496:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a498:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a49c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a49e:	e841 2300 	strex	r3, r2, [r1]
 800a4a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a4a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1e4      	bne.n	800a474 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7f9 ffee 	bl	8004490 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2202      	movs	r2, #2
 800a4b8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f8f4 	bl	800a6bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a4d4:	e0d5      	b.n	800a682 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a4dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	f040 80ce 	bne.w	800a682 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 0320 	and.w	r3, r3, #32
 800a4f2:	2b20      	cmp	r3, #32
 800a4f4:	f040 80c5 	bne.w	800a682 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2202      	movs	r2, #2
 800a4fc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a504:	4619      	mov	r1, r3
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f8d8 	bl	800a6bc <HAL_UARTEx_RxEventCallback>
      return;
 800a50c:	e0b9      	b.n	800a682 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a528:	b29b      	uxth	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f000 80ab 	beq.w	800a686 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800a530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 80a6 	beq.w	800a686 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a542:	e853 3f00 	ldrex	r3, [r3]
 800a546:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a54a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a54e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	461a      	mov	r2, r3
 800a558:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a55c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a55e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a560:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a562:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a564:	e841 2300 	strex	r3, r2, [r1]
 800a568:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a56a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1e4      	bne.n	800a53a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	3308      	adds	r3, #8
 800a576:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57a:	e853 3f00 	ldrex	r3, [r3]
 800a57e:	623b      	str	r3, [r7, #32]
   return(result);
 800a580:	6a3b      	ldr	r3, [r7, #32]
 800a582:	f023 0301 	bic.w	r3, r3, #1
 800a586:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	3308      	adds	r3, #8
 800a590:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a594:	633a      	str	r2, [r7, #48]	@ 0x30
 800a596:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a598:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a59a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a59c:	e841 2300 	strex	r3, r2, [r1]
 800a5a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1e3      	bne.n	800a570 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2220      	movs	r2, #32
 800a5ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	e853 3f00 	ldrex	r3, [r3]
 800a5c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f023 0310 	bic.w	r3, r3, #16
 800a5d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	461a      	mov	r2, r3
 800a5da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a5de:	61fb      	str	r3, [r7, #28]
 800a5e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e2:	69b9      	ldr	r1, [r7, #24]
 800a5e4:	69fa      	ldr	r2, [r7, #28]
 800a5e6:	e841 2300 	strex	r3, r2, [r1]
 800a5ea:	617b      	str	r3, [r7, #20]
   return(result);
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1e4      	bne.n	800a5bc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2202      	movs	r2, #2
 800a5f6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a5f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f85c 	bl	800a6bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a604:	e03f      	b.n	800a686 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a60a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00e      	beq.n	800a630 <HAL_UART_IRQHandler+0x5a8>
 800a612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d008      	beq.n	800a630 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a626:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fd66 	bl	800b0fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a62e:	e02d      	b.n	800a68c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00e      	beq.n	800a65a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a63c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a644:	2b00      	cmp	r3, #0
 800a646:	d008      	beq.n	800a65a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d01c      	beq.n	800a68a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	4798      	blx	r3
    }
    return;
 800a658:	e017      	b.n	800a68a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a65a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a65e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a662:	2b00      	cmp	r3, #0
 800a664:	d012      	beq.n	800a68c <HAL_UART_IRQHandler+0x604>
 800a666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a66a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00c      	beq.n	800a68c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 fd17 	bl	800b0a6 <UART_EndTransmit_IT>
    return;
 800a678:	e008      	b.n	800a68c <HAL_UART_IRQHandler+0x604>
      return;
 800a67a:	bf00      	nop
 800a67c:	e006      	b.n	800a68c <HAL_UART_IRQHandler+0x604>
    return;
 800a67e:	bf00      	nop
 800a680:	e004      	b.n	800a68c <HAL_UART_IRQHandler+0x604>
      return;
 800a682:	bf00      	nop
 800a684:	e002      	b.n	800a68c <HAL_UART_IRQHandler+0x604>
      return;
 800a686:	bf00      	nop
 800a688:	e000      	b.n	800a68c <HAL_UART_IRQHandler+0x604>
    return;
 800a68a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800a68c:	37e8      	adds	r7, #232	@ 0xe8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop

0800a694 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a6c8:	bf00      	nop
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a6d8:	b08a      	sub	sp, #40	@ 0x28
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	689a      	ldr	r2, [r3, #8]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	691b      	ldr	r3, [r3, #16]
 800a6ec:	431a      	orrs	r2, r3
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	431a      	orrs	r2, r3
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	69db      	ldr	r3, [r3, #28]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	4ba4      	ldr	r3, [pc, #656]	@ (800a994 <UART_SetConfig+0x2c0>)
 800a704:	4013      	ands	r3, r2
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	6812      	ldr	r2, [r2, #0]
 800a70a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a70c:	430b      	orrs	r3, r1
 800a70e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	68da      	ldr	r2, [r3, #12]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	430a      	orrs	r2, r1
 800a724:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a99      	ldr	r2, [pc, #612]	@ (800a998 <UART_SetConfig+0x2c4>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d004      	beq.n	800a740 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6a1b      	ldr	r3, [r3, #32]
 800a73a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a73c:	4313      	orrs	r3, r2
 800a73e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a750:	430a      	orrs	r2, r1
 800a752:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a90      	ldr	r2, [pc, #576]	@ (800a99c <UART_SetConfig+0x2c8>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d126      	bne.n	800a7ac <UART_SetConfig+0xd8>
 800a75e:	4b90      	ldr	r3, [pc, #576]	@ (800a9a0 <UART_SetConfig+0x2cc>)
 800a760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a764:	f003 0303 	and.w	r3, r3, #3
 800a768:	2b03      	cmp	r3, #3
 800a76a:	d81b      	bhi.n	800a7a4 <UART_SetConfig+0xd0>
 800a76c:	a201      	add	r2, pc, #4	@ (adr r2, 800a774 <UART_SetConfig+0xa0>)
 800a76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a772:	bf00      	nop
 800a774:	0800a785 	.word	0x0800a785
 800a778:	0800a795 	.word	0x0800a795
 800a77c:	0800a78d 	.word	0x0800a78d
 800a780:	0800a79d 	.word	0x0800a79d
 800a784:	2301      	movs	r3, #1
 800a786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a78a:	e116      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a78c:	2302      	movs	r3, #2
 800a78e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a792:	e112      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a794:	2304      	movs	r3, #4
 800a796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a79a:	e10e      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a79c:	2308      	movs	r3, #8
 800a79e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a7a2:	e10a      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a7a4:	2310      	movs	r3, #16
 800a7a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a7aa:	e106      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a7c      	ldr	r2, [pc, #496]	@ (800a9a4 <UART_SetConfig+0x2d0>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d138      	bne.n	800a828 <UART_SetConfig+0x154>
 800a7b6:	4b7a      	ldr	r3, [pc, #488]	@ (800a9a0 <UART_SetConfig+0x2cc>)
 800a7b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7bc:	f003 030c 	and.w	r3, r3, #12
 800a7c0:	2b0c      	cmp	r3, #12
 800a7c2:	d82d      	bhi.n	800a820 <UART_SetConfig+0x14c>
 800a7c4:	a201      	add	r2, pc, #4	@ (adr r2, 800a7cc <UART_SetConfig+0xf8>)
 800a7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ca:	bf00      	nop
 800a7cc:	0800a801 	.word	0x0800a801
 800a7d0:	0800a821 	.word	0x0800a821
 800a7d4:	0800a821 	.word	0x0800a821
 800a7d8:	0800a821 	.word	0x0800a821
 800a7dc:	0800a811 	.word	0x0800a811
 800a7e0:	0800a821 	.word	0x0800a821
 800a7e4:	0800a821 	.word	0x0800a821
 800a7e8:	0800a821 	.word	0x0800a821
 800a7ec:	0800a809 	.word	0x0800a809
 800a7f0:	0800a821 	.word	0x0800a821
 800a7f4:	0800a821 	.word	0x0800a821
 800a7f8:	0800a821 	.word	0x0800a821
 800a7fc:	0800a819 	.word	0x0800a819
 800a800:	2300      	movs	r3, #0
 800a802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a806:	e0d8      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a808:	2302      	movs	r3, #2
 800a80a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a80e:	e0d4      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a810:	2304      	movs	r3, #4
 800a812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a816:	e0d0      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a818:	2308      	movs	r3, #8
 800a81a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a81e:	e0cc      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a820:	2310      	movs	r3, #16
 800a822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a826:	e0c8      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a5e      	ldr	r2, [pc, #376]	@ (800a9a8 <UART_SetConfig+0x2d4>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d125      	bne.n	800a87e <UART_SetConfig+0x1aa>
 800a832:	4b5b      	ldr	r3, [pc, #364]	@ (800a9a0 <UART_SetConfig+0x2cc>)
 800a834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a838:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a83c:	2b30      	cmp	r3, #48	@ 0x30
 800a83e:	d016      	beq.n	800a86e <UART_SetConfig+0x19a>
 800a840:	2b30      	cmp	r3, #48	@ 0x30
 800a842:	d818      	bhi.n	800a876 <UART_SetConfig+0x1a2>
 800a844:	2b20      	cmp	r3, #32
 800a846:	d00a      	beq.n	800a85e <UART_SetConfig+0x18a>
 800a848:	2b20      	cmp	r3, #32
 800a84a:	d814      	bhi.n	800a876 <UART_SetConfig+0x1a2>
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d002      	beq.n	800a856 <UART_SetConfig+0x182>
 800a850:	2b10      	cmp	r3, #16
 800a852:	d008      	beq.n	800a866 <UART_SetConfig+0x192>
 800a854:	e00f      	b.n	800a876 <UART_SetConfig+0x1a2>
 800a856:	2300      	movs	r3, #0
 800a858:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a85c:	e0ad      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a85e:	2302      	movs	r3, #2
 800a860:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a864:	e0a9      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a866:	2304      	movs	r3, #4
 800a868:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a86c:	e0a5      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a86e:	2308      	movs	r3, #8
 800a870:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a874:	e0a1      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a876:	2310      	movs	r3, #16
 800a878:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a87c:	e09d      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a4a      	ldr	r2, [pc, #296]	@ (800a9ac <UART_SetConfig+0x2d8>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d125      	bne.n	800a8d4 <UART_SetConfig+0x200>
 800a888:	4b45      	ldr	r3, [pc, #276]	@ (800a9a0 <UART_SetConfig+0x2cc>)
 800a88a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a88e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a892:	2bc0      	cmp	r3, #192	@ 0xc0
 800a894:	d016      	beq.n	800a8c4 <UART_SetConfig+0x1f0>
 800a896:	2bc0      	cmp	r3, #192	@ 0xc0
 800a898:	d818      	bhi.n	800a8cc <UART_SetConfig+0x1f8>
 800a89a:	2b80      	cmp	r3, #128	@ 0x80
 800a89c:	d00a      	beq.n	800a8b4 <UART_SetConfig+0x1e0>
 800a89e:	2b80      	cmp	r3, #128	@ 0x80
 800a8a0:	d814      	bhi.n	800a8cc <UART_SetConfig+0x1f8>
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d002      	beq.n	800a8ac <UART_SetConfig+0x1d8>
 800a8a6:	2b40      	cmp	r3, #64	@ 0x40
 800a8a8:	d008      	beq.n	800a8bc <UART_SetConfig+0x1e8>
 800a8aa:	e00f      	b.n	800a8cc <UART_SetConfig+0x1f8>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a8b2:	e082      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a8ba:	e07e      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a8bc:	2304      	movs	r3, #4
 800a8be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a8c2:	e07a      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a8c4:	2308      	movs	r3, #8
 800a8c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a8ca:	e076      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a8cc:	2310      	movs	r3, #16
 800a8ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a8d2:	e072      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a35      	ldr	r2, [pc, #212]	@ (800a9b0 <UART_SetConfig+0x2dc>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d12a      	bne.n	800a934 <UART_SetConfig+0x260>
 800a8de:	4b30      	ldr	r3, [pc, #192]	@ (800a9a0 <UART_SetConfig+0x2cc>)
 800a8e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8ec:	d01a      	beq.n	800a924 <UART_SetConfig+0x250>
 800a8ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8f2:	d81b      	bhi.n	800a92c <UART_SetConfig+0x258>
 800a8f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8f8:	d00c      	beq.n	800a914 <UART_SetConfig+0x240>
 800a8fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8fe:	d815      	bhi.n	800a92c <UART_SetConfig+0x258>
 800a900:	2b00      	cmp	r3, #0
 800a902:	d003      	beq.n	800a90c <UART_SetConfig+0x238>
 800a904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a908:	d008      	beq.n	800a91c <UART_SetConfig+0x248>
 800a90a:	e00f      	b.n	800a92c <UART_SetConfig+0x258>
 800a90c:	2300      	movs	r3, #0
 800a90e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a912:	e052      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a914:	2302      	movs	r3, #2
 800a916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a91a:	e04e      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a91c:	2304      	movs	r3, #4
 800a91e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a922:	e04a      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a924:	2308      	movs	r3, #8
 800a926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a92a:	e046      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a92c:	2310      	movs	r3, #16
 800a92e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a932:	e042      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a17      	ldr	r2, [pc, #92]	@ (800a998 <UART_SetConfig+0x2c4>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d13a      	bne.n	800a9b4 <UART_SetConfig+0x2e0>
 800a93e:	4b18      	ldr	r3, [pc, #96]	@ (800a9a0 <UART_SetConfig+0x2cc>)
 800a940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a944:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a948:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a94c:	d01a      	beq.n	800a984 <UART_SetConfig+0x2b0>
 800a94e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a952:	d81b      	bhi.n	800a98c <UART_SetConfig+0x2b8>
 800a954:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a958:	d00c      	beq.n	800a974 <UART_SetConfig+0x2a0>
 800a95a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a95e:	d815      	bhi.n	800a98c <UART_SetConfig+0x2b8>
 800a960:	2b00      	cmp	r3, #0
 800a962:	d003      	beq.n	800a96c <UART_SetConfig+0x298>
 800a964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a968:	d008      	beq.n	800a97c <UART_SetConfig+0x2a8>
 800a96a:	e00f      	b.n	800a98c <UART_SetConfig+0x2b8>
 800a96c:	2300      	movs	r3, #0
 800a96e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a972:	e022      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a974:	2302      	movs	r3, #2
 800a976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a97a:	e01e      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a97c:	2304      	movs	r3, #4
 800a97e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a982:	e01a      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a984:	2308      	movs	r3, #8
 800a986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a98a:	e016      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a98c:	2310      	movs	r3, #16
 800a98e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a992:	e012      	b.n	800a9ba <UART_SetConfig+0x2e6>
 800a994:	efff69f3 	.word	0xefff69f3
 800a998:	40008000 	.word	0x40008000
 800a99c:	40013800 	.word	0x40013800
 800a9a0:	40021000 	.word	0x40021000
 800a9a4:	40004400 	.word	0x40004400
 800a9a8:	40004800 	.word	0x40004800
 800a9ac:	40004c00 	.word	0x40004c00
 800a9b0:	40005000 	.word	0x40005000
 800a9b4:	2310      	movs	r3, #16
 800a9b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a9f      	ldr	r2, [pc, #636]	@ (800ac3c <UART_SetConfig+0x568>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d17a      	bne.n	800aaba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a9c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a9c8:	2b08      	cmp	r3, #8
 800a9ca:	d824      	bhi.n	800aa16 <UART_SetConfig+0x342>
 800a9cc:	a201      	add	r2, pc, #4	@ (adr r2, 800a9d4 <UART_SetConfig+0x300>)
 800a9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d2:	bf00      	nop
 800a9d4:	0800a9f9 	.word	0x0800a9f9
 800a9d8:	0800aa17 	.word	0x0800aa17
 800a9dc:	0800aa01 	.word	0x0800aa01
 800a9e0:	0800aa17 	.word	0x0800aa17
 800a9e4:	0800aa07 	.word	0x0800aa07
 800a9e8:	0800aa17 	.word	0x0800aa17
 800a9ec:	0800aa17 	.word	0x0800aa17
 800a9f0:	0800aa17 	.word	0x0800aa17
 800a9f4:	0800aa0f 	.word	0x0800aa0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9f8:	f7fc ff2e 	bl	8007858 <HAL_RCC_GetPCLK1Freq>
 800a9fc:	61f8      	str	r0, [r7, #28]
        break;
 800a9fe:	e010      	b.n	800aa22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa00:	4b8f      	ldr	r3, [pc, #572]	@ (800ac40 <UART_SetConfig+0x56c>)
 800aa02:	61fb      	str	r3, [r7, #28]
        break;
 800aa04:	e00d      	b.n	800aa22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa06:	f7fc fe8f 	bl	8007728 <HAL_RCC_GetSysClockFreq>
 800aa0a:	61f8      	str	r0, [r7, #28]
        break;
 800aa0c:	e009      	b.n	800aa22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa12:	61fb      	str	r3, [r7, #28]
        break;
 800aa14:	e005      	b.n	800aa22 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800aa16:	2300      	movs	r3, #0
 800aa18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800aa20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aa22:	69fb      	ldr	r3, [r7, #28]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f000 80fb 	beq.w	800ac20 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	4613      	mov	r3, r2
 800aa30:	005b      	lsls	r3, r3, #1
 800aa32:	4413      	add	r3, r2
 800aa34:	69fa      	ldr	r2, [r7, #28]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d305      	bcc.n	800aa46 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aa40:	69fa      	ldr	r2, [r7, #28]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d903      	bls.n	800aa4e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
 800aa48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800aa4c:	e0e8      	b.n	800ac20 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	2200      	movs	r2, #0
 800aa52:	461c      	mov	r4, r3
 800aa54:	4615      	mov	r5, r2
 800aa56:	f04f 0200 	mov.w	r2, #0
 800aa5a:	f04f 0300 	mov.w	r3, #0
 800aa5e:	022b      	lsls	r3, r5, #8
 800aa60:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800aa64:	0222      	lsls	r2, r4, #8
 800aa66:	68f9      	ldr	r1, [r7, #12]
 800aa68:	6849      	ldr	r1, [r1, #4]
 800aa6a:	0849      	lsrs	r1, r1, #1
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	4688      	mov	r8, r1
 800aa70:	4681      	mov	r9, r0
 800aa72:	eb12 0a08 	adds.w	sl, r2, r8
 800aa76:	eb43 0b09 	adc.w	fp, r3, r9
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	603b      	str	r3, [r7, #0]
 800aa82:	607a      	str	r2, [r7, #4]
 800aa84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa88:	4650      	mov	r0, sl
 800aa8a:	4659      	mov	r1, fp
 800aa8c:	f7f6 f88c 	bl	8000ba8 <__aeabi_uldivmod>
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	4613      	mov	r3, r2
 800aa96:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa9e:	d308      	bcc.n	800aab2 <UART_SetConfig+0x3de>
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aaa6:	d204      	bcs.n	800aab2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	69ba      	ldr	r2, [r7, #24]
 800aaae:	60da      	str	r2, [r3, #12]
 800aab0:	e0b6      	b.n	800ac20 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800aab8:	e0b2      	b.n	800ac20 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	69db      	ldr	r3, [r3, #28]
 800aabe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aac2:	d15e      	bne.n	800ab82 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800aac4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aac8:	2b08      	cmp	r3, #8
 800aaca:	d828      	bhi.n	800ab1e <UART_SetConfig+0x44a>
 800aacc:	a201      	add	r2, pc, #4	@ (adr r2, 800aad4 <UART_SetConfig+0x400>)
 800aace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad2:	bf00      	nop
 800aad4:	0800aaf9 	.word	0x0800aaf9
 800aad8:	0800ab01 	.word	0x0800ab01
 800aadc:	0800ab09 	.word	0x0800ab09
 800aae0:	0800ab1f 	.word	0x0800ab1f
 800aae4:	0800ab0f 	.word	0x0800ab0f
 800aae8:	0800ab1f 	.word	0x0800ab1f
 800aaec:	0800ab1f 	.word	0x0800ab1f
 800aaf0:	0800ab1f 	.word	0x0800ab1f
 800aaf4:	0800ab17 	.word	0x0800ab17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaf8:	f7fc feae 	bl	8007858 <HAL_RCC_GetPCLK1Freq>
 800aafc:	61f8      	str	r0, [r7, #28]
        break;
 800aafe:	e014      	b.n	800ab2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab00:	f7fc fec0 	bl	8007884 <HAL_RCC_GetPCLK2Freq>
 800ab04:	61f8      	str	r0, [r7, #28]
        break;
 800ab06:	e010      	b.n	800ab2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab08:	4b4d      	ldr	r3, [pc, #308]	@ (800ac40 <UART_SetConfig+0x56c>)
 800ab0a:	61fb      	str	r3, [r7, #28]
        break;
 800ab0c:	e00d      	b.n	800ab2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab0e:	f7fc fe0b 	bl	8007728 <HAL_RCC_GetSysClockFreq>
 800ab12:	61f8      	str	r0, [r7, #28]
        break;
 800ab14:	e009      	b.n	800ab2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab1a:	61fb      	str	r3, [r7, #28]
        break;
 800ab1c:	e005      	b.n	800ab2a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
 800ab24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800ab28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d077      	beq.n	800ac20 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	005a      	lsls	r2, r3, #1
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	085b      	lsrs	r3, r3, #1
 800ab3a:	441a      	add	r2, r3
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab44:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	2b0f      	cmp	r3, #15
 800ab4a:	d916      	bls.n	800ab7a <UART_SetConfig+0x4a6>
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab52:	d212      	bcs.n	800ab7a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	f023 030f 	bic.w	r3, r3, #15
 800ab5c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	085b      	lsrs	r3, r3, #1
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	f003 0307 	and.w	r3, r3, #7
 800ab68:	b29a      	uxth	r2, r3
 800ab6a:	8afb      	ldrh	r3, [r7, #22]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	8afa      	ldrh	r2, [r7, #22]
 800ab76:	60da      	str	r2, [r3, #12]
 800ab78:	e052      	b.n	800ac20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800ab80:	e04e      	b.n	800ac20 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ab86:	2b08      	cmp	r3, #8
 800ab88:	d827      	bhi.n	800abda <UART_SetConfig+0x506>
 800ab8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab90 <UART_SetConfig+0x4bc>)
 800ab8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab90:	0800abb5 	.word	0x0800abb5
 800ab94:	0800abbd 	.word	0x0800abbd
 800ab98:	0800abc5 	.word	0x0800abc5
 800ab9c:	0800abdb 	.word	0x0800abdb
 800aba0:	0800abcb 	.word	0x0800abcb
 800aba4:	0800abdb 	.word	0x0800abdb
 800aba8:	0800abdb 	.word	0x0800abdb
 800abac:	0800abdb 	.word	0x0800abdb
 800abb0:	0800abd3 	.word	0x0800abd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abb4:	f7fc fe50 	bl	8007858 <HAL_RCC_GetPCLK1Freq>
 800abb8:	61f8      	str	r0, [r7, #28]
        break;
 800abba:	e014      	b.n	800abe6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abbc:	f7fc fe62 	bl	8007884 <HAL_RCC_GetPCLK2Freq>
 800abc0:	61f8      	str	r0, [r7, #28]
        break;
 800abc2:	e010      	b.n	800abe6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abc4:	4b1e      	ldr	r3, [pc, #120]	@ (800ac40 <UART_SetConfig+0x56c>)
 800abc6:	61fb      	str	r3, [r7, #28]
        break;
 800abc8:	e00d      	b.n	800abe6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abca:	f7fc fdad 	bl	8007728 <HAL_RCC_GetSysClockFreq>
 800abce:	61f8      	str	r0, [r7, #28]
        break;
 800abd0:	e009      	b.n	800abe6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abd6:	61fb      	str	r3, [r7, #28]
        break;
 800abd8:	e005      	b.n	800abe6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800abda:	2300      	movs	r3, #0
 800abdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800abe4:	bf00      	nop
    }

    if (pclk != 0U)
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d019      	beq.n	800ac20 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	085a      	lsrs	r2, r3, #1
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	441a      	add	r2, r3
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800abfe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	2b0f      	cmp	r3, #15
 800ac04:	d909      	bls.n	800ac1a <UART_SetConfig+0x546>
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac0c:	d205      	bcs.n	800ac1a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	60da      	str	r2, [r3, #12]
 800ac18:	e002      	b.n	800ac20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2200      	movs	r2, #0
 800ac24:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ac2c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3728      	adds	r7, #40	@ 0x28
 800ac34:	46bd      	mov	sp, r7
 800ac36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac3a:	bf00      	nop
 800ac3c:	40008000 	.word	0x40008000
 800ac40:	00f42400 	.word	0x00f42400

0800ac44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac50:	f003 0308 	and.w	r3, r3, #8
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00a      	beq.n	800ac6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	430a      	orrs	r2, r1
 800ac6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac72:	f003 0301 	and.w	r3, r3, #1
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00a      	beq.n	800ac90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	430a      	orrs	r2, r1
 800ac8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac94:	f003 0302 	and.w	r3, r3, #2
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00a      	beq.n	800acb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	430a      	orrs	r2, r1
 800acb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acb6:	f003 0304 	and.w	r3, r3, #4
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00a      	beq.n	800acd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	430a      	orrs	r2, r1
 800acd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acd8:	f003 0310 	and.w	r3, r3, #16
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00a      	beq.n	800acf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	430a      	orrs	r2, r1
 800acf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acfa:	f003 0320 	and.w	r3, r3, #32
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00a      	beq.n	800ad18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	689b      	ldr	r3, [r3, #8]
 800ad08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	430a      	orrs	r2, r1
 800ad16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d01a      	beq.n	800ad5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	430a      	orrs	r2, r1
 800ad38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad42:	d10a      	bne.n	800ad5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	430a      	orrs	r2, r1
 800ad58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00a      	beq.n	800ad7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	430a      	orrs	r2, r1
 800ad7a:	605a      	str	r2, [r3, #4]
  }
}
 800ad7c:	bf00      	nop
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b098      	sub	sp, #96	@ 0x60
 800ad8c:	af02      	add	r7, sp, #8
 800ad8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad98:	f7f7 fbda 	bl	8002550 <HAL_GetTick>
 800ad9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f003 0308 	and.w	r3, r3, #8
 800ada8:	2b08      	cmp	r3, #8
 800adaa:	d12e      	bne.n	800ae0a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adb4:	2200      	movs	r2, #0
 800adb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 f88c 	bl	800aed8 <UART_WaitOnFlagUntilTimeout>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d021      	beq.n	800ae0a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adce:	e853 3f00 	ldrex	r3, [r3]
 800add2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800add4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800add6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adda:	653b      	str	r3, [r7, #80]	@ 0x50
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	461a      	mov	r2, r3
 800ade2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ade4:	647b      	str	r3, [r7, #68]	@ 0x44
 800ade6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800adea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800adec:	e841 2300 	strex	r3, r2, [r1]
 800adf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800adf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1e6      	bne.n	800adc6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2220      	movs	r2, #32
 800adfc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae06:	2303      	movs	r3, #3
 800ae08:	e062      	b.n	800aed0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0304 	and.w	r3, r3, #4
 800ae14:	2b04      	cmp	r3, #4
 800ae16:	d149      	bne.n	800aeac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae20:	2200      	movs	r2, #0
 800ae22:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 f856 	bl	800aed8 <UART_WaitOnFlagUntilTimeout>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d03c      	beq.n	800aeac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3a:	e853 3f00 	ldrex	r3, [r3]
 800ae3e:	623b      	str	r3, [r7, #32]
   return(result);
 800ae40:	6a3b      	ldr	r3, [r7, #32]
 800ae42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae50:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae58:	e841 2300 	strex	r3, r2, [r1]
 800ae5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1e6      	bne.n	800ae32 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	3308      	adds	r3, #8
 800ae6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	e853 3f00 	ldrex	r3, [r3]
 800ae72:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f023 0301 	bic.w	r3, r3, #1
 800ae7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	3308      	adds	r3, #8
 800ae82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae84:	61fa      	str	r2, [r7, #28]
 800ae86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae88:	69b9      	ldr	r1, [r7, #24]
 800ae8a:	69fa      	ldr	r2, [r7, #28]
 800ae8c:	e841 2300 	strex	r3, r2, [r1]
 800ae90:	617b      	str	r3, [r7, #20]
   return(result);
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d1e5      	bne.n	800ae64 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2220      	movs	r2, #32
 800ae9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aea8:	2303      	movs	r3, #3
 800aeaa:	e011      	b.n	800aed0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2220      	movs	r2, #32
 800aeb0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2220      	movs	r2, #32
 800aeb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3758      	adds	r7, #88	@ 0x58
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	603b      	str	r3, [r7, #0]
 800aee4:	4613      	mov	r3, r2
 800aee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aee8:	e04f      	b.n	800af8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef0:	d04b      	beq.n	800af8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aef2:	f7f7 fb2d 	bl	8002550 <HAL_GetTick>
 800aef6:	4602      	mov	r2, r0
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	69ba      	ldr	r2, [r7, #24]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d302      	bcc.n	800af08 <UART_WaitOnFlagUntilTimeout+0x30>
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d101      	bne.n	800af0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800af08:	2303      	movs	r3, #3
 800af0a:	e04e      	b.n	800afaa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f003 0304 	and.w	r3, r3, #4
 800af16:	2b00      	cmp	r3, #0
 800af18:	d037      	beq.n	800af8a <UART_WaitOnFlagUntilTimeout+0xb2>
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	2b80      	cmp	r3, #128	@ 0x80
 800af1e:	d034      	beq.n	800af8a <UART_WaitOnFlagUntilTimeout+0xb2>
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	2b40      	cmp	r3, #64	@ 0x40
 800af24:	d031      	beq.n	800af8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	69db      	ldr	r3, [r3, #28]
 800af2c:	f003 0308 	and.w	r3, r3, #8
 800af30:	2b08      	cmp	r3, #8
 800af32:	d110      	bne.n	800af56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2208      	movs	r2, #8
 800af3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f000 f838 	bl	800afb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2208      	movs	r2, #8
 800af46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e029      	b.n	800afaa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	69db      	ldr	r3, [r3, #28]
 800af5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af64:	d111      	bne.n	800af8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800af6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	f000 f81e 	bl	800afb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2220      	movs	r2, #32
 800af7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2200      	movs	r2, #0
 800af82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800af86:	2303      	movs	r3, #3
 800af88:	e00f      	b.n	800afaa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	69da      	ldr	r2, [r3, #28]
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	4013      	ands	r3, r2
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	429a      	cmp	r2, r3
 800af98:	bf0c      	ite	eq
 800af9a:	2301      	moveq	r3, #1
 800af9c:	2300      	movne	r3, #0
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	461a      	mov	r2, r3
 800afa2:	79fb      	ldrb	r3, [r7, #7]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d0a0      	beq.n	800aeea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800afb2:	b480      	push	{r7}
 800afb4:	b095      	sub	sp, #84	@ 0x54
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afc2:	e853 3f00 	ldrex	r3, [r3]
 800afc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800afc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800afce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	461a      	mov	r2, r3
 800afd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afd8:	643b      	str	r3, [r7, #64]	@ 0x40
 800afda:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800afde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800afe0:	e841 2300 	strex	r3, r2, [r1]
 800afe4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800afe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d1e6      	bne.n	800afba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	3308      	adds	r3, #8
 800aff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff4:	6a3b      	ldr	r3, [r7, #32]
 800aff6:	e853 3f00 	ldrex	r3, [r3]
 800affa:	61fb      	str	r3, [r7, #28]
   return(result);
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	f023 0301 	bic.w	r3, r3, #1
 800b002:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	3308      	adds	r3, #8
 800b00a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b00c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b00e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b010:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b012:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b014:	e841 2300 	strex	r3, r2, [r1]
 800b018:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d1e5      	bne.n	800afec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b024:	2b01      	cmp	r3, #1
 800b026:	d118      	bne.n	800b05a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	e853 3f00 	ldrex	r3, [r3]
 800b034:	60bb      	str	r3, [r7, #8]
   return(result);
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	f023 0310 	bic.w	r3, r3, #16
 800b03c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	461a      	mov	r2, r3
 800b044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b046:	61bb      	str	r3, [r7, #24]
 800b048:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04a:	6979      	ldr	r1, [r7, #20]
 800b04c:	69ba      	ldr	r2, [r7, #24]
 800b04e:	e841 2300 	strex	r3, r2, [r1]
 800b052:	613b      	str	r3, [r7, #16]
   return(result);
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d1e6      	bne.n	800b028 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2220      	movs	r2, #32
 800b05e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b06e:	bf00      	nop
 800b070:	3754      	adds	r7, #84	@ 0x54
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr

0800b07a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b084      	sub	sp, #16
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b086:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2200      	movs	r2, #0
 800b094:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f7ff fb05 	bl	800a6a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b09e:	bf00      	nop
 800b0a0:	3710      	adds	r7, #16
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b088      	sub	sp, #32
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	e853 3f00 	ldrex	r3, [r3]
 800b0ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0c2:	61fb      	str	r3, [r7, #28]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	61bb      	str	r3, [r7, #24]
 800b0ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d0:	6979      	ldr	r1, [r7, #20]
 800b0d2:	69ba      	ldr	r2, [r7, #24]
 800b0d4:	e841 2300 	strex	r3, r2, [r1]
 800b0d8:	613b      	str	r3, [r7, #16]
   return(result);
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1e6      	bne.n	800b0ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2220      	movs	r2, #32
 800b0e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f7ff fad1 	bl	800a694 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0f2:	bf00      	nop
 800b0f4:	3720      	adds	r7, #32
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b0fa:	b480      	push	{r7}
 800b0fc:	b083      	sub	sp, #12
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b102:	bf00      	nop
 800b104:	370c      	adds	r7, #12
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr

0800b10e <__cvt>:
 800b10e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b112:	ec57 6b10 	vmov	r6, r7, d0
 800b116:	2f00      	cmp	r7, #0
 800b118:	460c      	mov	r4, r1
 800b11a:	4619      	mov	r1, r3
 800b11c:	463b      	mov	r3, r7
 800b11e:	bfbb      	ittet	lt
 800b120:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b124:	461f      	movlt	r7, r3
 800b126:	2300      	movge	r3, #0
 800b128:	232d      	movlt	r3, #45	@ 0x2d
 800b12a:	700b      	strb	r3, [r1, #0]
 800b12c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b12e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b132:	4691      	mov	r9, r2
 800b134:	f023 0820 	bic.w	r8, r3, #32
 800b138:	bfbc      	itt	lt
 800b13a:	4632      	movlt	r2, r6
 800b13c:	4616      	movlt	r6, r2
 800b13e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b142:	d005      	beq.n	800b150 <__cvt+0x42>
 800b144:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b148:	d100      	bne.n	800b14c <__cvt+0x3e>
 800b14a:	3401      	adds	r4, #1
 800b14c:	2102      	movs	r1, #2
 800b14e:	e000      	b.n	800b152 <__cvt+0x44>
 800b150:	2103      	movs	r1, #3
 800b152:	ab03      	add	r3, sp, #12
 800b154:	9301      	str	r3, [sp, #4]
 800b156:	ab02      	add	r3, sp, #8
 800b158:	9300      	str	r3, [sp, #0]
 800b15a:	ec47 6b10 	vmov	d0, r6, r7
 800b15e:	4653      	mov	r3, sl
 800b160:	4622      	mov	r2, r4
 800b162:	f000 fe39 	bl	800bdd8 <_dtoa_r>
 800b166:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b16a:	4605      	mov	r5, r0
 800b16c:	d119      	bne.n	800b1a2 <__cvt+0x94>
 800b16e:	f019 0f01 	tst.w	r9, #1
 800b172:	d00e      	beq.n	800b192 <__cvt+0x84>
 800b174:	eb00 0904 	add.w	r9, r0, r4
 800b178:	2200      	movs	r2, #0
 800b17a:	2300      	movs	r3, #0
 800b17c:	4630      	mov	r0, r6
 800b17e:	4639      	mov	r1, r7
 800b180:	f7f5 fca2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b184:	b108      	cbz	r0, 800b18a <__cvt+0x7c>
 800b186:	f8cd 900c 	str.w	r9, [sp, #12]
 800b18a:	2230      	movs	r2, #48	@ 0x30
 800b18c:	9b03      	ldr	r3, [sp, #12]
 800b18e:	454b      	cmp	r3, r9
 800b190:	d31e      	bcc.n	800b1d0 <__cvt+0xc2>
 800b192:	9b03      	ldr	r3, [sp, #12]
 800b194:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b196:	1b5b      	subs	r3, r3, r5
 800b198:	4628      	mov	r0, r5
 800b19a:	6013      	str	r3, [r2, #0]
 800b19c:	b004      	add	sp, #16
 800b19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b1a6:	eb00 0904 	add.w	r9, r0, r4
 800b1aa:	d1e5      	bne.n	800b178 <__cvt+0x6a>
 800b1ac:	7803      	ldrb	r3, [r0, #0]
 800b1ae:	2b30      	cmp	r3, #48	@ 0x30
 800b1b0:	d10a      	bne.n	800b1c8 <__cvt+0xba>
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	4639      	mov	r1, r7
 800b1ba:	f7f5 fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1be:	b918      	cbnz	r0, 800b1c8 <__cvt+0xba>
 800b1c0:	f1c4 0401 	rsb	r4, r4, #1
 800b1c4:	f8ca 4000 	str.w	r4, [sl]
 800b1c8:	f8da 3000 	ldr.w	r3, [sl]
 800b1cc:	4499      	add	r9, r3
 800b1ce:	e7d3      	b.n	800b178 <__cvt+0x6a>
 800b1d0:	1c59      	adds	r1, r3, #1
 800b1d2:	9103      	str	r1, [sp, #12]
 800b1d4:	701a      	strb	r2, [r3, #0]
 800b1d6:	e7d9      	b.n	800b18c <__cvt+0x7e>

0800b1d8 <__exponent>:
 800b1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1da:	2900      	cmp	r1, #0
 800b1dc:	bfba      	itte	lt
 800b1de:	4249      	neglt	r1, r1
 800b1e0:	232d      	movlt	r3, #45	@ 0x2d
 800b1e2:	232b      	movge	r3, #43	@ 0x2b
 800b1e4:	2909      	cmp	r1, #9
 800b1e6:	7002      	strb	r2, [r0, #0]
 800b1e8:	7043      	strb	r3, [r0, #1]
 800b1ea:	dd29      	ble.n	800b240 <__exponent+0x68>
 800b1ec:	f10d 0307 	add.w	r3, sp, #7
 800b1f0:	461d      	mov	r5, r3
 800b1f2:	270a      	movs	r7, #10
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	fbb1 f6f7 	udiv	r6, r1, r7
 800b1fa:	fb07 1416 	mls	r4, r7, r6, r1
 800b1fe:	3430      	adds	r4, #48	@ 0x30
 800b200:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b204:	460c      	mov	r4, r1
 800b206:	2c63      	cmp	r4, #99	@ 0x63
 800b208:	f103 33ff 	add.w	r3, r3, #4294967295
 800b20c:	4631      	mov	r1, r6
 800b20e:	dcf1      	bgt.n	800b1f4 <__exponent+0x1c>
 800b210:	3130      	adds	r1, #48	@ 0x30
 800b212:	1e94      	subs	r4, r2, #2
 800b214:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b218:	1c41      	adds	r1, r0, #1
 800b21a:	4623      	mov	r3, r4
 800b21c:	42ab      	cmp	r3, r5
 800b21e:	d30a      	bcc.n	800b236 <__exponent+0x5e>
 800b220:	f10d 0309 	add.w	r3, sp, #9
 800b224:	1a9b      	subs	r3, r3, r2
 800b226:	42ac      	cmp	r4, r5
 800b228:	bf88      	it	hi
 800b22a:	2300      	movhi	r3, #0
 800b22c:	3302      	adds	r3, #2
 800b22e:	4403      	add	r3, r0
 800b230:	1a18      	subs	r0, r3, r0
 800b232:	b003      	add	sp, #12
 800b234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b236:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b23a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b23e:	e7ed      	b.n	800b21c <__exponent+0x44>
 800b240:	2330      	movs	r3, #48	@ 0x30
 800b242:	3130      	adds	r1, #48	@ 0x30
 800b244:	7083      	strb	r3, [r0, #2]
 800b246:	70c1      	strb	r1, [r0, #3]
 800b248:	1d03      	adds	r3, r0, #4
 800b24a:	e7f1      	b.n	800b230 <__exponent+0x58>

0800b24c <_printf_float>:
 800b24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b250:	b08d      	sub	sp, #52	@ 0x34
 800b252:	460c      	mov	r4, r1
 800b254:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b258:	4616      	mov	r6, r2
 800b25a:	461f      	mov	r7, r3
 800b25c:	4605      	mov	r5, r0
 800b25e:	f000 fcb9 	bl	800bbd4 <_localeconv_r>
 800b262:	6803      	ldr	r3, [r0, #0]
 800b264:	9304      	str	r3, [sp, #16]
 800b266:	4618      	mov	r0, r3
 800b268:	f7f5 f802 	bl	8000270 <strlen>
 800b26c:	2300      	movs	r3, #0
 800b26e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b270:	f8d8 3000 	ldr.w	r3, [r8]
 800b274:	9005      	str	r0, [sp, #20]
 800b276:	3307      	adds	r3, #7
 800b278:	f023 0307 	bic.w	r3, r3, #7
 800b27c:	f103 0208 	add.w	r2, r3, #8
 800b280:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b284:	f8d4 b000 	ldr.w	fp, [r4]
 800b288:	f8c8 2000 	str.w	r2, [r8]
 800b28c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b290:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b294:	9307      	str	r3, [sp, #28]
 800b296:	f8cd 8018 	str.w	r8, [sp, #24]
 800b29a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b29e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2a2:	4b9c      	ldr	r3, [pc, #624]	@ (800b514 <_printf_float+0x2c8>)
 800b2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a8:	f7f5 fc40 	bl	8000b2c <__aeabi_dcmpun>
 800b2ac:	bb70      	cbnz	r0, 800b30c <_printf_float+0xc0>
 800b2ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2b2:	4b98      	ldr	r3, [pc, #608]	@ (800b514 <_printf_float+0x2c8>)
 800b2b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2b8:	f7f5 fc1a 	bl	8000af0 <__aeabi_dcmple>
 800b2bc:	bb30      	cbnz	r0, 800b30c <_printf_float+0xc0>
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	4640      	mov	r0, r8
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	f7f5 fc09 	bl	8000adc <__aeabi_dcmplt>
 800b2ca:	b110      	cbz	r0, 800b2d2 <_printf_float+0x86>
 800b2cc:	232d      	movs	r3, #45	@ 0x2d
 800b2ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2d2:	4a91      	ldr	r2, [pc, #580]	@ (800b518 <_printf_float+0x2cc>)
 800b2d4:	4b91      	ldr	r3, [pc, #580]	@ (800b51c <_printf_float+0x2d0>)
 800b2d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b2da:	bf8c      	ite	hi
 800b2dc:	4690      	movhi	r8, r2
 800b2de:	4698      	movls	r8, r3
 800b2e0:	2303      	movs	r3, #3
 800b2e2:	6123      	str	r3, [r4, #16]
 800b2e4:	f02b 0304 	bic.w	r3, fp, #4
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	f04f 0900 	mov.w	r9, #0
 800b2ee:	9700      	str	r7, [sp, #0]
 800b2f0:	4633      	mov	r3, r6
 800b2f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	f000 f9d2 	bl	800b6a0 <_printf_common>
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	f040 808d 	bne.w	800b41c <_printf_float+0x1d0>
 800b302:	f04f 30ff 	mov.w	r0, #4294967295
 800b306:	b00d      	add	sp, #52	@ 0x34
 800b308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b30c:	4642      	mov	r2, r8
 800b30e:	464b      	mov	r3, r9
 800b310:	4640      	mov	r0, r8
 800b312:	4649      	mov	r1, r9
 800b314:	f7f5 fc0a 	bl	8000b2c <__aeabi_dcmpun>
 800b318:	b140      	cbz	r0, 800b32c <_printf_float+0xe0>
 800b31a:	464b      	mov	r3, r9
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	bfbc      	itt	lt
 800b320:	232d      	movlt	r3, #45	@ 0x2d
 800b322:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b326:	4a7e      	ldr	r2, [pc, #504]	@ (800b520 <_printf_float+0x2d4>)
 800b328:	4b7e      	ldr	r3, [pc, #504]	@ (800b524 <_printf_float+0x2d8>)
 800b32a:	e7d4      	b.n	800b2d6 <_printf_float+0x8a>
 800b32c:	6863      	ldr	r3, [r4, #4]
 800b32e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b332:	9206      	str	r2, [sp, #24]
 800b334:	1c5a      	adds	r2, r3, #1
 800b336:	d13b      	bne.n	800b3b0 <_printf_float+0x164>
 800b338:	2306      	movs	r3, #6
 800b33a:	6063      	str	r3, [r4, #4]
 800b33c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b340:	2300      	movs	r3, #0
 800b342:	6022      	str	r2, [r4, #0]
 800b344:	9303      	str	r3, [sp, #12]
 800b346:	ab0a      	add	r3, sp, #40	@ 0x28
 800b348:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b34c:	ab09      	add	r3, sp, #36	@ 0x24
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	6861      	ldr	r1, [r4, #4]
 800b352:	ec49 8b10 	vmov	d0, r8, r9
 800b356:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b35a:	4628      	mov	r0, r5
 800b35c:	f7ff fed7 	bl	800b10e <__cvt>
 800b360:	9b06      	ldr	r3, [sp, #24]
 800b362:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b364:	2b47      	cmp	r3, #71	@ 0x47
 800b366:	4680      	mov	r8, r0
 800b368:	d129      	bne.n	800b3be <_printf_float+0x172>
 800b36a:	1cc8      	adds	r0, r1, #3
 800b36c:	db02      	blt.n	800b374 <_printf_float+0x128>
 800b36e:	6863      	ldr	r3, [r4, #4]
 800b370:	4299      	cmp	r1, r3
 800b372:	dd41      	ble.n	800b3f8 <_printf_float+0x1ac>
 800b374:	f1aa 0a02 	sub.w	sl, sl, #2
 800b378:	fa5f fa8a 	uxtb.w	sl, sl
 800b37c:	3901      	subs	r1, #1
 800b37e:	4652      	mov	r2, sl
 800b380:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b384:	9109      	str	r1, [sp, #36]	@ 0x24
 800b386:	f7ff ff27 	bl	800b1d8 <__exponent>
 800b38a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b38c:	1813      	adds	r3, r2, r0
 800b38e:	2a01      	cmp	r2, #1
 800b390:	4681      	mov	r9, r0
 800b392:	6123      	str	r3, [r4, #16]
 800b394:	dc02      	bgt.n	800b39c <_printf_float+0x150>
 800b396:	6822      	ldr	r2, [r4, #0]
 800b398:	07d2      	lsls	r2, r2, #31
 800b39a:	d501      	bpl.n	800b3a0 <_printf_float+0x154>
 800b39c:	3301      	adds	r3, #1
 800b39e:	6123      	str	r3, [r4, #16]
 800b3a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d0a2      	beq.n	800b2ee <_printf_float+0xa2>
 800b3a8:	232d      	movs	r3, #45	@ 0x2d
 800b3aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3ae:	e79e      	b.n	800b2ee <_printf_float+0xa2>
 800b3b0:	9a06      	ldr	r2, [sp, #24]
 800b3b2:	2a47      	cmp	r2, #71	@ 0x47
 800b3b4:	d1c2      	bne.n	800b33c <_printf_float+0xf0>
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d1c0      	bne.n	800b33c <_printf_float+0xf0>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e7bd      	b.n	800b33a <_printf_float+0xee>
 800b3be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b3c2:	d9db      	bls.n	800b37c <_printf_float+0x130>
 800b3c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b3c8:	d118      	bne.n	800b3fc <_printf_float+0x1b0>
 800b3ca:	2900      	cmp	r1, #0
 800b3cc:	6863      	ldr	r3, [r4, #4]
 800b3ce:	dd0b      	ble.n	800b3e8 <_printf_float+0x19c>
 800b3d0:	6121      	str	r1, [r4, #16]
 800b3d2:	b913      	cbnz	r3, 800b3da <_printf_float+0x18e>
 800b3d4:	6822      	ldr	r2, [r4, #0]
 800b3d6:	07d0      	lsls	r0, r2, #31
 800b3d8:	d502      	bpl.n	800b3e0 <_printf_float+0x194>
 800b3da:	3301      	adds	r3, #1
 800b3dc:	440b      	add	r3, r1
 800b3de:	6123      	str	r3, [r4, #16]
 800b3e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b3e2:	f04f 0900 	mov.w	r9, #0
 800b3e6:	e7db      	b.n	800b3a0 <_printf_float+0x154>
 800b3e8:	b913      	cbnz	r3, 800b3f0 <_printf_float+0x1a4>
 800b3ea:	6822      	ldr	r2, [r4, #0]
 800b3ec:	07d2      	lsls	r2, r2, #31
 800b3ee:	d501      	bpl.n	800b3f4 <_printf_float+0x1a8>
 800b3f0:	3302      	adds	r3, #2
 800b3f2:	e7f4      	b.n	800b3de <_printf_float+0x192>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e7f2      	b.n	800b3de <_printf_float+0x192>
 800b3f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b3fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3fe:	4299      	cmp	r1, r3
 800b400:	db05      	blt.n	800b40e <_printf_float+0x1c2>
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	6121      	str	r1, [r4, #16]
 800b406:	07d8      	lsls	r0, r3, #31
 800b408:	d5ea      	bpl.n	800b3e0 <_printf_float+0x194>
 800b40a:	1c4b      	adds	r3, r1, #1
 800b40c:	e7e7      	b.n	800b3de <_printf_float+0x192>
 800b40e:	2900      	cmp	r1, #0
 800b410:	bfd4      	ite	le
 800b412:	f1c1 0202 	rsble	r2, r1, #2
 800b416:	2201      	movgt	r2, #1
 800b418:	4413      	add	r3, r2
 800b41a:	e7e0      	b.n	800b3de <_printf_float+0x192>
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	055a      	lsls	r2, r3, #21
 800b420:	d407      	bmi.n	800b432 <_printf_float+0x1e6>
 800b422:	6923      	ldr	r3, [r4, #16]
 800b424:	4642      	mov	r2, r8
 800b426:	4631      	mov	r1, r6
 800b428:	4628      	mov	r0, r5
 800b42a:	47b8      	blx	r7
 800b42c:	3001      	adds	r0, #1
 800b42e:	d12b      	bne.n	800b488 <_printf_float+0x23c>
 800b430:	e767      	b.n	800b302 <_printf_float+0xb6>
 800b432:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b436:	f240 80dd 	bls.w	800b5f4 <_printf_float+0x3a8>
 800b43a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b43e:	2200      	movs	r2, #0
 800b440:	2300      	movs	r3, #0
 800b442:	f7f5 fb41 	bl	8000ac8 <__aeabi_dcmpeq>
 800b446:	2800      	cmp	r0, #0
 800b448:	d033      	beq.n	800b4b2 <_printf_float+0x266>
 800b44a:	4a37      	ldr	r2, [pc, #220]	@ (800b528 <_printf_float+0x2dc>)
 800b44c:	2301      	movs	r3, #1
 800b44e:	4631      	mov	r1, r6
 800b450:	4628      	mov	r0, r5
 800b452:	47b8      	blx	r7
 800b454:	3001      	adds	r0, #1
 800b456:	f43f af54 	beq.w	800b302 <_printf_float+0xb6>
 800b45a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b45e:	4543      	cmp	r3, r8
 800b460:	db02      	blt.n	800b468 <_printf_float+0x21c>
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	07d8      	lsls	r0, r3, #31
 800b466:	d50f      	bpl.n	800b488 <_printf_float+0x23c>
 800b468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b46c:	4631      	mov	r1, r6
 800b46e:	4628      	mov	r0, r5
 800b470:	47b8      	blx	r7
 800b472:	3001      	adds	r0, #1
 800b474:	f43f af45 	beq.w	800b302 <_printf_float+0xb6>
 800b478:	f04f 0900 	mov.w	r9, #0
 800b47c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b480:	f104 0a1a 	add.w	sl, r4, #26
 800b484:	45c8      	cmp	r8, r9
 800b486:	dc09      	bgt.n	800b49c <_printf_float+0x250>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	079b      	lsls	r3, r3, #30
 800b48c:	f100 8103 	bmi.w	800b696 <_printf_float+0x44a>
 800b490:	68e0      	ldr	r0, [r4, #12]
 800b492:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b494:	4298      	cmp	r0, r3
 800b496:	bfb8      	it	lt
 800b498:	4618      	movlt	r0, r3
 800b49a:	e734      	b.n	800b306 <_printf_float+0xba>
 800b49c:	2301      	movs	r3, #1
 800b49e:	4652      	mov	r2, sl
 800b4a0:	4631      	mov	r1, r6
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	47b8      	blx	r7
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	f43f af2b 	beq.w	800b302 <_printf_float+0xb6>
 800b4ac:	f109 0901 	add.w	r9, r9, #1
 800b4b0:	e7e8      	b.n	800b484 <_printf_float+0x238>
 800b4b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	dc39      	bgt.n	800b52c <_printf_float+0x2e0>
 800b4b8:	4a1b      	ldr	r2, [pc, #108]	@ (800b528 <_printf_float+0x2dc>)
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	4631      	mov	r1, r6
 800b4be:	4628      	mov	r0, r5
 800b4c0:	47b8      	blx	r7
 800b4c2:	3001      	adds	r0, #1
 800b4c4:	f43f af1d 	beq.w	800b302 <_printf_float+0xb6>
 800b4c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b4cc:	ea59 0303 	orrs.w	r3, r9, r3
 800b4d0:	d102      	bne.n	800b4d8 <_printf_float+0x28c>
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	07d9      	lsls	r1, r3, #31
 800b4d6:	d5d7      	bpl.n	800b488 <_printf_float+0x23c>
 800b4d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4dc:	4631      	mov	r1, r6
 800b4de:	4628      	mov	r0, r5
 800b4e0:	47b8      	blx	r7
 800b4e2:	3001      	adds	r0, #1
 800b4e4:	f43f af0d 	beq.w	800b302 <_printf_float+0xb6>
 800b4e8:	f04f 0a00 	mov.w	sl, #0
 800b4ec:	f104 0b1a 	add.w	fp, r4, #26
 800b4f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4f2:	425b      	negs	r3, r3
 800b4f4:	4553      	cmp	r3, sl
 800b4f6:	dc01      	bgt.n	800b4fc <_printf_float+0x2b0>
 800b4f8:	464b      	mov	r3, r9
 800b4fa:	e793      	b.n	800b424 <_printf_float+0x1d8>
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	465a      	mov	r2, fp
 800b500:	4631      	mov	r1, r6
 800b502:	4628      	mov	r0, r5
 800b504:	47b8      	blx	r7
 800b506:	3001      	adds	r0, #1
 800b508:	f43f aefb 	beq.w	800b302 <_printf_float+0xb6>
 800b50c:	f10a 0a01 	add.w	sl, sl, #1
 800b510:	e7ee      	b.n	800b4f0 <_printf_float+0x2a4>
 800b512:	bf00      	nop
 800b514:	7fefffff 	.word	0x7fefffff
 800b518:	0800da74 	.word	0x0800da74
 800b51c:	0800da70 	.word	0x0800da70
 800b520:	0800da7c 	.word	0x0800da7c
 800b524:	0800da78 	.word	0x0800da78
 800b528:	0800da80 	.word	0x0800da80
 800b52c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b52e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b532:	4553      	cmp	r3, sl
 800b534:	bfa8      	it	ge
 800b536:	4653      	movge	r3, sl
 800b538:	2b00      	cmp	r3, #0
 800b53a:	4699      	mov	r9, r3
 800b53c:	dc36      	bgt.n	800b5ac <_printf_float+0x360>
 800b53e:	f04f 0b00 	mov.w	fp, #0
 800b542:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b546:	f104 021a 	add.w	r2, r4, #26
 800b54a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b54c:	9306      	str	r3, [sp, #24]
 800b54e:	eba3 0309 	sub.w	r3, r3, r9
 800b552:	455b      	cmp	r3, fp
 800b554:	dc31      	bgt.n	800b5ba <_printf_float+0x36e>
 800b556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b558:	459a      	cmp	sl, r3
 800b55a:	dc3a      	bgt.n	800b5d2 <_printf_float+0x386>
 800b55c:	6823      	ldr	r3, [r4, #0]
 800b55e:	07da      	lsls	r2, r3, #31
 800b560:	d437      	bmi.n	800b5d2 <_printf_float+0x386>
 800b562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b564:	ebaa 0903 	sub.w	r9, sl, r3
 800b568:	9b06      	ldr	r3, [sp, #24]
 800b56a:	ebaa 0303 	sub.w	r3, sl, r3
 800b56e:	4599      	cmp	r9, r3
 800b570:	bfa8      	it	ge
 800b572:	4699      	movge	r9, r3
 800b574:	f1b9 0f00 	cmp.w	r9, #0
 800b578:	dc33      	bgt.n	800b5e2 <_printf_float+0x396>
 800b57a:	f04f 0800 	mov.w	r8, #0
 800b57e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b582:	f104 0b1a 	add.w	fp, r4, #26
 800b586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b588:	ebaa 0303 	sub.w	r3, sl, r3
 800b58c:	eba3 0309 	sub.w	r3, r3, r9
 800b590:	4543      	cmp	r3, r8
 800b592:	f77f af79 	ble.w	800b488 <_printf_float+0x23c>
 800b596:	2301      	movs	r3, #1
 800b598:	465a      	mov	r2, fp
 800b59a:	4631      	mov	r1, r6
 800b59c:	4628      	mov	r0, r5
 800b59e:	47b8      	blx	r7
 800b5a0:	3001      	adds	r0, #1
 800b5a2:	f43f aeae 	beq.w	800b302 <_printf_float+0xb6>
 800b5a6:	f108 0801 	add.w	r8, r8, #1
 800b5aa:	e7ec      	b.n	800b586 <_printf_float+0x33a>
 800b5ac:	4642      	mov	r2, r8
 800b5ae:	4631      	mov	r1, r6
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	47b8      	blx	r7
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	d1c2      	bne.n	800b53e <_printf_float+0x2f2>
 800b5b8:	e6a3      	b.n	800b302 <_printf_float+0xb6>
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	4631      	mov	r1, r6
 800b5be:	4628      	mov	r0, r5
 800b5c0:	9206      	str	r2, [sp, #24]
 800b5c2:	47b8      	blx	r7
 800b5c4:	3001      	adds	r0, #1
 800b5c6:	f43f ae9c 	beq.w	800b302 <_printf_float+0xb6>
 800b5ca:	9a06      	ldr	r2, [sp, #24]
 800b5cc:	f10b 0b01 	add.w	fp, fp, #1
 800b5d0:	e7bb      	b.n	800b54a <_printf_float+0x2fe>
 800b5d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	4628      	mov	r0, r5
 800b5da:	47b8      	blx	r7
 800b5dc:	3001      	adds	r0, #1
 800b5de:	d1c0      	bne.n	800b562 <_printf_float+0x316>
 800b5e0:	e68f      	b.n	800b302 <_printf_float+0xb6>
 800b5e2:	9a06      	ldr	r2, [sp, #24]
 800b5e4:	464b      	mov	r3, r9
 800b5e6:	4442      	add	r2, r8
 800b5e8:	4631      	mov	r1, r6
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	47b8      	blx	r7
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	d1c3      	bne.n	800b57a <_printf_float+0x32e>
 800b5f2:	e686      	b.n	800b302 <_printf_float+0xb6>
 800b5f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b5f8:	f1ba 0f01 	cmp.w	sl, #1
 800b5fc:	dc01      	bgt.n	800b602 <_printf_float+0x3b6>
 800b5fe:	07db      	lsls	r3, r3, #31
 800b600:	d536      	bpl.n	800b670 <_printf_float+0x424>
 800b602:	2301      	movs	r3, #1
 800b604:	4642      	mov	r2, r8
 800b606:	4631      	mov	r1, r6
 800b608:	4628      	mov	r0, r5
 800b60a:	47b8      	blx	r7
 800b60c:	3001      	adds	r0, #1
 800b60e:	f43f ae78 	beq.w	800b302 <_printf_float+0xb6>
 800b612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b616:	4631      	mov	r1, r6
 800b618:	4628      	mov	r0, r5
 800b61a:	47b8      	blx	r7
 800b61c:	3001      	adds	r0, #1
 800b61e:	f43f ae70 	beq.w	800b302 <_printf_float+0xb6>
 800b622:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b626:	2200      	movs	r2, #0
 800b628:	2300      	movs	r3, #0
 800b62a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b62e:	f7f5 fa4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b632:	b9c0      	cbnz	r0, 800b666 <_printf_float+0x41a>
 800b634:	4653      	mov	r3, sl
 800b636:	f108 0201 	add.w	r2, r8, #1
 800b63a:	4631      	mov	r1, r6
 800b63c:	4628      	mov	r0, r5
 800b63e:	47b8      	blx	r7
 800b640:	3001      	adds	r0, #1
 800b642:	d10c      	bne.n	800b65e <_printf_float+0x412>
 800b644:	e65d      	b.n	800b302 <_printf_float+0xb6>
 800b646:	2301      	movs	r3, #1
 800b648:	465a      	mov	r2, fp
 800b64a:	4631      	mov	r1, r6
 800b64c:	4628      	mov	r0, r5
 800b64e:	47b8      	blx	r7
 800b650:	3001      	adds	r0, #1
 800b652:	f43f ae56 	beq.w	800b302 <_printf_float+0xb6>
 800b656:	f108 0801 	add.w	r8, r8, #1
 800b65a:	45d0      	cmp	r8, sl
 800b65c:	dbf3      	blt.n	800b646 <_printf_float+0x3fa>
 800b65e:	464b      	mov	r3, r9
 800b660:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b664:	e6df      	b.n	800b426 <_printf_float+0x1da>
 800b666:	f04f 0800 	mov.w	r8, #0
 800b66a:	f104 0b1a 	add.w	fp, r4, #26
 800b66e:	e7f4      	b.n	800b65a <_printf_float+0x40e>
 800b670:	2301      	movs	r3, #1
 800b672:	4642      	mov	r2, r8
 800b674:	e7e1      	b.n	800b63a <_printf_float+0x3ee>
 800b676:	2301      	movs	r3, #1
 800b678:	464a      	mov	r2, r9
 800b67a:	4631      	mov	r1, r6
 800b67c:	4628      	mov	r0, r5
 800b67e:	47b8      	blx	r7
 800b680:	3001      	adds	r0, #1
 800b682:	f43f ae3e 	beq.w	800b302 <_printf_float+0xb6>
 800b686:	f108 0801 	add.w	r8, r8, #1
 800b68a:	68e3      	ldr	r3, [r4, #12]
 800b68c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b68e:	1a5b      	subs	r3, r3, r1
 800b690:	4543      	cmp	r3, r8
 800b692:	dcf0      	bgt.n	800b676 <_printf_float+0x42a>
 800b694:	e6fc      	b.n	800b490 <_printf_float+0x244>
 800b696:	f04f 0800 	mov.w	r8, #0
 800b69a:	f104 0919 	add.w	r9, r4, #25
 800b69e:	e7f4      	b.n	800b68a <_printf_float+0x43e>

0800b6a0 <_printf_common>:
 800b6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a4:	4616      	mov	r6, r2
 800b6a6:	4698      	mov	r8, r3
 800b6a8:	688a      	ldr	r2, [r1, #8]
 800b6aa:	690b      	ldr	r3, [r1, #16]
 800b6ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	bfb8      	it	lt
 800b6b4:	4613      	movlt	r3, r2
 800b6b6:	6033      	str	r3, [r6, #0]
 800b6b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b6bc:	4607      	mov	r7, r0
 800b6be:	460c      	mov	r4, r1
 800b6c0:	b10a      	cbz	r2, 800b6c6 <_printf_common+0x26>
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	6033      	str	r3, [r6, #0]
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	0699      	lsls	r1, r3, #26
 800b6ca:	bf42      	ittt	mi
 800b6cc:	6833      	ldrmi	r3, [r6, #0]
 800b6ce:	3302      	addmi	r3, #2
 800b6d0:	6033      	strmi	r3, [r6, #0]
 800b6d2:	6825      	ldr	r5, [r4, #0]
 800b6d4:	f015 0506 	ands.w	r5, r5, #6
 800b6d8:	d106      	bne.n	800b6e8 <_printf_common+0x48>
 800b6da:	f104 0a19 	add.w	sl, r4, #25
 800b6de:	68e3      	ldr	r3, [r4, #12]
 800b6e0:	6832      	ldr	r2, [r6, #0]
 800b6e2:	1a9b      	subs	r3, r3, r2
 800b6e4:	42ab      	cmp	r3, r5
 800b6e6:	dc26      	bgt.n	800b736 <_printf_common+0x96>
 800b6e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b6ec:	6822      	ldr	r2, [r4, #0]
 800b6ee:	3b00      	subs	r3, #0
 800b6f0:	bf18      	it	ne
 800b6f2:	2301      	movne	r3, #1
 800b6f4:	0692      	lsls	r2, r2, #26
 800b6f6:	d42b      	bmi.n	800b750 <_printf_common+0xb0>
 800b6f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b6fc:	4641      	mov	r1, r8
 800b6fe:	4638      	mov	r0, r7
 800b700:	47c8      	blx	r9
 800b702:	3001      	adds	r0, #1
 800b704:	d01e      	beq.n	800b744 <_printf_common+0xa4>
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	6922      	ldr	r2, [r4, #16]
 800b70a:	f003 0306 	and.w	r3, r3, #6
 800b70e:	2b04      	cmp	r3, #4
 800b710:	bf02      	ittt	eq
 800b712:	68e5      	ldreq	r5, [r4, #12]
 800b714:	6833      	ldreq	r3, [r6, #0]
 800b716:	1aed      	subeq	r5, r5, r3
 800b718:	68a3      	ldr	r3, [r4, #8]
 800b71a:	bf0c      	ite	eq
 800b71c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b720:	2500      	movne	r5, #0
 800b722:	4293      	cmp	r3, r2
 800b724:	bfc4      	itt	gt
 800b726:	1a9b      	subgt	r3, r3, r2
 800b728:	18ed      	addgt	r5, r5, r3
 800b72a:	2600      	movs	r6, #0
 800b72c:	341a      	adds	r4, #26
 800b72e:	42b5      	cmp	r5, r6
 800b730:	d11a      	bne.n	800b768 <_printf_common+0xc8>
 800b732:	2000      	movs	r0, #0
 800b734:	e008      	b.n	800b748 <_printf_common+0xa8>
 800b736:	2301      	movs	r3, #1
 800b738:	4652      	mov	r2, sl
 800b73a:	4641      	mov	r1, r8
 800b73c:	4638      	mov	r0, r7
 800b73e:	47c8      	blx	r9
 800b740:	3001      	adds	r0, #1
 800b742:	d103      	bne.n	800b74c <_printf_common+0xac>
 800b744:	f04f 30ff 	mov.w	r0, #4294967295
 800b748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b74c:	3501      	adds	r5, #1
 800b74e:	e7c6      	b.n	800b6de <_printf_common+0x3e>
 800b750:	18e1      	adds	r1, r4, r3
 800b752:	1c5a      	adds	r2, r3, #1
 800b754:	2030      	movs	r0, #48	@ 0x30
 800b756:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b75a:	4422      	add	r2, r4
 800b75c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b760:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b764:	3302      	adds	r3, #2
 800b766:	e7c7      	b.n	800b6f8 <_printf_common+0x58>
 800b768:	2301      	movs	r3, #1
 800b76a:	4622      	mov	r2, r4
 800b76c:	4641      	mov	r1, r8
 800b76e:	4638      	mov	r0, r7
 800b770:	47c8      	blx	r9
 800b772:	3001      	adds	r0, #1
 800b774:	d0e6      	beq.n	800b744 <_printf_common+0xa4>
 800b776:	3601      	adds	r6, #1
 800b778:	e7d9      	b.n	800b72e <_printf_common+0x8e>
	...

0800b77c <_printf_i>:
 800b77c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b780:	7e0f      	ldrb	r7, [r1, #24]
 800b782:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b784:	2f78      	cmp	r7, #120	@ 0x78
 800b786:	4691      	mov	r9, r2
 800b788:	4680      	mov	r8, r0
 800b78a:	460c      	mov	r4, r1
 800b78c:	469a      	mov	sl, r3
 800b78e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b792:	d807      	bhi.n	800b7a4 <_printf_i+0x28>
 800b794:	2f62      	cmp	r7, #98	@ 0x62
 800b796:	d80a      	bhi.n	800b7ae <_printf_i+0x32>
 800b798:	2f00      	cmp	r7, #0
 800b79a:	f000 80d1 	beq.w	800b940 <_printf_i+0x1c4>
 800b79e:	2f58      	cmp	r7, #88	@ 0x58
 800b7a0:	f000 80b8 	beq.w	800b914 <_printf_i+0x198>
 800b7a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b7ac:	e03a      	b.n	800b824 <_printf_i+0xa8>
 800b7ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b7b2:	2b15      	cmp	r3, #21
 800b7b4:	d8f6      	bhi.n	800b7a4 <_printf_i+0x28>
 800b7b6:	a101      	add	r1, pc, #4	@ (adr r1, 800b7bc <_printf_i+0x40>)
 800b7b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7bc:	0800b815 	.word	0x0800b815
 800b7c0:	0800b829 	.word	0x0800b829
 800b7c4:	0800b7a5 	.word	0x0800b7a5
 800b7c8:	0800b7a5 	.word	0x0800b7a5
 800b7cc:	0800b7a5 	.word	0x0800b7a5
 800b7d0:	0800b7a5 	.word	0x0800b7a5
 800b7d4:	0800b829 	.word	0x0800b829
 800b7d8:	0800b7a5 	.word	0x0800b7a5
 800b7dc:	0800b7a5 	.word	0x0800b7a5
 800b7e0:	0800b7a5 	.word	0x0800b7a5
 800b7e4:	0800b7a5 	.word	0x0800b7a5
 800b7e8:	0800b927 	.word	0x0800b927
 800b7ec:	0800b853 	.word	0x0800b853
 800b7f0:	0800b8e1 	.word	0x0800b8e1
 800b7f4:	0800b7a5 	.word	0x0800b7a5
 800b7f8:	0800b7a5 	.word	0x0800b7a5
 800b7fc:	0800b949 	.word	0x0800b949
 800b800:	0800b7a5 	.word	0x0800b7a5
 800b804:	0800b853 	.word	0x0800b853
 800b808:	0800b7a5 	.word	0x0800b7a5
 800b80c:	0800b7a5 	.word	0x0800b7a5
 800b810:	0800b8e9 	.word	0x0800b8e9
 800b814:	6833      	ldr	r3, [r6, #0]
 800b816:	1d1a      	adds	r2, r3, #4
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	6032      	str	r2, [r6, #0]
 800b81c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b820:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b824:	2301      	movs	r3, #1
 800b826:	e09c      	b.n	800b962 <_printf_i+0x1e6>
 800b828:	6833      	ldr	r3, [r6, #0]
 800b82a:	6820      	ldr	r0, [r4, #0]
 800b82c:	1d19      	adds	r1, r3, #4
 800b82e:	6031      	str	r1, [r6, #0]
 800b830:	0606      	lsls	r6, r0, #24
 800b832:	d501      	bpl.n	800b838 <_printf_i+0xbc>
 800b834:	681d      	ldr	r5, [r3, #0]
 800b836:	e003      	b.n	800b840 <_printf_i+0xc4>
 800b838:	0645      	lsls	r5, r0, #25
 800b83a:	d5fb      	bpl.n	800b834 <_printf_i+0xb8>
 800b83c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b840:	2d00      	cmp	r5, #0
 800b842:	da03      	bge.n	800b84c <_printf_i+0xd0>
 800b844:	232d      	movs	r3, #45	@ 0x2d
 800b846:	426d      	negs	r5, r5
 800b848:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b84c:	4858      	ldr	r0, [pc, #352]	@ (800b9b0 <_printf_i+0x234>)
 800b84e:	230a      	movs	r3, #10
 800b850:	e011      	b.n	800b876 <_printf_i+0xfa>
 800b852:	6821      	ldr	r1, [r4, #0]
 800b854:	6833      	ldr	r3, [r6, #0]
 800b856:	0608      	lsls	r0, r1, #24
 800b858:	f853 5b04 	ldr.w	r5, [r3], #4
 800b85c:	d402      	bmi.n	800b864 <_printf_i+0xe8>
 800b85e:	0649      	lsls	r1, r1, #25
 800b860:	bf48      	it	mi
 800b862:	b2ad      	uxthmi	r5, r5
 800b864:	2f6f      	cmp	r7, #111	@ 0x6f
 800b866:	4852      	ldr	r0, [pc, #328]	@ (800b9b0 <_printf_i+0x234>)
 800b868:	6033      	str	r3, [r6, #0]
 800b86a:	bf14      	ite	ne
 800b86c:	230a      	movne	r3, #10
 800b86e:	2308      	moveq	r3, #8
 800b870:	2100      	movs	r1, #0
 800b872:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b876:	6866      	ldr	r6, [r4, #4]
 800b878:	60a6      	str	r6, [r4, #8]
 800b87a:	2e00      	cmp	r6, #0
 800b87c:	db05      	blt.n	800b88a <_printf_i+0x10e>
 800b87e:	6821      	ldr	r1, [r4, #0]
 800b880:	432e      	orrs	r6, r5
 800b882:	f021 0104 	bic.w	r1, r1, #4
 800b886:	6021      	str	r1, [r4, #0]
 800b888:	d04b      	beq.n	800b922 <_printf_i+0x1a6>
 800b88a:	4616      	mov	r6, r2
 800b88c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b890:	fb03 5711 	mls	r7, r3, r1, r5
 800b894:	5dc7      	ldrb	r7, [r0, r7]
 800b896:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b89a:	462f      	mov	r7, r5
 800b89c:	42bb      	cmp	r3, r7
 800b89e:	460d      	mov	r5, r1
 800b8a0:	d9f4      	bls.n	800b88c <_printf_i+0x110>
 800b8a2:	2b08      	cmp	r3, #8
 800b8a4:	d10b      	bne.n	800b8be <_printf_i+0x142>
 800b8a6:	6823      	ldr	r3, [r4, #0]
 800b8a8:	07df      	lsls	r7, r3, #31
 800b8aa:	d508      	bpl.n	800b8be <_printf_i+0x142>
 800b8ac:	6923      	ldr	r3, [r4, #16]
 800b8ae:	6861      	ldr	r1, [r4, #4]
 800b8b0:	4299      	cmp	r1, r3
 800b8b2:	bfde      	ittt	le
 800b8b4:	2330      	movle	r3, #48	@ 0x30
 800b8b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b8ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b8be:	1b92      	subs	r2, r2, r6
 800b8c0:	6122      	str	r2, [r4, #16]
 800b8c2:	f8cd a000 	str.w	sl, [sp]
 800b8c6:	464b      	mov	r3, r9
 800b8c8:	aa03      	add	r2, sp, #12
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	4640      	mov	r0, r8
 800b8ce:	f7ff fee7 	bl	800b6a0 <_printf_common>
 800b8d2:	3001      	adds	r0, #1
 800b8d4:	d14a      	bne.n	800b96c <_printf_i+0x1f0>
 800b8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b8da:	b004      	add	sp, #16
 800b8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e0:	6823      	ldr	r3, [r4, #0]
 800b8e2:	f043 0320 	orr.w	r3, r3, #32
 800b8e6:	6023      	str	r3, [r4, #0]
 800b8e8:	4832      	ldr	r0, [pc, #200]	@ (800b9b4 <_printf_i+0x238>)
 800b8ea:	2778      	movs	r7, #120	@ 0x78
 800b8ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	6831      	ldr	r1, [r6, #0]
 800b8f4:	061f      	lsls	r7, r3, #24
 800b8f6:	f851 5b04 	ldr.w	r5, [r1], #4
 800b8fa:	d402      	bmi.n	800b902 <_printf_i+0x186>
 800b8fc:	065f      	lsls	r7, r3, #25
 800b8fe:	bf48      	it	mi
 800b900:	b2ad      	uxthmi	r5, r5
 800b902:	6031      	str	r1, [r6, #0]
 800b904:	07d9      	lsls	r1, r3, #31
 800b906:	bf44      	itt	mi
 800b908:	f043 0320 	orrmi.w	r3, r3, #32
 800b90c:	6023      	strmi	r3, [r4, #0]
 800b90e:	b11d      	cbz	r5, 800b918 <_printf_i+0x19c>
 800b910:	2310      	movs	r3, #16
 800b912:	e7ad      	b.n	800b870 <_printf_i+0xf4>
 800b914:	4826      	ldr	r0, [pc, #152]	@ (800b9b0 <_printf_i+0x234>)
 800b916:	e7e9      	b.n	800b8ec <_printf_i+0x170>
 800b918:	6823      	ldr	r3, [r4, #0]
 800b91a:	f023 0320 	bic.w	r3, r3, #32
 800b91e:	6023      	str	r3, [r4, #0]
 800b920:	e7f6      	b.n	800b910 <_printf_i+0x194>
 800b922:	4616      	mov	r6, r2
 800b924:	e7bd      	b.n	800b8a2 <_printf_i+0x126>
 800b926:	6833      	ldr	r3, [r6, #0]
 800b928:	6825      	ldr	r5, [r4, #0]
 800b92a:	6961      	ldr	r1, [r4, #20]
 800b92c:	1d18      	adds	r0, r3, #4
 800b92e:	6030      	str	r0, [r6, #0]
 800b930:	062e      	lsls	r6, r5, #24
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	d501      	bpl.n	800b93a <_printf_i+0x1be>
 800b936:	6019      	str	r1, [r3, #0]
 800b938:	e002      	b.n	800b940 <_printf_i+0x1c4>
 800b93a:	0668      	lsls	r0, r5, #25
 800b93c:	d5fb      	bpl.n	800b936 <_printf_i+0x1ba>
 800b93e:	8019      	strh	r1, [r3, #0]
 800b940:	2300      	movs	r3, #0
 800b942:	6123      	str	r3, [r4, #16]
 800b944:	4616      	mov	r6, r2
 800b946:	e7bc      	b.n	800b8c2 <_printf_i+0x146>
 800b948:	6833      	ldr	r3, [r6, #0]
 800b94a:	1d1a      	adds	r2, r3, #4
 800b94c:	6032      	str	r2, [r6, #0]
 800b94e:	681e      	ldr	r6, [r3, #0]
 800b950:	6862      	ldr	r2, [r4, #4]
 800b952:	2100      	movs	r1, #0
 800b954:	4630      	mov	r0, r6
 800b956:	f7f4 fc3b 	bl	80001d0 <memchr>
 800b95a:	b108      	cbz	r0, 800b960 <_printf_i+0x1e4>
 800b95c:	1b80      	subs	r0, r0, r6
 800b95e:	6060      	str	r0, [r4, #4]
 800b960:	6863      	ldr	r3, [r4, #4]
 800b962:	6123      	str	r3, [r4, #16]
 800b964:	2300      	movs	r3, #0
 800b966:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b96a:	e7aa      	b.n	800b8c2 <_printf_i+0x146>
 800b96c:	6923      	ldr	r3, [r4, #16]
 800b96e:	4632      	mov	r2, r6
 800b970:	4649      	mov	r1, r9
 800b972:	4640      	mov	r0, r8
 800b974:	47d0      	blx	sl
 800b976:	3001      	adds	r0, #1
 800b978:	d0ad      	beq.n	800b8d6 <_printf_i+0x15a>
 800b97a:	6823      	ldr	r3, [r4, #0]
 800b97c:	079b      	lsls	r3, r3, #30
 800b97e:	d413      	bmi.n	800b9a8 <_printf_i+0x22c>
 800b980:	68e0      	ldr	r0, [r4, #12]
 800b982:	9b03      	ldr	r3, [sp, #12]
 800b984:	4298      	cmp	r0, r3
 800b986:	bfb8      	it	lt
 800b988:	4618      	movlt	r0, r3
 800b98a:	e7a6      	b.n	800b8da <_printf_i+0x15e>
 800b98c:	2301      	movs	r3, #1
 800b98e:	4632      	mov	r2, r6
 800b990:	4649      	mov	r1, r9
 800b992:	4640      	mov	r0, r8
 800b994:	47d0      	blx	sl
 800b996:	3001      	adds	r0, #1
 800b998:	d09d      	beq.n	800b8d6 <_printf_i+0x15a>
 800b99a:	3501      	adds	r5, #1
 800b99c:	68e3      	ldr	r3, [r4, #12]
 800b99e:	9903      	ldr	r1, [sp, #12]
 800b9a0:	1a5b      	subs	r3, r3, r1
 800b9a2:	42ab      	cmp	r3, r5
 800b9a4:	dcf2      	bgt.n	800b98c <_printf_i+0x210>
 800b9a6:	e7eb      	b.n	800b980 <_printf_i+0x204>
 800b9a8:	2500      	movs	r5, #0
 800b9aa:	f104 0619 	add.w	r6, r4, #25
 800b9ae:	e7f5      	b.n	800b99c <_printf_i+0x220>
 800b9b0:	0800da82 	.word	0x0800da82
 800b9b4:	0800da93 	.word	0x0800da93

0800b9b8 <std>:
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	b510      	push	{r4, lr}
 800b9bc:	4604      	mov	r4, r0
 800b9be:	e9c0 3300 	strd	r3, r3, [r0]
 800b9c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9c6:	6083      	str	r3, [r0, #8]
 800b9c8:	8181      	strh	r1, [r0, #12]
 800b9ca:	6643      	str	r3, [r0, #100]	@ 0x64
 800b9cc:	81c2      	strh	r2, [r0, #14]
 800b9ce:	6183      	str	r3, [r0, #24]
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	2208      	movs	r2, #8
 800b9d4:	305c      	adds	r0, #92	@ 0x5c
 800b9d6:	f000 f8f4 	bl	800bbc2 <memset>
 800b9da:	4b0d      	ldr	r3, [pc, #52]	@ (800ba10 <std+0x58>)
 800b9dc:	6263      	str	r3, [r4, #36]	@ 0x24
 800b9de:	4b0d      	ldr	r3, [pc, #52]	@ (800ba14 <std+0x5c>)
 800b9e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b9e2:	4b0d      	ldr	r3, [pc, #52]	@ (800ba18 <std+0x60>)
 800b9e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b9e6:	4b0d      	ldr	r3, [pc, #52]	@ (800ba1c <std+0x64>)
 800b9e8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b9ea:	4b0d      	ldr	r3, [pc, #52]	@ (800ba20 <std+0x68>)
 800b9ec:	6224      	str	r4, [r4, #32]
 800b9ee:	429c      	cmp	r4, r3
 800b9f0:	d006      	beq.n	800ba00 <std+0x48>
 800b9f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b9f6:	4294      	cmp	r4, r2
 800b9f8:	d002      	beq.n	800ba00 <std+0x48>
 800b9fa:	33d0      	adds	r3, #208	@ 0xd0
 800b9fc:	429c      	cmp	r4, r3
 800b9fe:	d105      	bne.n	800ba0c <std+0x54>
 800ba00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ba04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba08:	f000 b958 	b.w	800bcbc <__retarget_lock_init_recursive>
 800ba0c:	bd10      	pop	{r4, pc}
 800ba0e:	bf00      	nop
 800ba10:	0800bb3d 	.word	0x0800bb3d
 800ba14:	0800bb5f 	.word	0x0800bb5f
 800ba18:	0800bb97 	.word	0x0800bb97
 800ba1c:	0800bbbb 	.word	0x0800bbbb
 800ba20:	200004e8 	.word	0x200004e8

0800ba24 <stdio_exit_handler>:
 800ba24:	4a02      	ldr	r2, [pc, #8]	@ (800ba30 <stdio_exit_handler+0xc>)
 800ba26:	4903      	ldr	r1, [pc, #12]	@ (800ba34 <stdio_exit_handler+0x10>)
 800ba28:	4803      	ldr	r0, [pc, #12]	@ (800ba38 <stdio_exit_handler+0x14>)
 800ba2a:	f000 b869 	b.w	800bb00 <_fwalk_sglue>
 800ba2e:	bf00      	nop
 800ba30:	20000020 	.word	0x20000020
 800ba34:	0800d375 	.word	0x0800d375
 800ba38:	20000030 	.word	0x20000030

0800ba3c <cleanup_stdio>:
 800ba3c:	6841      	ldr	r1, [r0, #4]
 800ba3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ba70 <cleanup_stdio+0x34>)
 800ba40:	4299      	cmp	r1, r3
 800ba42:	b510      	push	{r4, lr}
 800ba44:	4604      	mov	r4, r0
 800ba46:	d001      	beq.n	800ba4c <cleanup_stdio+0x10>
 800ba48:	f001 fc94 	bl	800d374 <_fflush_r>
 800ba4c:	68a1      	ldr	r1, [r4, #8]
 800ba4e:	4b09      	ldr	r3, [pc, #36]	@ (800ba74 <cleanup_stdio+0x38>)
 800ba50:	4299      	cmp	r1, r3
 800ba52:	d002      	beq.n	800ba5a <cleanup_stdio+0x1e>
 800ba54:	4620      	mov	r0, r4
 800ba56:	f001 fc8d 	bl	800d374 <_fflush_r>
 800ba5a:	68e1      	ldr	r1, [r4, #12]
 800ba5c:	4b06      	ldr	r3, [pc, #24]	@ (800ba78 <cleanup_stdio+0x3c>)
 800ba5e:	4299      	cmp	r1, r3
 800ba60:	d004      	beq.n	800ba6c <cleanup_stdio+0x30>
 800ba62:	4620      	mov	r0, r4
 800ba64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba68:	f001 bc84 	b.w	800d374 <_fflush_r>
 800ba6c:	bd10      	pop	{r4, pc}
 800ba6e:	bf00      	nop
 800ba70:	200004e8 	.word	0x200004e8
 800ba74:	20000550 	.word	0x20000550
 800ba78:	200005b8 	.word	0x200005b8

0800ba7c <global_stdio_init.part.0>:
 800ba7c:	b510      	push	{r4, lr}
 800ba7e:	4b0b      	ldr	r3, [pc, #44]	@ (800baac <global_stdio_init.part.0+0x30>)
 800ba80:	4c0b      	ldr	r4, [pc, #44]	@ (800bab0 <global_stdio_init.part.0+0x34>)
 800ba82:	4a0c      	ldr	r2, [pc, #48]	@ (800bab4 <global_stdio_init.part.0+0x38>)
 800ba84:	601a      	str	r2, [r3, #0]
 800ba86:	4620      	mov	r0, r4
 800ba88:	2200      	movs	r2, #0
 800ba8a:	2104      	movs	r1, #4
 800ba8c:	f7ff ff94 	bl	800b9b8 <std>
 800ba90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ba94:	2201      	movs	r2, #1
 800ba96:	2109      	movs	r1, #9
 800ba98:	f7ff ff8e 	bl	800b9b8 <std>
 800ba9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800baa0:	2202      	movs	r2, #2
 800baa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baa6:	2112      	movs	r1, #18
 800baa8:	f7ff bf86 	b.w	800b9b8 <std>
 800baac:	20000620 	.word	0x20000620
 800bab0:	200004e8 	.word	0x200004e8
 800bab4:	0800ba25 	.word	0x0800ba25

0800bab8 <__sfp_lock_acquire>:
 800bab8:	4801      	ldr	r0, [pc, #4]	@ (800bac0 <__sfp_lock_acquire+0x8>)
 800baba:	f000 b900 	b.w	800bcbe <__retarget_lock_acquire_recursive>
 800babe:	bf00      	nop
 800bac0:	20000629 	.word	0x20000629

0800bac4 <__sfp_lock_release>:
 800bac4:	4801      	ldr	r0, [pc, #4]	@ (800bacc <__sfp_lock_release+0x8>)
 800bac6:	f000 b8fb 	b.w	800bcc0 <__retarget_lock_release_recursive>
 800baca:	bf00      	nop
 800bacc:	20000629 	.word	0x20000629

0800bad0 <__sinit>:
 800bad0:	b510      	push	{r4, lr}
 800bad2:	4604      	mov	r4, r0
 800bad4:	f7ff fff0 	bl	800bab8 <__sfp_lock_acquire>
 800bad8:	6a23      	ldr	r3, [r4, #32]
 800bada:	b11b      	cbz	r3, 800bae4 <__sinit+0x14>
 800badc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bae0:	f7ff bff0 	b.w	800bac4 <__sfp_lock_release>
 800bae4:	4b04      	ldr	r3, [pc, #16]	@ (800baf8 <__sinit+0x28>)
 800bae6:	6223      	str	r3, [r4, #32]
 800bae8:	4b04      	ldr	r3, [pc, #16]	@ (800bafc <__sinit+0x2c>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d1f5      	bne.n	800badc <__sinit+0xc>
 800baf0:	f7ff ffc4 	bl	800ba7c <global_stdio_init.part.0>
 800baf4:	e7f2      	b.n	800badc <__sinit+0xc>
 800baf6:	bf00      	nop
 800baf8:	0800ba3d 	.word	0x0800ba3d
 800bafc:	20000620 	.word	0x20000620

0800bb00 <_fwalk_sglue>:
 800bb00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb04:	4607      	mov	r7, r0
 800bb06:	4688      	mov	r8, r1
 800bb08:	4614      	mov	r4, r2
 800bb0a:	2600      	movs	r6, #0
 800bb0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb10:	f1b9 0901 	subs.w	r9, r9, #1
 800bb14:	d505      	bpl.n	800bb22 <_fwalk_sglue+0x22>
 800bb16:	6824      	ldr	r4, [r4, #0]
 800bb18:	2c00      	cmp	r4, #0
 800bb1a:	d1f7      	bne.n	800bb0c <_fwalk_sglue+0xc>
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb22:	89ab      	ldrh	r3, [r5, #12]
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d907      	bls.n	800bb38 <_fwalk_sglue+0x38>
 800bb28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	d003      	beq.n	800bb38 <_fwalk_sglue+0x38>
 800bb30:	4629      	mov	r1, r5
 800bb32:	4638      	mov	r0, r7
 800bb34:	47c0      	blx	r8
 800bb36:	4306      	orrs	r6, r0
 800bb38:	3568      	adds	r5, #104	@ 0x68
 800bb3a:	e7e9      	b.n	800bb10 <_fwalk_sglue+0x10>

0800bb3c <__sread>:
 800bb3c:	b510      	push	{r4, lr}
 800bb3e:	460c      	mov	r4, r1
 800bb40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb44:	f000 f86c 	bl	800bc20 <_read_r>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	bfab      	itete	ge
 800bb4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bb4e:	89a3      	ldrhlt	r3, [r4, #12]
 800bb50:	181b      	addge	r3, r3, r0
 800bb52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bb56:	bfac      	ite	ge
 800bb58:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bb5a:	81a3      	strhlt	r3, [r4, #12]
 800bb5c:	bd10      	pop	{r4, pc}

0800bb5e <__swrite>:
 800bb5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb62:	461f      	mov	r7, r3
 800bb64:	898b      	ldrh	r3, [r1, #12]
 800bb66:	05db      	lsls	r3, r3, #23
 800bb68:	4605      	mov	r5, r0
 800bb6a:	460c      	mov	r4, r1
 800bb6c:	4616      	mov	r6, r2
 800bb6e:	d505      	bpl.n	800bb7c <__swrite+0x1e>
 800bb70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb74:	2302      	movs	r3, #2
 800bb76:	2200      	movs	r2, #0
 800bb78:	f000 f840 	bl	800bbfc <_lseek_r>
 800bb7c:	89a3      	ldrh	r3, [r4, #12]
 800bb7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bb86:	81a3      	strh	r3, [r4, #12]
 800bb88:	4632      	mov	r2, r6
 800bb8a:	463b      	mov	r3, r7
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb92:	f000 b857 	b.w	800bc44 <_write_r>

0800bb96 <__sseek>:
 800bb96:	b510      	push	{r4, lr}
 800bb98:	460c      	mov	r4, r1
 800bb9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb9e:	f000 f82d 	bl	800bbfc <_lseek_r>
 800bba2:	1c43      	adds	r3, r0, #1
 800bba4:	89a3      	ldrh	r3, [r4, #12]
 800bba6:	bf15      	itete	ne
 800bba8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bbaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bbae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bbb2:	81a3      	strheq	r3, [r4, #12]
 800bbb4:	bf18      	it	ne
 800bbb6:	81a3      	strhne	r3, [r4, #12]
 800bbb8:	bd10      	pop	{r4, pc}

0800bbba <__sclose>:
 800bbba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbbe:	f000 b80d 	b.w	800bbdc <_close_r>

0800bbc2 <memset>:
 800bbc2:	4402      	add	r2, r0
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d100      	bne.n	800bbcc <memset+0xa>
 800bbca:	4770      	bx	lr
 800bbcc:	f803 1b01 	strb.w	r1, [r3], #1
 800bbd0:	e7f9      	b.n	800bbc6 <memset+0x4>
	...

0800bbd4 <_localeconv_r>:
 800bbd4:	4800      	ldr	r0, [pc, #0]	@ (800bbd8 <_localeconv_r+0x4>)
 800bbd6:	4770      	bx	lr
 800bbd8:	2000016c 	.word	0x2000016c

0800bbdc <_close_r>:
 800bbdc:	b538      	push	{r3, r4, r5, lr}
 800bbde:	4d06      	ldr	r5, [pc, #24]	@ (800bbf8 <_close_r+0x1c>)
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	4608      	mov	r0, r1
 800bbe6:	602b      	str	r3, [r5, #0]
 800bbe8:	f7f6 fb9c 	bl	8002324 <_close>
 800bbec:	1c43      	adds	r3, r0, #1
 800bbee:	d102      	bne.n	800bbf6 <_close_r+0x1a>
 800bbf0:	682b      	ldr	r3, [r5, #0]
 800bbf2:	b103      	cbz	r3, 800bbf6 <_close_r+0x1a>
 800bbf4:	6023      	str	r3, [r4, #0]
 800bbf6:	bd38      	pop	{r3, r4, r5, pc}
 800bbf8:	20000624 	.word	0x20000624

0800bbfc <_lseek_r>:
 800bbfc:	b538      	push	{r3, r4, r5, lr}
 800bbfe:	4d07      	ldr	r5, [pc, #28]	@ (800bc1c <_lseek_r+0x20>)
 800bc00:	4604      	mov	r4, r0
 800bc02:	4608      	mov	r0, r1
 800bc04:	4611      	mov	r1, r2
 800bc06:	2200      	movs	r2, #0
 800bc08:	602a      	str	r2, [r5, #0]
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	f7f6 fbb1 	bl	8002372 <_lseek>
 800bc10:	1c43      	adds	r3, r0, #1
 800bc12:	d102      	bne.n	800bc1a <_lseek_r+0x1e>
 800bc14:	682b      	ldr	r3, [r5, #0]
 800bc16:	b103      	cbz	r3, 800bc1a <_lseek_r+0x1e>
 800bc18:	6023      	str	r3, [r4, #0]
 800bc1a:	bd38      	pop	{r3, r4, r5, pc}
 800bc1c:	20000624 	.word	0x20000624

0800bc20 <_read_r>:
 800bc20:	b538      	push	{r3, r4, r5, lr}
 800bc22:	4d07      	ldr	r5, [pc, #28]	@ (800bc40 <_read_r+0x20>)
 800bc24:	4604      	mov	r4, r0
 800bc26:	4608      	mov	r0, r1
 800bc28:	4611      	mov	r1, r2
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	602a      	str	r2, [r5, #0]
 800bc2e:	461a      	mov	r2, r3
 800bc30:	f7f6 fb3f 	bl	80022b2 <_read>
 800bc34:	1c43      	adds	r3, r0, #1
 800bc36:	d102      	bne.n	800bc3e <_read_r+0x1e>
 800bc38:	682b      	ldr	r3, [r5, #0]
 800bc3a:	b103      	cbz	r3, 800bc3e <_read_r+0x1e>
 800bc3c:	6023      	str	r3, [r4, #0]
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	20000624 	.word	0x20000624

0800bc44 <_write_r>:
 800bc44:	b538      	push	{r3, r4, r5, lr}
 800bc46:	4d07      	ldr	r5, [pc, #28]	@ (800bc64 <_write_r+0x20>)
 800bc48:	4604      	mov	r4, r0
 800bc4a:	4608      	mov	r0, r1
 800bc4c:	4611      	mov	r1, r2
 800bc4e:	2200      	movs	r2, #0
 800bc50:	602a      	str	r2, [r5, #0]
 800bc52:	461a      	mov	r2, r3
 800bc54:	f7f6 fb4a 	bl	80022ec <_write>
 800bc58:	1c43      	adds	r3, r0, #1
 800bc5a:	d102      	bne.n	800bc62 <_write_r+0x1e>
 800bc5c:	682b      	ldr	r3, [r5, #0]
 800bc5e:	b103      	cbz	r3, 800bc62 <_write_r+0x1e>
 800bc60:	6023      	str	r3, [r4, #0]
 800bc62:	bd38      	pop	{r3, r4, r5, pc}
 800bc64:	20000624 	.word	0x20000624

0800bc68 <__errno>:
 800bc68:	4b01      	ldr	r3, [pc, #4]	@ (800bc70 <__errno+0x8>)
 800bc6a:	6818      	ldr	r0, [r3, #0]
 800bc6c:	4770      	bx	lr
 800bc6e:	bf00      	nop
 800bc70:	2000002c 	.word	0x2000002c

0800bc74 <__libc_init_array>:
 800bc74:	b570      	push	{r4, r5, r6, lr}
 800bc76:	4d0d      	ldr	r5, [pc, #52]	@ (800bcac <__libc_init_array+0x38>)
 800bc78:	4c0d      	ldr	r4, [pc, #52]	@ (800bcb0 <__libc_init_array+0x3c>)
 800bc7a:	1b64      	subs	r4, r4, r5
 800bc7c:	10a4      	asrs	r4, r4, #2
 800bc7e:	2600      	movs	r6, #0
 800bc80:	42a6      	cmp	r6, r4
 800bc82:	d109      	bne.n	800bc98 <__libc_init_array+0x24>
 800bc84:	4d0b      	ldr	r5, [pc, #44]	@ (800bcb4 <__libc_init_array+0x40>)
 800bc86:	4c0c      	ldr	r4, [pc, #48]	@ (800bcb8 <__libc_init_array+0x44>)
 800bc88:	f001 fec2 	bl	800da10 <_init>
 800bc8c:	1b64      	subs	r4, r4, r5
 800bc8e:	10a4      	asrs	r4, r4, #2
 800bc90:	2600      	movs	r6, #0
 800bc92:	42a6      	cmp	r6, r4
 800bc94:	d105      	bne.n	800bca2 <__libc_init_array+0x2e>
 800bc96:	bd70      	pop	{r4, r5, r6, pc}
 800bc98:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc9c:	4798      	blx	r3
 800bc9e:	3601      	adds	r6, #1
 800bca0:	e7ee      	b.n	800bc80 <__libc_init_array+0xc>
 800bca2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bca6:	4798      	blx	r3
 800bca8:	3601      	adds	r6, #1
 800bcaa:	e7f2      	b.n	800bc92 <__libc_init_array+0x1e>
 800bcac:	0800ddec 	.word	0x0800ddec
 800bcb0:	0800ddec 	.word	0x0800ddec
 800bcb4:	0800ddec 	.word	0x0800ddec
 800bcb8:	0800ddf0 	.word	0x0800ddf0

0800bcbc <__retarget_lock_init_recursive>:
 800bcbc:	4770      	bx	lr

0800bcbe <__retarget_lock_acquire_recursive>:
 800bcbe:	4770      	bx	lr

0800bcc0 <__retarget_lock_release_recursive>:
 800bcc0:	4770      	bx	lr

0800bcc2 <quorem>:
 800bcc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc6:	6903      	ldr	r3, [r0, #16]
 800bcc8:	690c      	ldr	r4, [r1, #16]
 800bcca:	42a3      	cmp	r3, r4
 800bccc:	4607      	mov	r7, r0
 800bcce:	db7e      	blt.n	800bdce <quorem+0x10c>
 800bcd0:	3c01      	subs	r4, #1
 800bcd2:	f101 0814 	add.w	r8, r1, #20
 800bcd6:	00a3      	lsls	r3, r4, #2
 800bcd8:	f100 0514 	add.w	r5, r0, #20
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bce2:	9301      	str	r3, [sp, #4]
 800bce4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bce8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcec:	3301      	adds	r3, #1
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bcf4:	fbb2 f6f3 	udiv	r6, r2, r3
 800bcf8:	d32e      	bcc.n	800bd58 <quorem+0x96>
 800bcfa:	f04f 0a00 	mov.w	sl, #0
 800bcfe:	46c4      	mov	ip, r8
 800bd00:	46ae      	mov	lr, r5
 800bd02:	46d3      	mov	fp, sl
 800bd04:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd08:	b298      	uxth	r0, r3
 800bd0a:	fb06 a000 	mla	r0, r6, r0, sl
 800bd0e:	0c02      	lsrs	r2, r0, #16
 800bd10:	0c1b      	lsrs	r3, r3, #16
 800bd12:	fb06 2303 	mla	r3, r6, r3, r2
 800bd16:	f8de 2000 	ldr.w	r2, [lr]
 800bd1a:	b280      	uxth	r0, r0
 800bd1c:	b292      	uxth	r2, r2
 800bd1e:	1a12      	subs	r2, r2, r0
 800bd20:	445a      	add	r2, fp
 800bd22:	f8de 0000 	ldr.w	r0, [lr]
 800bd26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bd30:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bd34:	b292      	uxth	r2, r2
 800bd36:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bd3a:	45e1      	cmp	r9, ip
 800bd3c:	f84e 2b04 	str.w	r2, [lr], #4
 800bd40:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bd44:	d2de      	bcs.n	800bd04 <quorem+0x42>
 800bd46:	9b00      	ldr	r3, [sp, #0]
 800bd48:	58eb      	ldr	r3, [r5, r3]
 800bd4a:	b92b      	cbnz	r3, 800bd58 <quorem+0x96>
 800bd4c:	9b01      	ldr	r3, [sp, #4]
 800bd4e:	3b04      	subs	r3, #4
 800bd50:	429d      	cmp	r5, r3
 800bd52:	461a      	mov	r2, r3
 800bd54:	d32f      	bcc.n	800bdb6 <quorem+0xf4>
 800bd56:	613c      	str	r4, [r7, #16]
 800bd58:	4638      	mov	r0, r7
 800bd5a:	f001 f97f 	bl	800d05c <__mcmp>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	db25      	blt.n	800bdae <quorem+0xec>
 800bd62:	4629      	mov	r1, r5
 800bd64:	2000      	movs	r0, #0
 800bd66:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd6a:	f8d1 c000 	ldr.w	ip, [r1]
 800bd6e:	fa1f fe82 	uxth.w	lr, r2
 800bd72:	fa1f f38c 	uxth.w	r3, ip
 800bd76:	eba3 030e 	sub.w	r3, r3, lr
 800bd7a:	4403      	add	r3, r0
 800bd7c:	0c12      	lsrs	r2, r2, #16
 800bd7e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bd82:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd8c:	45c1      	cmp	r9, r8
 800bd8e:	f841 3b04 	str.w	r3, [r1], #4
 800bd92:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bd96:	d2e6      	bcs.n	800bd66 <quorem+0xa4>
 800bd98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bda0:	b922      	cbnz	r2, 800bdac <quorem+0xea>
 800bda2:	3b04      	subs	r3, #4
 800bda4:	429d      	cmp	r5, r3
 800bda6:	461a      	mov	r2, r3
 800bda8:	d30b      	bcc.n	800bdc2 <quorem+0x100>
 800bdaa:	613c      	str	r4, [r7, #16]
 800bdac:	3601      	adds	r6, #1
 800bdae:	4630      	mov	r0, r6
 800bdb0:	b003      	add	sp, #12
 800bdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb6:	6812      	ldr	r2, [r2, #0]
 800bdb8:	3b04      	subs	r3, #4
 800bdba:	2a00      	cmp	r2, #0
 800bdbc:	d1cb      	bne.n	800bd56 <quorem+0x94>
 800bdbe:	3c01      	subs	r4, #1
 800bdc0:	e7c6      	b.n	800bd50 <quorem+0x8e>
 800bdc2:	6812      	ldr	r2, [r2, #0]
 800bdc4:	3b04      	subs	r3, #4
 800bdc6:	2a00      	cmp	r2, #0
 800bdc8:	d1ef      	bne.n	800bdaa <quorem+0xe8>
 800bdca:	3c01      	subs	r4, #1
 800bdcc:	e7ea      	b.n	800bda4 <quorem+0xe2>
 800bdce:	2000      	movs	r0, #0
 800bdd0:	e7ee      	b.n	800bdb0 <quorem+0xee>
 800bdd2:	0000      	movs	r0, r0
 800bdd4:	0000      	movs	r0, r0
	...

0800bdd8 <_dtoa_r>:
 800bdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bddc:	69c7      	ldr	r7, [r0, #28]
 800bdde:	b097      	sub	sp, #92	@ 0x5c
 800bde0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bde4:	ec55 4b10 	vmov	r4, r5, d0
 800bde8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bdea:	9107      	str	r1, [sp, #28]
 800bdec:	4681      	mov	r9, r0
 800bdee:	920c      	str	r2, [sp, #48]	@ 0x30
 800bdf0:	9311      	str	r3, [sp, #68]	@ 0x44
 800bdf2:	b97f      	cbnz	r7, 800be14 <_dtoa_r+0x3c>
 800bdf4:	2010      	movs	r0, #16
 800bdf6:	f000 fe09 	bl	800ca0c <malloc>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	f8c9 001c 	str.w	r0, [r9, #28]
 800be00:	b920      	cbnz	r0, 800be0c <_dtoa_r+0x34>
 800be02:	4ba9      	ldr	r3, [pc, #676]	@ (800c0a8 <_dtoa_r+0x2d0>)
 800be04:	21ef      	movs	r1, #239	@ 0xef
 800be06:	48a9      	ldr	r0, [pc, #676]	@ (800c0ac <_dtoa_r+0x2d4>)
 800be08:	f001 fafa 	bl	800d400 <__assert_func>
 800be0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800be10:	6007      	str	r7, [r0, #0]
 800be12:	60c7      	str	r7, [r0, #12]
 800be14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800be18:	6819      	ldr	r1, [r3, #0]
 800be1a:	b159      	cbz	r1, 800be34 <_dtoa_r+0x5c>
 800be1c:	685a      	ldr	r2, [r3, #4]
 800be1e:	604a      	str	r2, [r1, #4]
 800be20:	2301      	movs	r3, #1
 800be22:	4093      	lsls	r3, r2
 800be24:	608b      	str	r3, [r1, #8]
 800be26:	4648      	mov	r0, r9
 800be28:	f000 fee6 	bl	800cbf8 <_Bfree>
 800be2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800be30:	2200      	movs	r2, #0
 800be32:	601a      	str	r2, [r3, #0]
 800be34:	1e2b      	subs	r3, r5, #0
 800be36:	bfb9      	ittee	lt
 800be38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800be3c:	9305      	strlt	r3, [sp, #20]
 800be3e:	2300      	movge	r3, #0
 800be40:	6033      	strge	r3, [r6, #0]
 800be42:	9f05      	ldr	r7, [sp, #20]
 800be44:	4b9a      	ldr	r3, [pc, #616]	@ (800c0b0 <_dtoa_r+0x2d8>)
 800be46:	bfbc      	itt	lt
 800be48:	2201      	movlt	r2, #1
 800be4a:	6032      	strlt	r2, [r6, #0]
 800be4c:	43bb      	bics	r3, r7
 800be4e:	d112      	bne.n	800be76 <_dtoa_r+0x9e>
 800be50:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800be52:	f242 730f 	movw	r3, #9999	@ 0x270f
 800be56:	6013      	str	r3, [r2, #0]
 800be58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be5c:	4323      	orrs	r3, r4
 800be5e:	f000 855a 	beq.w	800c916 <_dtoa_r+0xb3e>
 800be62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be64:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c0c4 <_dtoa_r+0x2ec>
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 855c 	beq.w	800c926 <_dtoa_r+0xb4e>
 800be6e:	f10a 0303 	add.w	r3, sl, #3
 800be72:	f000 bd56 	b.w	800c922 <_dtoa_r+0xb4a>
 800be76:	ed9d 7b04 	vldr	d7, [sp, #16]
 800be7a:	2200      	movs	r2, #0
 800be7c:	ec51 0b17 	vmov	r0, r1, d7
 800be80:	2300      	movs	r3, #0
 800be82:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800be86:	f7f4 fe1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800be8a:	4680      	mov	r8, r0
 800be8c:	b158      	cbz	r0, 800bea6 <_dtoa_r+0xce>
 800be8e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800be90:	2301      	movs	r3, #1
 800be92:	6013      	str	r3, [r2, #0]
 800be94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be96:	b113      	cbz	r3, 800be9e <_dtoa_r+0xc6>
 800be98:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800be9a:	4b86      	ldr	r3, [pc, #536]	@ (800c0b4 <_dtoa_r+0x2dc>)
 800be9c:	6013      	str	r3, [r2, #0]
 800be9e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c0c8 <_dtoa_r+0x2f0>
 800bea2:	f000 bd40 	b.w	800c926 <_dtoa_r+0xb4e>
 800bea6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800beaa:	aa14      	add	r2, sp, #80	@ 0x50
 800beac:	a915      	add	r1, sp, #84	@ 0x54
 800beae:	4648      	mov	r0, r9
 800beb0:	f001 f984 	bl	800d1bc <__d2b>
 800beb4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800beb8:	9002      	str	r0, [sp, #8]
 800beba:	2e00      	cmp	r6, #0
 800bebc:	d078      	beq.n	800bfb0 <_dtoa_r+0x1d8>
 800bebe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bec0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bec8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800becc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bed0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bed4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bed8:	4619      	mov	r1, r3
 800beda:	2200      	movs	r2, #0
 800bedc:	4b76      	ldr	r3, [pc, #472]	@ (800c0b8 <_dtoa_r+0x2e0>)
 800bede:	f7f4 f9d3 	bl	8000288 <__aeabi_dsub>
 800bee2:	a36b      	add	r3, pc, #428	@ (adr r3, 800c090 <_dtoa_r+0x2b8>)
 800bee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee8:	f7f4 fb86 	bl	80005f8 <__aeabi_dmul>
 800beec:	a36a      	add	r3, pc, #424	@ (adr r3, 800c098 <_dtoa_r+0x2c0>)
 800beee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef2:	f7f4 f9cb 	bl	800028c <__adddf3>
 800bef6:	4604      	mov	r4, r0
 800bef8:	4630      	mov	r0, r6
 800befa:	460d      	mov	r5, r1
 800befc:	f7f4 fb12 	bl	8000524 <__aeabi_i2d>
 800bf00:	a367      	add	r3, pc, #412	@ (adr r3, 800c0a0 <_dtoa_r+0x2c8>)
 800bf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf06:	f7f4 fb77 	bl	80005f8 <__aeabi_dmul>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	4620      	mov	r0, r4
 800bf10:	4629      	mov	r1, r5
 800bf12:	f7f4 f9bb 	bl	800028c <__adddf3>
 800bf16:	4604      	mov	r4, r0
 800bf18:	460d      	mov	r5, r1
 800bf1a:	f7f4 fe1d 	bl	8000b58 <__aeabi_d2iz>
 800bf1e:	2200      	movs	r2, #0
 800bf20:	4607      	mov	r7, r0
 800bf22:	2300      	movs	r3, #0
 800bf24:	4620      	mov	r0, r4
 800bf26:	4629      	mov	r1, r5
 800bf28:	f7f4 fdd8 	bl	8000adc <__aeabi_dcmplt>
 800bf2c:	b140      	cbz	r0, 800bf40 <_dtoa_r+0x168>
 800bf2e:	4638      	mov	r0, r7
 800bf30:	f7f4 faf8 	bl	8000524 <__aeabi_i2d>
 800bf34:	4622      	mov	r2, r4
 800bf36:	462b      	mov	r3, r5
 800bf38:	f7f4 fdc6 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf3c:	b900      	cbnz	r0, 800bf40 <_dtoa_r+0x168>
 800bf3e:	3f01      	subs	r7, #1
 800bf40:	2f16      	cmp	r7, #22
 800bf42:	d852      	bhi.n	800bfea <_dtoa_r+0x212>
 800bf44:	4b5d      	ldr	r3, [pc, #372]	@ (800c0bc <_dtoa_r+0x2e4>)
 800bf46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bf52:	f7f4 fdc3 	bl	8000adc <__aeabi_dcmplt>
 800bf56:	2800      	cmp	r0, #0
 800bf58:	d049      	beq.n	800bfee <_dtoa_r+0x216>
 800bf5a:	3f01      	subs	r7, #1
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf60:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bf62:	1b9b      	subs	r3, r3, r6
 800bf64:	1e5a      	subs	r2, r3, #1
 800bf66:	bf45      	ittet	mi
 800bf68:	f1c3 0301 	rsbmi	r3, r3, #1
 800bf6c:	9300      	strmi	r3, [sp, #0]
 800bf6e:	2300      	movpl	r3, #0
 800bf70:	2300      	movmi	r3, #0
 800bf72:	9206      	str	r2, [sp, #24]
 800bf74:	bf54      	ite	pl
 800bf76:	9300      	strpl	r3, [sp, #0]
 800bf78:	9306      	strmi	r3, [sp, #24]
 800bf7a:	2f00      	cmp	r7, #0
 800bf7c:	db39      	blt.n	800bff2 <_dtoa_r+0x21a>
 800bf7e:	9b06      	ldr	r3, [sp, #24]
 800bf80:	970d      	str	r7, [sp, #52]	@ 0x34
 800bf82:	443b      	add	r3, r7
 800bf84:	9306      	str	r3, [sp, #24]
 800bf86:	2300      	movs	r3, #0
 800bf88:	9308      	str	r3, [sp, #32]
 800bf8a:	9b07      	ldr	r3, [sp, #28]
 800bf8c:	2b09      	cmp	r3, #9
 800bf8e:	d863      	bhi.n	800c058 <_dtoa_r+0x280>
 800bf90:	2b05      	cmp	r3, #5
 800bf92:	bfc4      	itt	gt
 800bf94:	3b04      	subgt	r3, #4
 800bf96:	9307      	strgt	r3, [sp, #28]
 800bf98:	9b07      	ldr	r3, [sp, #28]
 800bf9a:	f1a3 0302 	sub.w	r3, r3, #2
 800bf9e:	bfcc      	ite	gt
 800bfa0:	2400      	movgt	r4, #0
 800bfa2:	2401      	movle	r4, #1
 800bfa4:	2b03      	cmp	r3, #3
 800bfa6:	d863      	bhi.n	800c070 <_dtoa_r+0x298>
 800bfa8:	e8df f003 	tbb	[pc, r3]
 800bfac:	2b375452 	.word	0x2b375452
 800bfb0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bfb4:	441e      	add	r6, r3
 800bfb6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bfba:	2b20      	cmp	r3, #32
 800bfbc:	bfc1      	itttt	gt
 800bfbe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bfc2:	409f      	lslgt	r7, r3
 800bfc4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bfc8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bfcc:	bfd6      	itet	le
 800bfce:	f1c3 0320 	rsble	r3, r3, #32
 800bfd2:	ea47 0003 	orrgt.w	r0, r7, r3
 800bfd6:	fa04 f003 	lslle.w	r0, r4, r3
 800bfda:	f7f4 fa93 	bl	8000504 <__aeabi_ui2d>
 800bfde:	2201      	movs	r2, #1
 800bfe0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bfe4:	3e01      	subs	r6, #1
 800bfe6:	9212      	str	r2, [sp, #72]	@ 0x48
 800bfe8:	e776      	b.n	800bed8 <_dtoa_r+0x100>
 800bfea:	2301      	movs	r3, #1
 800bfec:	e7b7      	b.n	800bf5e <_dtoa_r+0x186>
 800bfee:	9010      	str	r0, [sp, #64]	@ 0x40
 800bff0:	e7b6      	b.n	800bf60 <_dtoa_r+0x188>
 800bff2:	9b00      	ldr	r3, [sp, #0]
 800bff4:	1bdb      	subs	r3, r3, r7
 800bff6:	9300      	str	r3, [sp, #0]
 800bff8:	427b      	negs	r3, r7
 800bffa:	9308      	str	r3, [sp, #32]
 800bffc:	2300      	movs	r3, #0
 800bffe:	930d      	str	r3, [sp, #52]	@ 0x34
 800c000:	e7c3      	b.n	800bf8a <_dtoa_r+0x1b2>
 800c002:	2301      	movs	r3, #1
 800c004:	9309      	str	r3, [sp, #36]	@ 0x24
 800c006:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c008:	eb07 0b03 	add.w	fp, r7, r3
 800c00c:	f10b 0301 	add.w	r3, fp, #1
 800c010:	2b01      	cmp	r3, #1
 800c012:	9303      	str	r3, [sp, #12]
 800c014:	bfb8      	it	lt
 800c016:	2301      	movlt	r3, #1
 800c018:	e006      	b.n	800c028 <_dtoa_r+0x250>
 800c01a:	2301      	movs	r3, #1
 800c01c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c01e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c020:	2b00      	cmp	r3, #0
 800c022:	dd28      	ble.n	800c076 <_dtoa_r+0x29e>
 800c024:	469b      	mov	fp, r3
 800c026:	9303      	str	r3, [sp, #12]
 800c028:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c02c:	2100      	movs	r1, #0
 800c02e:	2204      	movs	r2, #4
 800c030:	f102 0514 	add.w	r5, r2, #20
 800c034:	429d      	cmp	r5, r3
 800c036:	d926      	bls.n	800c086 <_dtoa_r+0x2ae>
 800c038:	6041      	str	r1, [r0, #4]
 800c03a:	4648      	mov	r0, r9
 800c03c:	f000 fd9c 	bl	800cb78 <_Balloc>
 800c040:	4682      	mov	sl, r0
 800c042:	2800      	cmp	r0, #0
 800c044:	d142      	bne.n	800c0cc <_dtoa_r+0x2f4>
 800c046:	4b1e      	ldr	r3, [pc, #120]	@ (800c0c0 <_dtoa_r+0x2e8>)
 800c048:	4602      	mov	r2, r0
 800c04a:	f240 11af 	movw	r1, #431	@ 0x1af
 800c04e:	e6da      	b.n	800be06 <_dtoa_r+0x2e>
 800c050:	2300      	movs	r3, #0
 800c052:	e7e3      	b.n	800c01c <_dtoa_r+0x244>
 800c054:	2300      	movs	r3, #0
 800c056:	e7d5      	b.n	800c004 <_dtoa_r+0x22c>
 800c058:	2401      	movs	r4, #1
 800c05a:	2300      	movs	r3, #0
 800c05c:	9307      	str	r3, [sp, #28]
 800c05e:	9409      	str	r4, [sp, #36]	@ 0x24
 800c060:	f04f 3bff 	mov.w	fp, #4294967295
 800c064:	2200      	movs	r2, #0
 800c066:	f8cd b00c 	str.w	fp, [sp, #12]
 800c06a:	2312      	movs	r3, #18
 800c06c:	920c      	str	r2, [sp, #48]	@ 0x30
 800c06e:	e7db      	b.n	800c028 <_dtoa_r+0x250>
 800c070:	2301      	movs	r3, #1
 800c072:	9309      	str	r3, [sp, #36]	@ 0x24
 800c074:	e7f4      	b.n	800c060 <_dtoa_r+0x288>
 800c076:	f04f 0b01 	mov.w	fp, #1
 800c07a:	f8cd b00c 	str.w	fp, [sp, #12]
 800c07e:	465b      	mov	r3, fp
 800c080:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c084:	e7d0      	b.n	800c028 <_dtoa_r+0x250>
 800c086:	3101      	adds	r1, #1
 800c088:	0052      	lsls	r2, r2, #1
 800c08a:	e7d1      	b.n	800c030 <_dtoa_r+0x258>
 800c08c:	f3af 8000 	nop.w
 800c090:	636f4361 	.word	0x636f4361
 800c094:	3fd287a7 	.word	0x3fd287a7
 800c098:	8b60c8b3 	.word	0x8b60c8b3
 800c09c:	3fc68a28 	.word	0x3fc68a28
 800c0a0:	509f79fb 	.word	0x509f79fb
 800c0a4:	3fd34413 	.word	0x3fd34413
 800c0a8:	0800dab1 	.word	0x0800dab1
 800c0ac:	0800dac8 	.word	0x0800dac8
 800c0b0:	7ff00000 	.word	0x7ff00000
 800c0b4:	0800da81 	.word	0x0800da81
 800c0b8:	3ff80000 	.word	0x3ff80000
 800c0bc:	0800dc18 	.word	0x0800dc18
 800c0c0:	0800db20 	.word	0x0800db20
 800c0c4:	0800daad 	.word	0x0800daad
 800c0c8:	0800da80 	.word	0x0800da80
 800c0cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c0d0:	6018      	str	r0, [r3, #0]
 800c0d2:	9b03      	ldr	r3, [sp, #12]
 800c0d4:	2b0e      	cmp	r3, #14
 800c0d6:	f200 80a1 	bhi.w	800c21c <_dtoa_r+0x444>
 800c0da:	2c00      	cmp	r4, #0
 800c0dc:	f000 809e 	beq.w	800c21c <_dtoa_r+0x444>
 800c0e0:	2f00      	cmp	r7, #0
 800c0e2:	dd33      	ble.n	800c14c <_dtoa_r+0x374>
 800c0e4:	4b9c      	ldr	r3, [pc, #624]	@ (800c358 <_dtoa_r+0x580>)
 800c0e6:	f007 020f 	and.w	r2, r7, #15
 800c0ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0ee:	ed93 7b00 	vldr	d7, [r3]
 800c0f2:	05f8      	lsls	r0, r7, #23
 800c0f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c0f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c0fc:	d516      	bpl.n	800c12c <_dtoa_r+0x354>
 800c0fe:	4b97      	ldr	r3, [pc, #604]	@ (800c35c <_dtoa_r+0x584>)
 800c100:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c104:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c108:	f7f4 fba0 	bl	800084c <__aeabi_ddiv>
 800c10c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c110:	f004 040f 	and.w	r4, r4, #15
 800c114:	2603      	movs	r6, #3
 800c116:	4d91      	ldr	r5, [pc, #580]	@ (800c35c <_dtoa_r+0x584>)
 800c118:	b954      	cbnz	r4, 800c130 <_dtoa_r+0x358>
 800c11a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c11e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c122:	f7f4 fb93 	bl	800084c <__aeabi_ddiv>
 800c126:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c12a:	e028      	b.n	800c17e <_dtoa_r+0x3a6>
 800c12c:	2602      	movs	r6, #2
 800c12e:	e7f2      	b.n	800c116 <_dtoa_r+0x33e>
 800c130:	07e1      	lsls	r1, r4, #31
 800c132:	d508      	bpl.n	800c146 <_dtoa_r+0x36e>
 800c134:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c138:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c13c:	f7f4 fa5c 	bl	80005f8 <__aeabi_dmul>
 800c140:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c144:	3601      	adds	r6, #1
 800c146:	1064      	asrs	r4, r4, #1
 800c148:	3508      	adds	r5, #8
 800c14a:	e7e5      	b.n	800c118 <_dtoa_r+0x340>
 800c14c:	f000 80af 	beq.w	800c2ae <_dtoa_r+0x4d6>
 800c150:	427c      	negs	r4, r7
 800c152:	4b81      	ldr	r3, [pc, #516]	@ (800c358 <_dtoa_r+0x580>)
 800c154:	4d81      	ldr	r5, [pc, #516]	@ (800c35c <_dtoa_r+0x584>)
 800c156:	f004 020f 	and.w	r2, r4, #15
 800c15a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c162:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c166:	f7f4 fa47 	bl	80005f8 <__aeabi_dmul>
 800c16a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c16e:	1124      	asrs	r4, r4, #4
 800c170:	2300      	movs	r3, #0
 800c172:	2602      	movs	r6, #2
 800c174:	2c00      	cmp	r4, #0
 800c176:	f040 808f 	bne.w	800c298 <_dtoa_r+0x4c0>
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1d3      	bne.n	800c126 <_dtoa_r+0x34e>
 800c17e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c180:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c184:	2b00      	cmp	r3, #0
 800c186:	f000 8094 	beq.w	800c2b2 <_dtoa_r+0x4da>
 800c18a:	4b75      	ldr	r3, [pc, #468]	@ (800c360 <_dtoa_r+0x588>)
 800c18c:	2200      	movs	r2, #0
 800c18e:	4620      	mov	r0, r4
 800c190:	4629      	mov	r1, r5
 800c192:	f7f4 fca3 	bl	8000adc <__aeabi_dcmplt>
 800c196:	2800      	cmp	r0, #0
 800c198:	f000 808b 	beq.w	800c2b2 <_dtoa_r+0x4da>
 800c19c:	9b03      	ldr	r3, [sp, #12]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f000 8087 	beq.w	800c2b2 <_dtoa_r+0x4da>
 800c1a4:	f1bb 0f00 	cmp.w	fp, #0
 800c1a8:	dd34      	ble.n	800c214 <_dtoa_r+0x43c>
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	4b6d      	ldr	r3, [pc, #436]	@ (800c364 <_dtoa_r+0x58c>)
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	4629      	mov	r1, r5
 800c1b2:	f7f4 fa21 	bl	80005f8 <__aeabi_dmul>
 800c1b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1ba:	f107 38ff 	add.w	r8, r7, #4294967295
 800c1be:	3601      	adds	r6, #1
 800c1c0:	465c      	mov	r4, fp
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	f7f4 f9ae 	bl	8000524 <__aeabi_i2d>
 800c1c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1cc:	f7f4 fa14 	bl	80005f8 <__aeabi_dmul>
 800c1d0:	4b65      	ldr	r3, [pc, #404]	@ (800c368 <_dtoa_r+0x590>)
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f7f4 f85a 	bl	800028c <__adddf3>
 800c1d8:	4605      	mov	r5, r0
 800c1da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c1de:	2c00      	cmp	r4, #0
 800c1e0:	d16a      	bne.n	800c2b8 <_dtoa_r+0x4e0>
 800c1e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1e6:	4b61      	ldr	r3, [pc, #388]	@ (800c36c <_dtoa_r+0x594>)
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f7f4 f84d 	bl	8000288 <__aeabi_dsub>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c1f6:	462a      	mov	r2, r5
 800c1f8:	4633      	mov	r3, r6
 800c1fa:	f7f4 fc8d 	bl	8000b18 <__aeabi_dcmpgt>
 800c1fe:	2800      	cmp	r0, #0
 800c200:	f040 8298 	bne.w	800c734 <_dtoa_r+0x95c>
 800c204:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c208:	462a      	mov	r2, r5
 800c20a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c20e:	f7f4 fc65 	bl	8000adc <__aeabi_dcmplt>
 800c212:	bb38      	cbnz	r0, 800c264 <_dtoa_r+0x48c>
 800c214:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c218:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c21c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c21e:	2b00      	cmp	r3, #0
 800c220:	f2c0 8157 	blt.w	800c4d2 <_dtoa_r+0x6fa>
 800c224:	2f0e      	cmp	r7, #14
 800c226:	f300 8154 	bgt.w	800c4d2 <_dtoa_r+0x6fa>
 800c22a:	4b4b      	ldr	r3, [pc, #300]	@ (800c358 <_dtoa_r+0x580>)
 800c22c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c230:	ed93 7b00 	vldr	d7, [r3]
 800c234:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c236:	2b00      	cmp	r3, #0
 800c238:	ed8d 7b00 	vstr	d7, [sp]
 800c23c:	f280 80e5 	bge.w	800c40a <_dtoa_r+0x632>
 800c240:	9b03      	ldr	r3, [sp, #12]
 800c242:	2b00      	cmp	r3, #0
 800c244:	f300 80e1 	bgt.w	800c40a <_dtoa_r+0x632>
 800c248:	d10c      	bne.n	800c264 <_dtoa_r+0x48c>
 800c24a:	4b48      	ldr	r3, [pc, #288]	@ (800c36c <_dtoa_r+0x594>)
 800c24c:	2200      	movs	r2, #0
 800c24e:	ec51 0b17 	vmov	r0, r1, d7
 800c252:	f7f4 f9d1 	bl	80005f8 <__aeabi_dmul>
 800c256:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c25a:	f7f4 fc53 	bl	8000b04 <__aeabi_dcmpge>
 800c25e:	2800      	cmp	r0, #0
 800c260:	f000 8266 	beq.w	800c730 <_dtoa_r+0x958>
 800c264:	2400      	movs	r4, #0
 800c266:	4625      	mov	r5, r4
 800c268:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c26a:	4656      	mov	r6, sl
 800c26c:	ea6f 0803 	mvn.w	r8, r3
 800c270:	2700      	movs	r7, #0
 800c272:	4621      	mov	r1, r4
 800c274:	4648      	mov	r0, r9
 800c276:	f000 fcbf 	bl	800cbf8 <_Bfree>
 800c27a:	2d00      	cmp	r5, #0
 800c27c:	f000 80bd 	beq.w	800c3fa <_dtoa_r+0x622>
 800c280:	b12f      	cbz	r7, 800c28e <_dtoa_r+0x4b6>
 800c282:	42af      	cmp	r7, r5
 800c284:	d003      	beq.n	800c28e <_dtoa_r+0x4b6>
 800c286:	4639      	mov	r1, r7
 800c288:	4648      	mov	r0, r9
 800c28a:	f000 fcb5 	bl	800cbf8 <_Bfree>
 800c28e:	4629      	mov	r1, r5
 800c290:	4648      	mov	r0, r9
 800c292:	f000 fcb1 	bl	800cbf8 <_Bfree>
 800c296:	e0b0      	b.n	800c3fa <_dtoa_r+0x622>
 800c298:	07e2      	lsls	r2, r4, #31
 800c29a:	d505      	bpl.n	800c2a8 <_dtoa_r+0x4d0>
 800c29c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c2a0:	f7f4 f9aa 	bl	80005f8 <__aeabi_dmul>
 800c2a4:	3601      	adds	r6, #1
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	1064      	asrs	r4, r4, #1
 800c2aa:	3508      	adds	r5, #8
 800c2ac:	e762      	b.n	800c174 <_dtoa_r+0x39c>
 800c2ae:	2602      	movs	r6, #2
 800c2b0:	e765      	b.n	800c17e <_dtoa_r+0x3a6>
 800c2b2:	9c03      	ldr	r4, [sp, #12]
 800c2b4:	46b8      	mov	r8, r7
 800c2b6:	e784      	b.n	800c1c2 <_dtoa_r+0x3ea>
 800c2b8:	4b27      	ldr	r3, [pc, #156]	@ (800c358 <_dtoa_r+0x580>)
 800c2ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c2bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c2c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c2c4:	4454      	add	r4, sl
 800c2c6:	2900      	cmp	r1, #0
 800c2c8:	d054      	beq.n	800c374 <_dtoa_r+0x59c>
 800c2ca:	4929      	ldr	r1, [pc, #164]	@ (800c370 <_dtoa_r+0x598>)
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	f7f4 fabd 	bl	800084c <__aeabi_ddiv>
 800c2d2:	4633      	mov	r3, r6
 800c2d4:	462a      	mov	r2, r5
 800c2d6:	f7f3 ffd7 	bl	8000288 <__aeabi_dsub>
 800c2da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c2de:	4656      	mov	r6, sl
 800c2e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2e4:	f7f4 fc38 	bl	8000b58 <__aeabi_d2iz>
 800c2e8:	4605      	mov	r5, r0
 800c2ea:	f7f4 f91b 	bl	8000524 <__aeabi_i2d>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2f6:	f7f3 ffc7 	bl	8000288 <__aeabi_dsub>
 800c2fa:	3530      	adds	r5, #48	@ 0x30
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	460b      	mov	r3, r1
 800c300:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c304:	f806 5b01 	strb.w	r5, [r6], #1
 800c308:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c30c:	f7f4 fbe6 	bl	8000adc <__aeabi_dcmplt>
 800c310:	2800      	cmp	r0, #0
 800c312:	d172      	bne.n	800c3fa <_dtoa_r+0x622>
 800c314:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c318:	4911      	ldr	r1, [pc, #68]	@ (800c360 <_dtoa_r+0x588>)
 800c31a:	2000      	movs	r0, #0
 800c31c:	f7f3 ffb4 	bl	8000288 <__aeabi_dsub>
 800c320:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c324:	f7f4 fbda 	bl	8000adc <__aeabi_dcmplt>
 800c328:	2800      	cmp	r0, #0
 800c32a:	f040 80b4 	bne.w	800c496 <_dtoa_r+0x6be>
 800c32e:	42a6      	cmp	r6, r4
 800c330:	f43f af70 	beq.w	800c214 <_dtoa_r+0x43c>
 800c334:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c338:	4b0a      	ldr	r3, [pc, #40]	@ (800c364 <_dtoa_r+0x58c>)
 800c33a:	2200      	movs	r2, #0
 800c33c:	f7f4 f95c 	bl	80005f8 <__aeabi_dmul>
 800c340:	4b08      	ldr	r3, [pc, #32]	@ (800c364 <_dtoa_r+0x58c>)
 800c342:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c346:	2200      	movs	r2, #0
 800c348:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c34c:	f7f4 f954 	bl	80005f8 <__aeabi_dmul>
 800c350:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c354:	e7c4      	b.n	800c2e0 <_dtoa_r+0x508>
 800c356:	bf00      	nop
 800c358:	0800dc18 	.word	0x0800dc18
 800c35c:	0800dbf0 	.word	0x0800dbf0
 800c360:	3ff00000 	.word	0x3ff00000
 800c364:	40240000 	.word	0x40240000
 800c368:	401c0000 	.word	0x401c0000
 800c36c:	40140000 	.word	0x40140000
 800c370:	3fe00000 	.word	0x3fe00000
 800c374:	4631      	mov	r1, r6
 800c376:	4628      	mov	r0, r5
 800c378:	f7f4 f93e 	bl	80005f8 <__aeabi_dmul>
 800c37c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c380:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c382:	4656      	mov	r6, sl
 800c384:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c388:	f7f4 fbe6 	bl	8000b58 <__aeabi_d2iz>
 800c38c:	4605      	mov	r5, r0
 800c38e:	f7f4 f8c9 	bl	8000524 <__aeabi_i2d>
 800c392:	4602      	mov	r2, r0
 800c394:	460b      	mov	r3, r1
 800c396:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c39a:	f7f3 ff75 	bl	8000288 <__aeabi_dsub>
 800c39e:	3530      	adds	r5, #48	@ 0x30
 800c3a0:	f806 5b01 	strb.w	r5, [r6], #1
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	42a6      	cmp	r6, r4
 800c3aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c3ae:	f04f 0200 	mov.w	r2, #0
 800c3b2:	d124      	bne.n	800c3fe <_dtoa_r+0x626>
 800c3b4:	4baf      	ldr	r3, [pc, #700]	@ (800c674 <_dtoa_r+0x89c>)
 800c3b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c3ba:	f7f3 ff67 	bl	800028c <__adddf3>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3c6:	f7f4 fba7 	bl	8000b18 <__aeabi_dcmpgt>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d163      	bne.n	800c496 <_dtoa_r+0x6be>
 800c3ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3d2:	49a8      	ldr	r1, [pc, #672]	@ (800c674 <_dtoa_r+0x89c>)
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	f7f3 ff57 	bl	8000288 <__aeabi_dsub>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3e2:	f7f4 fb7b 	bl	8000adc <__aeabi_dcmplt>
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	f43f af14 	beq.w	800c214 <_dtoa_r+0x43c>
 800c3ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c3ee:	1e73      	subs	r3, r6, #1
 800c3f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c3f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c3f6:	2b30      	cmp	r3, #48	@ 0x30
 800c3f8:	d0f8      	beq.n	800c3ec <_dtoa_r+0x614>
 800c3fa:	4647      	mov	r7, r8
 800c3fc:	e03b      	b.n	800c476 <_dtoa_r+0x69e>
 800c3fe:	4b9e      	ldr	r3, [pc, #632]	@ (800c678 <_dtoa_r+0x8a0>)
 800c400:	f7f4 f8fa 	bl	80005f8 <__aeabi_dmul>
 800c404:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c408:	e7bc      	b.n	800c384 <_dtoa_r+0x5ac>
 800c40a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c40e:	4656      	mov	r6, sl
 800c410:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c414:	4620      	mov	r0, r4
 800c416:	4629      	mov	r1, r5
 800c418:	f7f4 fa18 	bl	800084c <__aeabi_ddiv>
 800c41c:	f7f4 fb9c 	bl	8000b58 <__aeabi_d2iz>
 800c420:	4680      	mov	r8, r0
 800c422:	f7f4 f87f 	bl	8000524 <__aeabi_i2d>
 800c426:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c42a:	f7f4 f8e5 	bl	80005f8 <__aeabi_dmul>
 800c42e:	4602      	mov	r2, r0
 800c430:	460b      	mov	r3, r1
 800c432:	4620      	mov	r0, r4
 800c434:	4629      	mov	r1, r5
 800c436:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c43a:	f7f3 ff25 	bl	8000288 <__aeabi_dsub>
 800c43e:	f806 4b01 	strb.w	r4, [r6], #1
 800c442:	9d03      	ldr	r5, [sp, #12]
 800c444:	eba6 040a 	sub.w	r4, r6, sl
 800c448:	42a5      	cmp	r5, r4
 800c44a:	4602      	mov	r2, r0
 800c44c:	460b      	mov	r3, r1
 800c44e:	d133      	bne.n	800c4b8 <_dtoa_r+0x6e0>
 800c450:	f7f3 ff1c 	bl	800028c <__adddf3>
 800c454:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c458:	4604      	mov	r4, r0
 800c45a:	460d      	mov	r5, r1
 800c45c:	f7f4 fb5c 	bl	8000b18 <__aeabi_dcmpgt>
 800c460:	b9c0      	cbnz	r0, 800c494 <_dtoa_r+0x6bc>
 800c462:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c466:	4620      	mov	r0, r4
 800c468:	4629      	mov	r1, r5
 800c46a:	f7f4 fb2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c46e:	b110      	cbz	r0, 800c476 <_dtoa_r+0x69e>
 800c470:	f018 0f01 	tst.w	r8, #1
 800c474:	d10e      	bne.n	800c494 <_dtoa_r+0x6bc>
 800c476:	9902      	ldr	r1, [sp, #8]
 800c478:	4648      	mov	r0, r9
 800c47a:	f000 fbbd 	bl	800cbf8 <_Bfree>
 800c47e:	2300      	movs	r3, #0
 800c480:	7033      	strb	r3, [r6, #0]
 800c482:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c484:	3701      	adds	r7, #1
 800c486:	601f      	str	r7, [r3, #0]
 800c488:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f000 824b 	beq.w	800c926 <_dtoa_r+0xb4e>
 800c490:	601e      	str	r6, [r3, #0]
 800c492:	e248      	b.n	800c926 <_dtoa_r+0xb4e>
 800c494:	46b8      	mov	r8, r7
 800c496:	4633      	mov	r3, r6
 800c498:	461e      	mov	r6, r3
 800c49a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c49e:	2a39      	cmp	r2, #57	@ 0x39
 800c4a0:	d106      	bne.n	800c4b0 <_dtoa_r+0x6d8>
 800c4a2:	459a      	cmp	sl, r3
 800c4a4:	d1f8      	bne.n	800c498 <_dtoa_r+0x6c0>
 800c4a6:	2230      	movs	r2, #48	@ 0x30
 800c4a8:	f108 0801 	add.w	r8, r8, #1
 800c4ac:	f88a 2000 	strb.w	r2, [sl]
 800c4b0:	781a      	ldrb	r2, [r3, #0]
 800c4b2:	3201      	adds	r2, #1
 800c4b4:	701a      	strb	r2, [r3, #0]
 800c4b6:	e7a0      	b.n	800c3fa <_dtoa_r+0x622>
 800c4b8:	4b6f      	ldr	r3, [pc, #444]	@ (800c678 <_dtoa_r+0x8a0>)
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f7f4 f89c 	bl	80005f8 <__aeabi_dmul>
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	460d      	mov	r5, r1
 800c4c8:	f7f4 fafe 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d09f      	beq.n	800c410 <_dtoa_r+0x638>
 800c4d0:	e7d1      	b.n	800c476 <_dtoa_r+0x69e>
 800c4d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4d4:	2a00      	cmp	r2, #0
 800c4d6:	f000 80ea 	beq.w	800c6ae <_dtoa_r+0x8d6>
 800c4da:	9a07      	ldr	r2, [sp, #28]
 800c4dc:	2a01      	cmp	r2, #1
 800c4de:	f300 80cd 	bgt.w	800c67c <_dtoa_r+0x8a4>
 800c4e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c4e4:	2a00      	cmp	r2, #0
 800c4e6:	f000 80c1 	beq.w	800c66c <_dtoa_r+0x894>
 800c4ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c4ee:	9c08      	ldr	r4, [sp, #32]
 800c4f0:	9e00      	ldr	r6, [sp, #0]
 800c4f2:	9a00      	ldr	r2, [sp, #0]
 800c4f4:	441a      	add	r2, r3
 800c4f6:	9200      	str	r2, [sp, #0]
 800c4f8:	9a06      	ldr	r2, [sp, #24]
 800c4fa:	2101      	movs	r1, #1
 800c4fc:	441a      	add	r2, r3
 800c4fe:	4648      	mov	r0, r9
 800c500:	9206      	str	r2, [sp, #24]
 800c502:	f000 fc2d 	bl	800cd60 <__i2b>
 800c506:	4605      	mov	r5, r0
 800c508:	b166      	cbz	r6, 800c524 <_dtoa_r+0x74c>
 800c50a:	9b06      	ldr	r3, [sp, #24]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	dd09      	ble.n	800c524 <_dtoa_r+0x74c>
 800c510:	42b3      	cmp	r3, r6
 800c512:	9a00      	ldr	r2, [sp, #0]
 800c514:	bfa8      	it	ge
 800c516:	4633      	movge	r3, r6
 800c518:	1ad2      	subs	r2, r2, r3
 800c51a:	9200      	str	r2, [sp, #0]
 800c51c:	9a06      	ldr	r2, [sp, #24]
 800c51e:	1af6      	subs	r6, r6, r3
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	9306      	str	r3, [sp, #24]
 800c524:	9b08      	ldr	r3, [sp, #32]
 800c526:	b30b      	cbz	r3, 800c56c <_dtoa_r+0x794>
 800c528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 80c6 	beq.w	800c6bc <_dtoa_r+0x8e4>
 800c530:	2c00      	cmp	r4, #0
 800c532:	f000 80c0 	beq.w	800c6b6 <_dtoa_r+0x8de>
 800c536:	4629      	mov	r1, r5
 800c538:	4622      	mov	r2, r4
 800c53a:	4648      	mov	r0, r9
 800c53c:	f000 fcc8 	bl	800ced0 <__pow5mult>
 800c540:	9a02      	ldr	r2, [sp, #8]
 800c542:	4601      	mov	r1, r0
 800c544:	4605      	mov	r5, r0
 800c546:	4648      	mov	r0, r9
 800c548:	f000 fc20 	bl	800cd8c <__multiply>
 800c54c:	9902      	ldr	r1, [sp, #8]
 800c54e:	4680      	mov	r8, r0
 800c550:	4648      	mov	r0, r9
 800c552:	f000 fb51 	bl	800cbf8 <_Bfree>
 800c556:	9b08      	ldr	r3, [sp, #32]
 800c558:	1b1b      	subs	r3, r3, r4
 800c55a:	9308      	str	r3, [sp, #32]
 800c55c:	f000 80b1 	beq.w	800c6c2 <_dtoa_r+0x8ea>
 800c560:	9a08      	ldr	r2, [sp, #32]
 800c562:	4641      	mov	r1, r8
 800c564:	4648      	mov	r0, r9
 800c566:	f000 fcb3 	bl	800ced0 <__pow5mult>
 800c56a:	9002      	str	r0, [sp, #8]
 800c56c:	2101      	movs	r1, #1
 800c56e:	4648      	mov	r0, r9
 800c570:	f000 fbf6 	bl	800cd60 <__i2b>
 800c574:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c576:	4604      	mov	r4, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f000 81d8 	beq.w	800c92e <_dtoa_r+0xb56>
 800c57e:	461a      	mov	r2, r3
 800c580:	4601      	mov	r1, r0
 800c582:	4648      	mov	r0, r9
 800c584:	f000 fca4 	bl	800ced0 <__pow5mult>
 800c588:	9b07      	ldr	r3, [sp, #28]
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	4604      	mov	r4, r0
 800c58e:	f300 809f 	bgt.w	800c6d0 <_dtoa_r+0x8f8>
 800c592:	9b04      	ldr	r3, [sp, #16]
 800c594:	2b00      	cmp	r3, #0
 800c596:	f040 8097 	bne.w	800c6c8 <_dtoa_r+0x8f0>
 800c59a:	9b05      	ldr	r3, [sp, #20]
 800c59c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	f040 8093 	bne.w	800c6cc <_dtoa_r+0x8f4>
 800c5a6:	9b05      	ldr	r3, [sp, #20]
 800c5a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c5ac:	0d1b      	lsrs	r3, r3, #20
 800c5ae:	051b      	lsls	r3, r3, #20
 800c5b0:	b133      	cbz	r3, 800c5c0 <_dtoa_r+0x7e8>
 800c5b2:	9b00      	ldr	r3, [sp, #0]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	9300      	str	r3, [sp, #0]
 800c5b8:	9b06      	ldr	r3, [sp, #24]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	9306      	str	r3, [sp, #24]
 800c5be:	2301      	movs	r3, #1
 800c5c0:	9308      	str	r3, [sp, #32]
 800c5c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	f000 81b8 	beq.w	800c93a <_dtoa_r+0xb62>
 800c5ca:	6923      	ldr	r3, [r4, #16]
 800c5cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c5d0:	6918      	ldr	r0, [r3, #16]
 800c5d2:	f000 fb79 	bl	800ccc8 <__hi0bits>
 800c5d6:	f1c0 0020 	rsb	r0, r0, #32
 800c5da:	9b06      	ldr	r3, [sp, #24]
 800c5dc:	4418      	add	r0, r3
 800c5de:	f010 001f 	ands.w	r0, r0, #31
 800c5e2:	f000 8082 	beq.w	800c6ea <_dtoa_r+0x912>
 800c5e6:	f1c0 0320 	rsb	r3, r0, #32
 800c5ea:	2b04      	cmp	r3, #4
 800c5ec:	dd73      	ble.n	800c6d6 <_dtoa_r+0x8fe>
 800c5ee:	9b00      	ldr	r3, [sp, #0]
 800c5f0:	f1c0 001c 	rsb	r0, r0, #28
 800c5f4:	4403      	add	r3, r0
 800c5f6:	9300      	str	r3, [sp, #0]
 800c5f8:	9b06      	ldr	r3, [sp, #24]
 800c5fa:	4403      	add	r3, r0
 800c5fc:	4406      	add	r6, r0
 800c5fe:	9306      	str	r3, [sp, #24]
 800c600:	9b00      	ldr	r3, [sp, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	dd05      	ble.n	800c612 <_dtoa_r+0x83a>
 800c606:	9902      	ldr	r1, [sp, #8]
 800c608:	461a      	mov	r2, r3
 800c60a:	4648      	mov	r0, r9
 800c60c:	f000 fcba 	bl	800cf84 <__lshift>
 800c610:	9002      	str	r0, [sp, #8]
 800c612:	9b06      	ldr	r3, [sp, #24]
 800c614:	2b00      	cmp	r3, #0
 800c616:	dd05      	ble.n	800c624 <_dtoa_r+0x84c>
 800c618:	4621      	mov	r1, r4
 800c61a:	461a      	mov	r2, r3
 800c61c:	4648      	mov	r0, r9
 800c61e:	f000 fcb1 	bl	800cf84 <__lshift>
 800c622:	4604      	mov	r4, r0
 800c624:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c626:	2b00      	cmp	r3, #0
 800c628:	d061      	beq.n	800c6ee <_dtoa_r+0x916>
 800c62a:	9802      	ldr	r0, [sp, #8]
 800c62c:	4621      	mov	r1, r4
 800c62e:	f000 fd15 	bl	800d05c <__mcmp>
 800c632:	2800      	cmp	r0, #0
 800c634:	da5b      	bge.n	800c6ee <_dtoa_r+0x916>
 800c636:	2300      	movs	r3, #0
 800c638:	9902      	ldr	r1, [sp, #8]
 800c63a:	220a      	movs	r2, #10
 800c63c:	4648      	mov	r0, r9
 800c63e:	f000 fafd 	bl	800cc3c <__multadd>
 800c642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c644:	9002      	str	r0, [sp, #8]
 800c646:	f107 38ff 	add.w	r8, r7, #4294967295
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f000 8177 	beq.w	800c93e <_dtoa_r+0xb66>
 800c650:	4629      	mov	r1, r5
 800c652:	2300      	movs	r3, #0
 800c654:	220a      	movs	r2, #10
 800c656:	4648      	mov	r0, r9
 800c658:	f000 faf0 	bl	800cc3c <__multadd>
 800c65c:	f1bb 0f00 	cmp.w	fp, #0
 800c660:	4605      	mov	r5, r0
 800c662:	dc6f      	bgt.n	800c744 <_dtoa_r+0x96c>
 800c664:	9b07      	ldr	r3, [sp, #28]
 800c666:	2b02      	cmp	r3, #2
 800c668:	dc49      	bgt.n	800c6fe <_dtoa_r+0x926>
 800c66a:	e06b      	b.n	800c744 <_dtoa_r+0x96c>
 800c66c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c66e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c672:	e73c      	b.n	800c4ee <_dtoa_r+0x716>
 800c674:	3fe00000 	.word	0x3fe00000
 800c678:	40240000 	.word	0x40240000
 800c67c:	9b03      	ldr	r3, [sp, #12]
 800c67e:	1e5c      	subs	r4, r3, #1
 800c680:	9b08      	ldr	r3, [sp, #32]
 800c682:	42a3      	cmp	r3, r4
 800c684:	db09      	blt.n	800c69a <_dtoa_r+0x8c2>
 800c686:	1b1c      	subs	r4, r3, r4
 800c688:	9b03      	ldr	r3, [sp, #12]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f6bf af30 	bge.w	800c4f0 <_dtoa_r+0x718>
 800c690:	9b00      	ldr	r3, [sp, #0]
 800c692:	9a03      	ldr	r2, [sp, #12]
 800c694:	1a9e      	subs	r6, r3, r2
 800c696:	2300      	movs	r3, #0
 800c698:	e72b      	b.n	800c4f2 <_dtoa_r+0x71a>
 800c69a:	9b08      	ldr	r3, [sp, #32]
 800c69c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c69e:	9408      	str	r4, [sp, #32]
 800c6a0:	1ae3      	subs	r3, r4, r3
 800c6a2:	441a      	add	r2, r3
 800c6a4:	9e00      	ldr	r6, [sp, #0]
 800c6a6:	9b03      	ldr	r3, [sp, #12]
 800c6a8:	920d      	str	r2, [sp, #52]	@ 0x34
 800c6aa:	2400      	movs	r4, #0
 800c6ac:	e721      	b.n	800c4f2 <_dtoa_r+0x71a>
 800c6ae:	9c08      	ldr	r4, [sp, #32]
 800c6b0:	9e00      	ldr	r6, [sp, #0]
 800c6b2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c6b4:	e728      	b.n	800c508 <_dtoa_r+0x730>
 800c6b6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c6ba:	e751      	b.n	800c560 <_dtoa_r+0x788>
 800c6bc:	9a08      	ldr	r2, [sp, #32]
 800c6be:	9902      	ldr	r1, [sp, #8]
 800c6c0:	e750      	b.n	800c564 <_dtoa_r+0x78c>
 800c6c2:	f8cd 8008 	str.w	r8, [sp, #8]
 800c6c6:	e751      	b.n	800c56c <_dtoa_r+0x794>
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	e779      	b.n	800c5c0 <_dtoa_r+0x7e8>
 800c6cc:	9b04      	ldr	r3, [sp, #16]
 800c6ce:	e777      	b.n	800c5c0 <_dtoa_r+0x7e8>
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	9308      	str	r3, [sp, #32]
 800c6d4:	e779      	b.n	800c5ca <_dtoa_r+0x7f2>
 800c6d6:	d093      	beq.n	800c600 <_dtoa_r+0x828>
 800c6d8:	9a00      	ldr	r2, [sp, #0]
 800c6da:	331c      	adds	r3, #28
 800c6dc:	441a      	add	r2, r3
 800c6de:	9200      	str	r2, [sp, #0]
 800c6e0:	9a06      	ldr	r2, [sp, #24]
 800c6e2:	441a      	add	r2, r3
 800c6e4:	441e      	add	r6, r3
 800c6e6:	9206      	str	r2, [sp, #24]
 800c6e8:	e78a      	b.n	800c600 <_dtoa_r+0x828>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	e7f4      	b.n	800c6d8 <_dtoa_r+0x900>
 800c6ee:	9b03      	ldr	r3, [sp, #12]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	46b8      	mov	r8, r7
 800c6f4:	dc20      	bgt.n	800c738 <_dtoa_r+0x960>
 800c6f6:	469b      	mov	fp, r3
 800c6f8:	9b07      	ldr	r3, [sp, #28]
 800c6fa:	2b02      	cmp	r3, #2
 800c6fc:	dd1e      	ble.n	800c73c <_dtoa_r+0x964>
 800c6fe:	f1bb 0f00 	cmp.w	fp, #0
 800c702:	f47f adb1 	bne.w	800c268 <_dtoa_r+0x490>
 800c706:	4621      	mov	r1, r4
 800c708:	465b      	mov	r3, fp
 800c70a:	2205      	movs	r2, #5
 800c70c:	4648      	mov	r0, r9
 800c70e:	f000 fa95 	bl	800cc3c <__multadd>
 800c712:	4601      	mov	r1, r0
 800c714:	4604      	mov	r4, r0
 800c716:	9802      	ldr	r0, [sp, #8]
 800c718:	f000 fca0 	bl	800d05c <__mcmp>
 800c71c:	2800      	cmp	r0, #0
 800c71e:	f77f ada3 	ble.w	800c268 <_dtoa_r+0x490>
 800c722:	4656      	mov	r6, sl
 800c724:	2331      	movs	r3, #49	@ 0x31
 800c726:	f806 3b01 	strb.w	r3, [r6], #1
 800c72a:	f108 0801 	add.w	r8, r8, #1
 800c72e:	e59f      	b.n	800c270 <_dtoa_r+0x498>
 800c730:	9c03      	ldr	r4, [sp, #12]
 800c732:	46b8      	mov	r8, r7
 800c734:	4625      	mov	r5, r4
 800c736:	e7f4      	b.n	800c722 <_dtoa_r+0x94a>
 800c738:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c73c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c73e:	2b00      	cmp	r3, #0
 800c740:	f000 8101 	beq.w	800c946 <_dtoa_r+0xb6e>
 800c744:	2e00      	cmp	r6, #0
 800c746:	dd05      	ble.n	800c754 <_dtoa_r+0x97c>
 800c748:	4629      	mov	r1, r5
 800c74a:	4632      	mov	r2, r6
 800c74c:	4648      	mov	r0, r9
 800c74e:	f000 fc19 	bl	800cf84 <__lshift>
 800c752:	4605      	mov	r5, r0
 800c754:	9b08      	ldr	r3, [sp, #32]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d05c      	beq.n	800c814 <_dtoa_r+0xa3c>
 800c75a:	6869      	ldr	r1, [r5, #4]
 800c75c:	4648      	mov	r0, r9
 800c75e:	f000 fa0b 	bl	800cb78 <_Balloc>
 800c762:	4606      	mov	r6, r0
 800c764:	b928      	cbnz	r0, 800c772 <_dtoa_r+0x99a>
 800c766:	4b82      	ldr	r3, [pc, #520]	@ (800c970 <_dtoa_r+0xb98>)
 800c768:	4602      	mov	r2, r0
 800c76a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c76e:	f7ff bb4a 	b.w	800be06 <_dtoa_r+0x2e>
 800c772:	692a      	ldr	r2, [r5, #16]
 800c774:	3202      	adds	r2, #2
 800c776:	0092      	lsls	r2, r2, #2
 800c778:	f105 010c 	add.w	r1, r5, #12
 800c77c:	300c      	adds	r0, #12
 800c77e:	f000 fe31 	bl	800d3e4 <memcpy>
 800c782:	2201      	movs	r2, #1
 800c784:	4631      	mov	r1, r6
 800c786:	4648      	mov	r0, r9
 800c788:	f000 fbfc 	bl	800cf84 <__lshift>
 800c78c:	f10a 0301 	add.w	r3, sl, #1
 800c790:	9300      	str	r3, [sp, #0]
 800c792:	eb0a 030b 	add.w	r3, sl, fp
 800c796:	9308      	str	r3, [sp, #32]
 800c798:	9b04      	ldr	r3, [sp, #16]
 800c79a:	f003 0301 	and.w	r3, r3, #1
 800c79e:	462f      	mov	r7, r5
 800c7a0:	9306      	str	r3, [sp, #24]
 800c7a2:	4605      	mov	r5, r0
 800c7a4:	9b00      	ldr	r3, [sp, #0]
 800c7a6:	9802      	ldr	r0, [sp, #8]
 800c7a8:	4621      	mov	r1, r4
 800c7aa:	f103 3bff 	add.w	fp, r3, #4294967295
 800c7ae:	f7ff fa88 	bl	800bcc2 <quorem>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	3330      	adds	r3, #48	@ 0x30
 800c7b6:	9003      	str	r0, [sp, #12]
 800c7b8:	4639      	mov	r1, r7
 800c7ba:	9802      	ldr	r0, [sp, #8]
 800c7bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7be:	f000 fc4d 	bl	800d05c <__mcmp>
 800c7c2:	462a      	mov	r2, r5
 800c7c4:	9004      	str	r0, [sp, #16]
 800c7c6:	4621      	mov	r1, r4
 800c7c8:	4648      	mov	r0, r9
 800c7ca:	f000 fc63 	bl	800d094 <__mdiff>
 800c7ce:	68c2      	ldr	r2, [r0, #12]
 800c7d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7d2:	4606      	mov	r6, r0
 800c7d4:	bb02      	cbnz	r2, 800c818 <_dtoa_r+0xa40>
 800c7d6:	4601      	mov	r1, r0
 800c7d8:	9802      	ldr	r0, [sp, #8]
 800c7da:	f000 fc3f 	bl	800d05c <__mcmp>
 800c7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	4631      	mov	r1, r6
 800c7e4:	4648      	mov	r0, r9
 800c7e6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c7e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7ea:	f000 fa05 	bl	800cbf8 <_Bfree>
 800c7ee:	9b07      	ldr	r3, [sp, #28]
 800c7f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c7f2:	9e00      	ldr	r6, [sp, #0]
 800c7f4:	ea42 0103 	orr.w	r1, r2, r3
 800c7f8:	9b06      	ldr	r3, [sp, #24]
 800c7fa:	4319      	orrs	r1, r3
 800c7fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7fe:	d10d      	bne.n	800c81c <_dtoa_r+0xa44>
 800c800:	2b39      	cmp	r3, #57	@ 0x39
 800c802:	d027      	beq.n	800c854 <_dtoa_r+0xa7c>
 800c804:	9a04      	ldr	r2, [sp, #16]
 800c806:	2a00      	cmp	r2, #0
 800c808:	dd01      	ble.n	800c80e <_dtoa_r+0xa36>
 800c80a:	9b03      	ldr	r3, [sp, #12]
 800c80c:	3331      	adds	r3, #49	@ 0x31
 800c80e:	f88b 3000 	strb.w	r3, [fp]
 800c812:	e52e      	b.n	800c272 <_dtoa_r+0x49a>
 800c814:	4628      	mov	r0, r5
 800c816:	e7b9      	b.n	800c78c <_dtoa_r+0x9b4>
 800c818:	2201      	movs	r2, #1
 800c81a:	e7e2      	b.n	800c7e2 <_dtoa_r+0xa0a>
 800c81c:	9904      	ldr	r1, [sp, #16]
 800c81e:	2900      	cmp	r1, #0
 800c820:	db04      	blt.n	800c82c <_dtoa_r+0xa54>
 800c822:	9807      	ldr	r0, [sp, #28]
 800c824:	4301      	orrs	r1, r0
 800c826:	9806      	ldr	r0, [sp, #24]
 800c828:	4301      	orrs	r1, r0
 800c82a:	d120      	bne.n	800c86e <_dtoa_r+0xa96>
 800c82c:	2a00      	cmp	r2, #0
 800c82e:	ddee      	ble.n	800c80e <_dtoa_r+0xa36>
 800c830:	9902      	ldr	r1, [sp, #8]
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	2201      	movs	r2, #1
 800c836:	4648      	mov	r0, r9
 800c838:	f000 fba4 	bl	800cf84 <__lshift>
 800c83c:	4621      	mov	r1, r4
 800c83e:	9002      	str	r0, [sp, #8]
 800c840:	f000 fc0c 	bl	800d05c <__mcmp>
 800c844:	2800      	cmp	r0, #0
 800c846:	9b00      	ldr	r3, [sp, #0]
 800c848:	dc02      	bgt.n	800c850 <_dtoa_r+0xa78>
 800c84a:	d1e0      	bne.n	800c80e <_dtoa_r+0xa36>
 800c84c:	07da      	lsls	r2, r3, #31
 800c84e:	d5de      	bpl.n	800c80e <_dtoa_r+0xa36>
 800c850:	2b39      	cmp	r3, #57	@ 0x39
 800c852:	d1da      	bne.n	800c80a <_dtoa_r+0xa32>
 800c854:	2339      	movs	r3, #57	@ 0x39
 800c856:	f88b 3000 	strb.w	r3, [fp]
 800c85a:	4633      	mov	r3, r6
 800c85c:	461e      	mov	r6, r3
 800c85e:	3b01      	subs	r3, #1
 800c860:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c864:	2a39      	cmp	r2, #57	@ 0x39
 800c866:	d04e      	beq.n	800c906 <_dtoa_r+0xb2e>
 800c868:	3201      	adds	r2, #1
 800c86a:	701a      	strb	r2, [r3, #0]
 800c86c:	e501      	b.n	800c272 <_dtoa_r+0x49a>
 800c86e:	2a00      	cmp	r2, #0
 800c870:	dd03      	ble.n	800c87a <_dtoa_r+0xaa2>
 800c872:	2b39      	cmp	r3, #57	@ 0x39
 800c874:	d0ee      	beq.n	800c854 <_dtoa_r+0xa7c>
 800c876:	3301      	adds	r3, #1
 800c878:	e7c9      	b.n	800c80e <_dtoa_r+0xa36>
 800c87a:	9a00      	ldr	r2, [sp, #0]
 800c87c:	9908      	ldr	r1, [sp, #32]
 800c87e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c882:	428a      	cmp	r2, r1
 800c884:	d028      	beq.n	800c8d8 <_dtoa_r+0xb00>
 800c886:	9902      	ldr	r1, [sp, #8]
 800c888:	2300      	movs	r3, #0
 800c88a:	220a      	movs	r2, #10
 800c88c:	4648      	mov	r0, r9
 800c88e:	f000 f9d5 	bl	800cc3c <__multadd>
 800c892:	42af      	cmp	r7, r5
 800c894:	9002      	str	r0, [sp, #8]
 800c896:	f04f 0300 	mov.w	r3, #0
 800c89a:	f04f 020a 	mov.w	r2, #10
 800c89e:	4639      	mov	r1, r7
 800c8a0:	4648      	mov	r0, r9
 800c8a2:	d107      	bne.n	800c8b4 <_dtoa_r+0xadc>
 800c8a4:	f000 f9ca 	bl	800cc3c <__multadd>
 800c8a8:	4607      	mov	r7, r0
 800c8aa:	4605      	mov	r5, r0
 800c8ac:	9b00      	ldr	r3, [sp, #0]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	9300      	str	r3, [sp, #0]
 800c8b2:	e777      	b.n	800c7a4 <_dtoa_r+0x9cc>
 800c8b4:	f000 f9c2 	bl	800cc3c <__multadd>
 800c8b8:	4629      	mov	r1, r5
 800c8ba:	4607      	mov	r7, r0
 800c8bc:	2300      	movs	r3, #0
 800c8be:	220a      	movs	r2, #10
 800c8c0:	4648      	mov	r0, r9
 800c8c2:	f000 f9bb 	bl	800cc3c <__multadd>
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	e7f0      	b.n	800c8ac <_dtoa_r+0xad4>
 800c8ca:	f1bb 0f00 	cmp.w	fp, #0
 800c8ce:	bfcc      	ite	gt
 800c8d0:	465e      	movgt	r6, fp
 800c8d2:	2601      	movle	r6, #1
 800c8d4:	4456      	add	r6, sl
 800c8d6:	2700      	movs	r7, #0
 800c8d8:	9902      	ldr	r1, [sp, #8]
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	4648      	mov	r0, r9
 800c8e0:	f000 fb50 	bl	800cf84 <__lshift>
 800c8e4:	4621      	mov	r1, r4
 800c8e6:	9002      	str	r0, [sp, #8]
 800c8e8:	f000 fbb8 	bl	800d05c <__mcmp>
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	dcb4      	bgt.n	800c85a <_dtoa_r+0xa82>
 800c8f0:	d102      	bne.n	800c8f8 <_dtoa_r+0xb20>
 800c8f2:	9b00      	ldr	r3, [sp, #0]
 800c8f4:	07db      	lsls	r3, r3, #31
 800c8f6:	d4b0      	bmi.n	800c85a <_dtoa_r+0xa82>
 800c8f8:	4633      	mov	r3, r6
 800c8fa:	461e      	mov	r6, r3
 800c8fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c900:	2a30      	cmp	r2, #48	@ 0x30
 800c902:	d0fa      	beq.n	800c8fa <_dtoa_r+0xb22>
 800c904:	e4b5      	b.n	800c272 <_dtoa_r+0x49a>
 800c906:	459a      	cmp	sl, r3
 800c908:	d1a8      	bne.n	800c85c <_dtoa_r+0xa84>
 800c90a:	2331      	movs	r3, #49	@ 0x31
 800c90c:	f108 0801 	add.w	r8, r8, #1
 800c910:	f88a 3000 	strb.w	r3, [sl]
 800c914:	e4ad      	b.n	800c272 <_dtoa_r+0x49a>
 800c916:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c918:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c974 <_dtoa_r+0xb9c>
 800c91c:	b11b      	cbz	r3, 800c926 <_dtoa_r+0xb4e>
 800c91e:	f10a 0308 	add.w	r3, sl, #8
 800c922:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c924:	6013      	str	r3, [r2, #0]
 800c926:	4650      	mov	r0, sl
 800c928:	b017      	add	sp, #92	@ 0x5c
 800c92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c92e:	9b07      	ldr	r3, [sp, #28]
 800c930:	2b01      	cmp	r3, #1
 800c932:	f77f ae2e 	ble.w	800c592 <_dtoa_r+0x7ba>
 800c936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c938:	9308      	str	r3, [sp, #32]
 800c93a:	2001      	movs	r0, #1
 800c93c:	e64d      	b.n	800c5da <_dtoa_r+0x802>
 800c93e:	f1bb 0f00 	cmp.w	fp, #0
 800c942:	f77f aed9 	ble.w	800c6f8 <_dtoa_r+0x920>
 800c946:	4656      	mov	r6, sl
 800c948:	9802      	ldr	r0, [sp, #8]
 800c94a:	4621      	mov	r1, r4
 800c94c:	f7ff f9b9 	bl	800bcc2 <quorem>
 800c950:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c954:	f806 3b01 	strb.w	r3, [r6], #1
 800c958:	eba6 020a 	sub.w	r2, r6, sl
 800c95c:	4593      	cmp	fp, r2
 800c95e:	ddb4      	ble.n	800c8ca <_dtoa_r+0xaf2>
 800c960:	9902      	ldr	r1, [sp, #8]
 800c962:	2300      	movs	r3, #0
 800c964:	220a      	movs	r2, #10
 800c966:	4648      	mov	r0, r9
 800c968:	f000 f968 	bl	800cc3c <__multadd>
 800c96c:	9002      	str	r0, [sp, #8]
 800c96e:	e7eb      	b.n	800c948 <_dtoa_r+0xb70>
 800c970:	0800db20 	.word	0x0800db20
 800c974:	0800daa4 	.word	0x0800daa4

0800c978 <_free_r>:
 800c978:	b538      	push	{r3, r4, r5, lr}
 800c97a:	4605      	mov	r5, r0
 800c97c:	2900      	cmp	r1, #0
 800c97e:	d041      	beq.n	800ca04 <_free_r+0x8c>
 800c980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c984:	1f0c      	subs	r4, r1, #4
 800c986:	2b00      	cmp	r3, #0
 800c988:	bfb8      	it	lt
 800c98a:	18e4      	addlt	r4, r4, r3
 800c98c:	f000 f8e8 	bl	800cb60 <__malloc_lock>
 800c990:	4a1d      	ldr	r2, [pc, #116]	@ (800ca08 <_free_r+0x90>)
 800c992:	6813      	ldr	r3, [r2, #0]
 800c994:	b933      	cbnz	r3, 800c9a4 <_free_r+0x2c>
 800c996:	6063      	str	r3, [r4, #4]
 800c998:	6014      	str	r4, [r2, #0]
 800c99a:	4628      	mov	r0, r5
 800c99c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9a0:	f000 b8e4 	b.w	800cb6c <__malloc_unlock>
 800c9a4:	42a3      	cmp	r3, r4
 800c9a6:	d908      	bls.n	800c9ba <_free_r+0x42>
 800c9a8:	6820      	ldr	r0, [r4, #0]
 800c9aa:	1821      	adds	r1, r4, r0
 800c9ac:	428b      	cmp	r3, r1
 800c9ae:	bf01      	itttt	eq
 800c9b0:	6819      	ldreq	r1, [r3, #0]
 800c9b2:	685b      	ldreq	r3, [r3, #4]
 800c9b4:	1809      	addeq	r1, r1, r0
 800c9b6:	6021      	streq	r1, [r4, #0]
 800c9b8:	e7ed      	b.n	800c996 <_free_r+0x1e>
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	b10b      	cbz	r3, 800c9c4 <_free_r+0x4c>
 800c9c0:	42a3      	cmp	r3, r4
 800c9c2:	d9fa      	bls.n	800c9ba <_free_r+0x42>
 800c9c4:	6811      	ldr	r1, [r2, #0]
 800c9c6:	1850      	adds	r0, r2, r1
 800c9c8:	42a0      	cmp	r0, r4
 800c9ca:	d10b      	bne.n	800c9e4 <_free_r+0x6c>
 800c9cc:	6820      	ldr	r0, [r4, #0]
 800c9ce:	4401      	add	r1, r0
 800c9d0:	1850      	adds	r0, r2, r1
 800c9d2:	4283      	cmp	r3, r0
 800c9d4:	6011      	str	r1, [r2, #0]
 800c9d6:	d1e0      	bne.n	800c99a <_free_r+0x22>
 800c9d8:	6818      	ldr	r0, [r3, #0]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	6053      	str	r3, [r2, #4]
 800c9de:	4408      	add	r0, r1
 800c9e0:	6010      	str	r0, [r2, #0]
 800c9e2:	e7da      	b.n	800c99a <_free_r+0x22>
 800c9e4:	d902      	bls.n	800c9ec <_free_r+0x74>
 800c9e6:	230c      	movs	r3, #12
 800c9e8:	602b      	str	r3, [r5, #0]
 800c9ea:	e7d6      	b.n	800c99a <_free_r+0x22>
 800c9ec:	6820      	ldr	r0, [r4, #0]
 800c9ee:	1821      	adds	r1, r4, r0
 800c9f0:	428b      	cmp	r3, r1
 800c9f2:	bf04      	itt	eq
 800c9f4:	6819      	ldreq	r1, [r3, #0]
 800c9f6:	685b      	ldreq	r3, [r3, #4]
 800c9f8:	6063      	str	r3, [r4, #4]
 800c9fa:	bf04      	itt	eq
 800c9fc:	1809      	addeq	r1, r1, r0
 800c9fe:	6021      	streq	r1, [r4, #0]
 800ca00:	6054      	str	r4, [r2, #4]
 800ca02:	e7ca      	b.n	800c99a <_free_r+0x22>
 800ca04:	bd38      	pop	{r3, r4, r5, pc}
 800ca06:	bf00      	nop
 800ca08:	20000630 	.word	0x20000630

0800ca0c <malloc>:
 800ca0c:	4b02      	ldr	r3, [pc, #8]	@ (800ca18 <malloc+0xc>)
 800ca0e:	4601      	mov	r1, r0
 800ca10:	6818      	ldr	r0, [r3, #0]
 800ca12:	f000 b825 	b.w	800ca60 <_malloc_r>
 800ca16:	bf00      	nop
 800ca18:	2000002c 	.word	0x2000002c

0800ca1c <sbrk_aligned>:
 800ca1c:	b570      	push	{r4, r5, r6, lr}
 800ca1e:	4e0f      	ldr	r6, [pc, #60]	@ (800ca5c <sbrk_aligned+0x40>)
 800ca20:	460c      	mov	r4, r1
 800ca22:	6831      	ldr	r1, [r6, #0]
 800ca24:	4605      	mov	r5, r0
 800ca26:	b911      	cbnz	r1, 800ca2e <sbrk_aligned+0x12>
 800ca28:	f000 fccc 	bl	800d3c4 <_sbrk_r>
 800ca2c:	6030      	str	r0, [r6, #0]
 800ca2e:	4621      	mov	r1, r4
 800ca30:	4628      	mov	r0, r5
 800ca32:	f000 fcc7 	bl	800d3c4 <_sbrk_r>
 800ca36:	1c43      	adds	r3, r0, #1
 800ca38:	d103      	bne.n	800ca42 <sbrk_aligned+0x26>
 800ca3a:	f04f 34ff 	mov.w	r4, #4294967295
 800ca3e:	4620      	mov	r0, r4
 800ca40:	bd70      	pop	{r4, r5, r6, pc}
 800ca42:	1cc4      	adds	r4, r0, #3
 800ca44:	f024 0403 	bic.w	r4, r4, #3
 800ca48:	42a0      	cmp	r0, r4
 800ca4a:	d0f8      	beq.n	800ca3e <sbrk_aligned+0x22>
 800ca4c:	1a21      	subs	r1, r4, r0
 800ca4e:	4628      	mov	r0, r5
 800ca50:	f000 fcb8 	bl	800d3c4 <_sbrk_r>
 800ca54:	3001      	adds	r0, #1
 800ca56:	d1f2      	bne.n	800ca3e <sbrk_aligned+0x22>
 800ca58:	e7ef      	b.n	800ca3a <sbrk_aligned+0x1e>
 800ca5a:	bf00      	nop
 800ca5c:	2000062c 	.word	0x2000062c

0800ca60 <_malloc_r>:
 800ca60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca64:	1ccd      	adds	r5, r1, #3
 800ca66:	f025 0503 	bic.w	r5, r5, #3
 800ca6a:	3508      	adds	r5, #8
 800ca6c:	2d0c      	cmp	r5, #12
 800ca6e:	bf38      	it	cc
 800ca70:	250c      	movcc	r5, #12
 800ca72:	2d00      	cmp	r5, #0
 800ca74:	4606      	mov	r6, r0
 800ca76:	db01      	blt.n	800ca7c <_malloc_r+0x1c>
 800ca78:	42a9      	cmp	r1, r5
 800ca7a:	d904      	bls.n	800ca86 <_malloc_r+0x26>
 800ca7c:	230c      	movs	r3, #12
 800ca7e:	6033      	str	r3, [r6, #0]
 800ca80:	2000      	movs	r0, #0
 800ca82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cb5c <_malloc_r+0xfc>
 800ca8a:	f000 f869 	bl	800cb60 <__malloc_lock>
 800ca8e:	f8d8 3000 	ldr.w	r3, [r8]
 800ca92:	461c      	mov	r4, r3
 800ca94:	bb44      	cbnz	r4, 800cae8 <_malloc_r+0x88>
 800ca96:	4629      	mov	r1, r5
 800ca98:	4630      	mov	r0, r6
 800ca9a:	f7ff ffbf 	bl	800ca1c <sbrk_aligned>
 800ca9e:	1c43      	adds	r3, r0, #1
 800caa0:	4604      	mov	r4, r0
 800caa2:	d158      	bne.n	800cb56 <_malloc_r+0xf6>
 800caa4:	f8d8 4000 	ldr.w	r4, [r8]
 800caa8:	4627      	mov	r7, r4
 800caaa:	2f00      	cmp	r7, #0
 800caac:	d143      	bne.n	800cb36 <_malloc_r+0xd6>
 800caae:	2c00      	cmp	r4, #0
 800cab0:	d04b      	beq.n	800cb4a <_malloc_r+0xea>
 800cab2:	6823      	ldr	r3, [r4, #0]
 800cab4:	4639      	mov	r1, r7
 800cab6:	4630      	mov	r0, r6
 800cab8:	eb04 0903 	add.w	r9, r4, r3
 800cabc:	f000 fc82 	bl	800d3c4 <_sbrk_r>
 800cac0:	4581      	cmp	r9, r0
 800cac2:	d142      	bne.n	800cb4a <_malloc_r+0xea>
 800cac4:	6821      	ldr	r1, [r4, #0]
 800cac6:	1a6d      	subs	r5, r5, r1
 800cac8:	4629      	mov	r1, r5
 800caca:	4630      	mov	r0, r6
 800cacc:	f7ff ffa6 	bl	800ca1c <sbrk_aligned>
 800cad0:	3001      	adds	r0, #1
 800cad2:	d03a      	beq.n	800cb4a <_malloc_r+0xea>
 800cad4:	6823      	ldr	r3, [r4, #0]
 800cad6:	442b      	add	r3, r5
 800cad8:	6023      	str	r3, [r4, #0]
 800cada:	f8d8 3000 	ldr.w	r3, [r8]
 800cade:	685a      	ldr	r2, [r3, #4]
 800cae0:	bb62      	cbnz	r2, 800cb3c <_malloc_r+0xdc>
 800cae2:	f8c8 7000 	str.w	r7, [r8]
 800cae6:	e00f      	b.n	800cb08 <_malloc_r+0xa8>
 800cae8:	6822      	ldr	r2, [r4, #0]
 800caea:	1b52      	subs	r2, r2, r5
 800caec:	d420      	bmi.n	800cb30 <_malloc_r+0xd0>
 800caee:	2a0b      	cmp	r2, #11
 800caf0:	d917      	bls.n	800cb22 <_malloc_r+0xc2>
 800caf2:	1961      	adds	r1, r4, r5
 800caf4:	42a3      	cmp	r3, r4
 800caf6:	6025      	str	r5, [r4, #0]
 800caf8:	bf18      	it	ne
 800cafa:	6059      	strne	r1, [r3, #4]
 800cafc:	6863      	ldr	r3, [r4, #4]
 800cafe:	bf08      	it	eq
 800cb00:	f8c8 1000 	streq.w	r1, [r8]
 800cb04:	5162      	str	r2, [r4, r5]
 800cb06:	604b      	str	r3, [r1, #4]
 800cb08:	4630      	mov	r0, r6
 800cb0a:	f000 f82f 	bl	800cb6c <__malloc_unlock>
 800cb0e:	f104 000b 	add.w	r0, r4, #11
 800cb12:	1d23      	adds	r3, r4, #4
 800cb14:	f020 0007 	bic.w	r0, r0, #7
 800cb18:	1ac2      	subs	r2, r0, r3
 800cb1a:	bf1c      	itt	ne
 800cb1c:	1a1b      	subne	r3, r3, r0
 800cb1e:	50a3      	strne	r3, [r4, r2]
 800cb20:	e7af      	b.n	800ca82 <_malloc_r+0x22>
 800cb22:	6862      	ldr	r2, [r4, #4]
 800cb24:	42a3      	cmp	r3, r4
 800cb26:	bf0c      	ite	eq
 800cb28:	f8c8 2000 	streq.w	r2, [r8]
 800cb2c:	605a      	strne	r2, [r3, #4]
 800cb2e:	e7eb      	b.n	800cb08 <_malloc_r+0xa8>
 800cb30:	4623      	mov	r3, r4
 800cb32:	6864      	ldr	r4, [r4, #4]
 800cb34:	e7ae      	b.n	800ca94 <_malloc_r+0x34>
 800cb36:	463c      	mov	r4, r7
 800cb38:	687f      	ldr	r7, [r7, #4]
 800cb3a:	e7b6      	b.n	800caaa <_malloc_r+0x4a>
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	42a3      	cmp	r3, r4
 800cb42:	d1fb      	bne.n	800cb3c <_malloc_r+0xdc>
 800cb44:	2300      	movs	r3, #0
 800cb46:	6053      	str	r3, [r2, #4]
 800cb48:	e7de      	b.n	800cb08 <_malloc_r+0xa8>
 800cb4a:	230c      	movs	r3, #12
 800cb4c:	6033      	str	r3, [r6, #0]
 800cb4e:	4630      	mov	r0, r6
 800cb50:	f000 f80c 	bl	800cb6c <__malloc_unlock>
 800cb54:	e794      	b.n	800ca80 <_malloc_r+0x20>
 800cb56:	6005      	str	r5, [r0, #0]
 800cb58:	e7d6      	b.n	800cb08 <_malloc_r+0xa8>
 800cb5a:	bf00      	nop
 800cb5c:	20000630 	.word	0x20000630

0800cb60 <__malloc_lock>:
 800cb60:	4801      	ldr	r0, [pc, #4]	@ (800cb68 <__malloc_lock+0x8>)
 800cb62:	f7ff b8ac 	b.w	800bcbe <__retarget_lock_acquire_recursive>
 800cb66:	bf00      	nop
 800cb68:	20000628 	.word	0x20000628

0800cb6c <__malloc_unlock>:
 800cb6c:	4801      	ldr	r0, [pc, #4]	@ (800cb74 <__malloc_unlock+0x8>)
 800cb6e:	f7ff b8a7 	b.w	800bcc0 <__retarget_lock_release_recursive>
 800cb72:	bf00      	nop
 800cb74:	20000628 	.word	0x20000628

0800cb78 <_Balloc>:
 800cb78:	b570      	push	{r4, r5, r6, lr}
 800cb7a:	69c6      	ldr	r6, [r0, #28]
 800cb7c:	4604      	mov	r4, r0
 800cb7e:	460d      	mov	r5, r1
 800cb80:	b976      	cbnz	r6, 800cba0 <_Balloc+0x28>
 800cb82:	2010      	movs	r0, #16
 800cb84:	f7ff ff42 	bl	800ca0c <malloc>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	61e0      	str	r0, [r4, #28]
 800cb8c:	b920      	cbnz	r0, 800cb98 <_Balloc+0x20>
 800cb8e:	4b18      	ldr	r3, [pc, #96]	@ (800cbf0 <_Balloc+0x78>)
 800cb90:	4818      	ldr	r0, [pc, #96]	@ (800cbf4 <_Balloc+0x7c>)
 800cb92:	216b      	movs	r1, #107	@ 0x6b
 800cb94:	f000 fc34 	bl	800d400 <__assert_func>
 800cb98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb9c:	6006      	str	r6, [r0, #0]
 800cb9e:	60c6      	str	r6, [r0, #12]
 800cba0:	69e6      	ldr	r6, [r4, #28]
 800cba2:	68f3      	ldr	r3, [r6, #12]
 800cba4:	b183      	cbz	r3, 800cbc8 <_Balloc+0x50>
 800cba6:	69e3      	ldr	r3, [r4, #28]
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cbae:	b9b8      	cbnz	r0, 800cbe0 <_Balloc+0x68>
 800cbb0:	2101      	movs	r1, #1
 800cbb2:	fa01 f605 	lsl.w	r6, r1, r5
 800cbb6:	1d72      	adds	r2, r6, #5
 800cbb8:	0092      	lsls	r2, r2, #2
 800cbba:	4620      	mov	r0, r4
 800cbbc:	f000 fc3e 	bl	800d43c <_calloc_r>
 800cbc0:	b160      	cbz	r0, 800cbdc <_Balloc+0x64>
 800cbc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cbc6:	e00e      	b.n	800cbe6 <_Balloc+0x6e>
 800cbc8:	2221      	movs	r2, #33	@ 0x21
 800cbca:	2104      	movs	r1, #4
 800cbcc:	4620      	mov	r0, r4
 800cbce:	f000 fc35 	bl	800d43c <_calloc_r>
 800cbd2:	69e3      	ldr	r3, [r4, #28]
 800cbd4:	60f0      	str	r0, [r6, #12]
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d1e4      	bne.n	800cba6 <_Balloc+0x2e>
 800cbdc:	2000      	movs	r0, #0
 800cbde:	bd70      	pop	{r4, r5, r6, pc}
 800cbe0:	6802      	ldr	r2, [r0, #0]
 800cbe2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbec:	e7f7      	b.n	800cbde <_Balloc+0x66>
 800cbee:	bf00      	nop
 800cbf0:	0800dab1 	.word	0x0800dab1
 800cbf4:	0800db31 	.word	0x0800db31

0800cbf8 <_Bfree>:
 800cbf8:	b570      	push	{r4, r5, r6, lr}
 800cbfa:	69c6      	ldr	r6, [r0, #28]
 800cbfc:	4605      	mov	r5, r0
 800cbfe:	460c      	mov	r4, r1
 800cc00:	b976      	cbnz	r6, 800cc20 <_Bfree+0x28>
 800cc02:	2010      	movs	r0, #16
 800cc04:	f7ff ff02 	bl	800ca0c <malloc>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	61e8      	str	r0, [r5, #28]
 800cc0c:	b920      	cbnz	r0, 800cc18 <_Bfree+0x20>
 800cc0e:	4b09      	ldr	r3, [pc, #36]	@ (800cc34 <_Bfree+0x3c>)
 800cc10:	4809      	ldr	r0, [pc, #36]	@ (800cc38 <_Bfree+0x40>)
 800cc12:	218f      	movs	r1, #143	@ 0x8f
 800cc14:	f000 fbf4 	bl	800d400 <__assert_func>
 800cc18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc1c:	6006      	str	r6, [r0, #0]
 800cc1e:	60c6      	str	r6, [r0, #12]
 800cc20:	b13c      	cbz	r4, 800cc32 <_Bfree+0x3a>
 800cc22:	69eb      	ldr	r3, [r5, #28]
 800cc24:	6862      	ldr	r2, [r4, #4]
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc2c:	6021      	str	r1, [r4, #0]
 800cc2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc32:	bd70      	pop	{r4, r5, r6, pc}
 800cc34:	0800dab1 	.word	0x0800dab1
 800cc38:	0800db31 	.word	0x0800db31

0800cc3c <__multadd>:
 800cc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc40:	690d      	ldr	r5, [r1, #16]
 800cc42:	4607      	mov	r7, r0
 800cc44:	460c      	mov	r4, r1
 800cc46:	461e      	mov	r6, r3
 800cc48:	f101 0c14 	add.w	ip, r1, #20
 800cc4c:	2000      	movs	r0, #0
 800cc4e:	f8dc 3000 	ldr.w	r3, [ip]
 800cc52:	b299      	uxth	r1, r3
 800cc54:	fb02 6101 	mla	r1, r2, r1, r6
 800cc58:	0c1e      	lsrs	r6, r3, #16
 800cc5a:	0c0b      	lsrs	r3, r1, #16
 800cc5c:	fb02 3306 	mla	r3, r2, r6, r3
 800cc60:	b289      	uxth	r1, r1
 800cc62:	3001      	adds	r0, #1
 800cc64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc68:	4285      	cmp	r5, r0
 800cc6a:	f84c 1b04 	str.w	r1, [ip], #4
 800cc6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc72:	dcec      	bgt.n	800cc4e <__multadd+0x12>
 800cc74:	b30e      	cbz	r6, 800ccba <__multadd+0x7e>
 800cc76:	68a3      	ldr	r3, [r4, #8]
 800cc78:	42ab      	cmp	r3, r5
 800cc7a:	dc19      	bgt.n	800ccb0 <__multadd+0x74>
 800cc7c:	6861      	ldr	r1, [r4, #4]
 800cc7e:	4638      	mov	r0, r7
 800cc80:	3101      	adds	r1, #1
 800cc82:	f7ff ff79 	bl	800cb78 <_Balloc>
 800cc86:	4680      	mov	r8, r0
 800cc88:	b928      	cbnz	r0, 800cc96 <__multadd+0x5a>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	4b0c      	ldr	r3, [pc, #48]	@ (800ccc0 <__multadd+0x84>)
 800cc8e:	480d      	ldr	r0, [pc, #52]	@ (800ccc4 <__multadd+0x88>)
 800cc90:	21ba      	movs	r1, #186	@ 0xba
 800cc92:	f000 fbb5 	bl	800d400 <__assert_func>
 800cc96:	6922      	ldr	r2, [r4, #16]
 800cc98:	3202      	adds	r2, #2
 800cc9a:	f104 010c 	add.w	r1, r4, #12
 800cc9e:	0092      	lsls	r2, r2, #2
 800cca0:	300c      	adds	r0, #12
 800cca2:	f000 fb9f 	bl	800d3e4 <memcpy>
 800cca6:	4621      	mov	r1, r4
 800cca8:	4638      	mov	r0, r7
 800ccaa:	f7ff ffa5 	bl	800cbf8 <_Bfree>
 800ccae:	4644      	mov	r4, r8
 800ccb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ccb4:	3501      	adds	r5, #1
 800ccb6:	615e      	str	r6, [r3, #20]
 800ccb8:	6125      	str	r5, [r4, #16]
 800ccba:	4620      	mov	r0, r4
 800ccbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc0:	0800db20 	.word	0x0800db20
 800ccc4:	0800db31 	.word	0x0800db31

0800ccc8 <__hi0bits>:
 800ccc8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cccc:	4603      	mov	r3, r0
 800ccce:	bf36      	itet	cc
 800ccd0:	0403      	lslcc	r3, r0, #16
 800ccd2:	2000      	movcs	r0, #0
 800ccd4:	2010      	movcc	r0, #16
 800ccd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ccda:	bf3c      	itt	cc
 800ccdc:	021b      	lslcc	r3, r3, #8
 800ccde:	3008      	addcc	r0, #8
 800cce0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cce4:	bf3c      	itt	cc
 800cce6:	011b      	lslcc	r3, r3, #4
 800cce8:	3004      	addcc	r0, #4
 800ccea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccee:	bf3c      	itt	cc
 800ccf0:	009b      	lslcc	r3, r3, #2
 800ccf2:	3002      	addcc	r0, #2
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	db05      	blt.n	800cd04 <__hi0bits+0x3c>
 800ccf8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ccfc:	f100 0001 	add.w	r0, r0, #1
 800cd00:	bf08      	it	eq
 800cd02:	2020      	moveq	r0, #32
 800cd04:	4770      	bx	lr

0800cd06 <__lo0bits>:
 800cd06:	6803      	ldr	r3, [r0, #0]
 800cd08:	4602      	mov	r2, r0
 800cd0a:	f013 0007 	ands.w	r0, r3, #7
 800cd0e:	d00b      	beq.n	800cd28 <__lo0bits+0x22>
 800cd10:	07d9      	lsls	r1, r3, #31
 800cd12:	d421      	bmi.n	800cd58 <__lo0bits+0x52>
 800cd14:	0798      	lsls	r0, r3, #30
 800cd16:	bf49      	itett	mi
 800cd18:	085b      	lsrmi	r3, r3, #1
 800cd1a:	089b      	lsrpl	r3, r3, #2
 800cd1c:	2001      	movmi	r0, #1
 800cd1e:	6013      	strmi	r3, [r2, #0]
 800cd20:	bf5c      	itt	pl
 800cd22:	6013      	strpl	r3, [r2, #0]
 800cd24:	2002      	movpl	r0, #2
 800cd26:	4770      	bx	lr
 800cd28:	b299      	uxth	r1, r3
 800cd2a:	b909      	cbnz	r1, 800cd30 <__lo0bits+0x2a>
 800cd2c:	0c1b      	lsrs	r3, r3, #16
 800cd2e:	2010      	movs	r0, #16
 800cd30:	b2d9      	uxtb	r1, r3
 800cd32:	b909      	cbnz	r1, 800cd38 <__lo0bits+0x32>
 800cd34:	3008      	adds	r0, #8
 800cd36:	0a1b      	lsrs	r3, r3, #8
 800cd38:	0719      	lsls	r1, r3, #28
 800cd3a:	bf04      	itt	eq
 800cd3c:	091b      	lsreq	r3, r3, #4
 800cd3e:	3004      	addeq	r0, #4
 800cd40:	0799      	lsls	r1, r3, #30
 800cd42:	bf04      	itt	eq
 800cd44:	089b      	lsreq	r3, r3, #2
 800cd46:	3002      	addeq	r0, #2
 800cd48:	07d9      	lsls	r1, r3, #31
 800cd4a:	d403      	bmi.n	800cd54 <__lo0bits+0x4e>
 800cd4c:	085b      	lsrs	r3, r3, #1
 800cd4e:	f100 0001 	add.w	r0, r0, #1
 800cd52:	d003      	beq.n	800cd5c <__lo0bits+0x56>
 800cd54:	6013      	str	r3, [r2, #0]
 800cd56:	4770      	bx	lr
 800cd58:	2000      	movs	r0, #0
 800cd5a:	4770      	bx	lr
 800cd5c:	2020      	movs	r0, #32
 800cd5e:	4770      	bx	lr

0800cd60 <__i2b>:
 800cd60:	b510      	push	{r4, lr}
 800cd62:	460c      	mov	r4, r1
 800cd64:	2101      	movs	r1, #1
 800cd66:	f7ff ff07 	bl	800cb78 <_Balloc>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	b928      	cbnz	r0, 800cd7a <__i2b+0x1a>
 800cd6e:	4b05      	ldr	r3, [pc, #20]	@ (800cd84 <__i2b+0x24>)
 800cd70:	4805      	ldr	r0, [pc, #20]	@ (800cd88 <__i2b+0x28>)
 800cd72:	f240 1145 	movw	r1, #325	@ 0x145
 800cd76:	f000 fb43 	bl	800d400 <__assert_func>
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	6144      	str	r4, [r0, #20]
 800cd7e:	6103      	str	r3, [r0, #16]
 800cd80:	bd10      	pop	{r4, pc}
 800cd82:	bf00      	nop
 800cd84:	0800db20 	.word	0x0800db20
 800cd88:	0800db31 	.word	0x0800db31

0800cd8c <__multiply>:
 800cd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd90:	4617      	mov	r7, r2
 800cd92:	690a      	ldr	r2, [r1, #16]
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	bfa8      	it	ge
 800cd9a:	463b      	movge	r3, r7
 800cd9c:	4689      	mov	r9, r1
 800cd9e:	bfa4      	itt	ge
 800cda0:	460f      	movge	r7, r1
 800cda2:	4699      	movge	r9, r3
 800cda4:	693d      	ldr	r5, [r7, #16]
 800cda6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	6879      	ldr	r1, [r7, #4]
 800cdae:	eb05 060a 	add.w	r6, r5, sl
 800cdb2:	42b3      	cmp	r3, r6
 800cdb4:	b085      	sub	sp, #20
 800cdb6:	bfb8      	it	lt
 800cdb8:	3101      	addlt	r1, #1
 800cdba:	f7ff fedd 	bl	800cb78 <_Balloc>
 800cdbe:	b930      	cbnz	r0, 800cdce <__multiply+0x42>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	4b41      	ldr	r3, [pc, #260]	@ (800cec8 <__multiply+0x13c>)
 800cdc4:	4841      	ldr	r0, [pc, #260]	@ (800cecc <__multiply+0x140>)
 800cdc6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cdca:	f000 fb19 	bl	800d400 <__assert_func>
 800cdce:	f100 0414 	add.w	r4, r0, #20
 800cdd2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cdd6:	4623      	mov	r3, r4
 800cdd8:	2200      	movs	r2, #0
 800cdda:	4573      	cmp	r3, lr
 800cddc:	d320      	bcc.n	800ce20 <__multiply+0x94>
 800cdde:	f107 0814 	add.w	r8, r7, #20
 800cde2:	f109 0114 	add.w	r1, r9, #20
 800cde6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cdea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cdee:	9302      	str	r3, [sp, #8]
 800cdf0:	1beb      	subs	r3, r5, r7
 800cdf2:	3b15      	subs	r3, #21
 800cdf4:	f023 0303 	bic.w	r3, r3, #3
 800cdf8:	3304      	adds	r3, #4
 800cdfa:	3715      	adds	r7, #21
 800cdfc:	42bd      	cmp	r5, r7
 800cdfe:	bf38      	it	cc
 800ce00:	2304      	movcc	r3, #4
 800ce02:	9301      	str	r3, [sp, #4]
 800ce04:	9b02      	ldr	r3, [sp, #8]
 800ce06:	9103      	str	r1, [sp, #12]
 800ce08:	428b      	cmp	r3, r1
 800ce0a:	d80c      	bhi.n	800ce26 <__multiply+0x9a>
 800ce0c:	2e00      	cmp	r6, #0
 800ce0e:	dd03      	ble.n	800ce18 <__multiply+0x8c>
 800ce10:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d055      	beq.n	800cec4 <__multiply+0x138>
 800ce18:	6106      	str	r6, [r0, #16]
 800ce1a:	b005      	add	sp, #20
 800ce1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce20:	f843 2b04 	str.w	r2, [r3], #4
 800ce24:	e7d9      	b.n	800cdda <__multiply+0x4e>
 800ce26:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce2a:	f1ba 0f00 	cmp.w	sl, #0
 800ce2e:	d01f      	beq.n	800ce70 <__multiply+0xe4>
 800ce30:	46c4      	mov	ip, r8
 800ce32:	46a1      	mov	r9, r4
 800ce34:	2700      	movs	r7, #0
 800ce36:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ce3a:	f8d9 3000 	ldr.w	r3, [r9]
 800ce3e:	fa1f fb82 	uxth.w	fp, r2
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce48:	443b      	add	r3, r7
 800ce4a:	f8d9 7000 	ldr.w	r7, [r9]
 800ce4e:	0c12      	lsrs	r2, r2, #16
 800ce50:	0c3f      	lsrs	r7, r7, #16
 800ce52:	fb0a 7202 	mla	r2, sl, r2, r7
 800ce56:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce60:	4565      	cmp	r5, ip
 800ce62:	f849 3b04 	str.w	r3, [r9], #4
 800ce66:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ce6a:	d8e4      	bhi.n	800ce36 <__multiply+0xaa>
 800ce6c:	9b01      	ldr	r3, [sp, #4]
 800ce6e:	50e7      	str	r7, [r4, r3]
 800ce70:	9b03      	ldr	r3, [sp, #12]
 800ce72:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce76:	3104      	adds	r1, #4
 800ce78:	f1b9 0f00 	cmp.w	r9, #0
 800ce7c:	d020      	beq.n	800cec0 <__multiply+0x134>
 800ce7e:	6823      	ldr	r3, [r4, #0]
 800ce80:	4647      	mov	r7, r8
 800ce82:	46a4      	mov	ip, r4
 800ce84:	f04f 0a00 	mov.w	sl, #0
 800ce88:	f8b7 b000 	ldrh.w	fp, [r7]
 800ce8c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ce90:	fb09 220b 	mla	r2, r9, fp, r2
 800ce94:	4452      	add	r2, sl
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce9c:	f84c 3b04 	str.w	r3, [ip], #4
 800cea0:	f857 3b04 	ldr.w	r3, [r7], #4
 800cea4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cea8:	f8bc 3000 	ldrh.w	r3, [ip]
 800ceac:	fb09 330a 	mla	r3, r9, sl, r3
 800ceb0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ceb4:	42bd      	cmp	r5, r7
 800ceb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ceba:	d8e5      	bhi.n	800ce88 <__multiply+0xfc>
 800cebc:	9a01      	ldr	r2, [sp, #4]
 800cebe:	50a3      	str	r3, [r4, r2]
 800cec0:	3404      	adds	r4, #4
 800cec2:	e79f      	b.n	800ce04 <__multiply+0x78>
 800cec4:	3e01      	subs	r6, #1
 800cec6:	e7a1      	b.n	800ce0c <__multiply+0x80>
 800cec8:	0800db20 	.word	0x0800db20
 800cecc:	0800db31 	.word	0x0800db31

0800ced0 <__pow5mult>:
 800ced0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ced4:	4615      	mov	r5, r2
 800ced6:	f012 0203 	ands.w	r2, r2, #3
 800ceda:	4607      	mov	r7, r0
 800cedc:	460e      	mov	r6, r1
 800cede:	d007      	beq.n	800cef0 <__pow5mult+0x20>
 800cee0:	4c25      	ldr	r4, [pc, #148]	@ (800cf78 <__pow5mult+0xa8>)
 800cee2:	3a01      	subs	r2, #1
 800cee4:	2300      	movs	r3, #0
 800cee6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ceea:	f7ff fea7 	bl	800cc3c <__multadd>
 800ceee:	4606      	mov	r6, r0
 800cef0:	10ad      	asrs	r5, r5, #2
 800cef2:	d03d      	beq.n	800cf70 <__pow5mult+0xa0>
 800cef4:	69fc      	ldr	r4, [r7, #28]
 800cef6:	b97c      	cbnz	r4, 800cf18 <__pow5mult+0x48>
 800cef8:	2010      	movs	r0, #16
 800cefa:	f7ff fd87 	bl	800ca0c <malloc>
 800cefe:	4602      	mov	r2, r0
 800cf00:	61f8      	str	r0, [r7, #28]
 800cf02:	b928      	cbnz	r0, 800cf10 <__pow5mult+0x40>
 800cf04:	4b1d      	ldr	r3, [pc, #116]	@ (800cf7c <__pow5mult+0xac>)
 800cf06:	481e      	ldr	r0, [pc, #120]	@ (800cf80 <__pow5mult+0xb0>)
 800cf08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf0c:	f000 fa78 	bl	800d400 <__assert_func>
 800cf10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf14:	6004      	str	r4, [r0, #0]
 800cf16:	60c4      	str	r4, [r0, #12]
 800cf18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf20:	b94c      	cbnz	r4, 800cf36 <__pow5mult+0x66>
 800cf22:	f240 2171 	movw	r1, #625	@ 0x271
 800cf26:	4638      	mov	r0, r7
 800cf28:	f7ff ff1a 	bl	800cd60 <__i2b>
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf32:	4604      	mov	r4, r0
 800cf34:	6003      	str	r3, [r0, #0]
 800cf36:	f04f 0900 	mov.w	r9, #0
 800cf3a:	07eb      	lsls	r3, r5, #31
 800cf3c:	d50a      	bpl.n	800cf54 <__pow5mult+0x84>
 800cf3e:	4631      	mov	r1, r6
 800cf40:	4622      	mov	r2, r4
 800cf42:	4638      	mov	r0, r7
 800cf44:	f7ff ff22 	bl	800cd8c <__multiply>
 800cf48:	4631      	mov	r1, r6
 800cf4a:	4680      	mov	r8, r0
 800cf4c:	4638      	mov	r0, r7
 800cf4e:	f7ff fe53 	bl	800cbf8 <_Bfree>
 800cf52:	4646      	mov	r6, r8
 800cf54:	106d      	asrs	r5, r5, #1
 800cf56:	d00b      	beq.n	800cf70 <__pow5mult+0xa0>
 800cf58:	6820      	ldr	r0, [r4, #0]
 800cf5a:	b938      	cbnz	r0, 800cf6c <__pow5mult+0x9c>
 800cf5c:	4622      	mov	r2, r4
 800cf5e:	4621      	mov	r1, r4
 800cf60:	4638      	mov	r0, r7
 800cf62:	f7ff ff13 	bl	800cd8c <__multiply>
 800cf66:	6020      	str	r0, [r4, #0]
 800cf68:	f8c0 9000 	str.w	r9, [r0]
 800cf6c:	4604      	mov	r4, r0
 800cf6e:	e7e4      	b.n	800cf3a <__pow5mult+0x6a>
 800cf70:	4630      	mov	r0, r6
 800cf72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf76:	bf00      	nop
 800cf78:	0800dbe4 	.word	0x0800dbe4
 800cf7c:	0800dab1 	.word	0x0800dab1
 800cf80:	0800db31 	.word	0x0800db31

0800cf84 <__lshift>:
 800cf84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf88:	460c      	mov	r4, r1
 800cf8a:	6849      	ldr	r1, [r1, #4]
 800cf8c:	6923      	ldr	r3, [r4, #16]
 800cf8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf92:	68a3      	ldr	r3, [r4, #8]
 800cf94:	4607      	mov	r7, r0
 800cf96:	4691      	mov	r9, r2
 800cf98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf9c:	f108 0601 	add.w	r6, r8, #1
 800cfa0:	42b3      	cmp	r3, r6
 800cfa2:	db0b      	blt.n	800cfbc <__lshift+0x38>
 800cfa4:	4638      	mov	r0, r7
 800cfa6:	f7ff fde7 	bl	800cb78 <_Balloc>
 800cfaa:	4605      	mov	r5, r0
 800cfac:	b948      	cbnz	r0, 800cfc2 <__lshift+0x3e>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	4b28      	ldr	r3, [pc, #160]	@ (800d054 <__lshift+0xd0>)
 800cfb2:	4829      	ldr	r0, [pc, #164]	@ (800d058 <__lshift+0xd4>)
 800cfb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cfb8:	f000 fa22 	bl	800d400 <__assert_func>
 800cfbc:	3101      	adds	r1, #1
 800cfbe:	005b      	lsls	r3, r3, #1
 800cfc0:	e7ee      	b.n	800cfa0 <__lshift+0x1c>
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	f100 0114 	add.w	r1, r0, #20
 800cfc8:	f100 0210 	add.w	r2, r0, #16
 800cfcc:	4618      	mov	r0, r3
 800cfce:	4553      	cmp	r3, sl
 800cfd0:	db33      	blt.n	800d03a <__lshift+0xb6>
 800cfd2:	6920      	ldr	r0, [r4, #16]
 800cfd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cfd8:	f104 0314 	add.w	r3, r4, #20
 800cfdc:	f019 091f 	ands.w	r9, r9, #31
 800cfe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cfe4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cfe8:	d02b      	beq.n	800d042 <__lshift+0xbe>
 800cfea:	f1c9 0e20 	rsb	lr, r9, #32
 800cfee:	468a      	mov	sl, r1
 800cff0:	2200      	movs	r2, #0
 800cff2:	6818      	ldr	r0, [r3, #0]
 800cff4:	fa00 f009 	lsl.w	r0, r0, r9
 800cff8:	4310      	orrs	r0, r2
 800cffa:	f84a 0b04 	str.w	r0, [sl], #4
 800cffe:	f853 2b04 	ldr.w	r2, [r3], #4
 800d002:	459c      	cmp	ip, r3
 800d004:	fa22 f20e 	lsr.w	r2, r2, lr
 800d008:	d8f3      	bhi.n	800cff2 <__lshift+0x6e>
 800d00a:	ebac 0304 	sub.w	r3, ip, r4
 800d00e:	3b15      	subs	r3, #21
 800d010:	f023 0303 	bic.w	r3, r3, #3
 800d014:	3304      	adds	r3, #4
 800d016:	f104 0015 	add.w	r0, r4, #21
 800d01a:	4560      	cmp	r0, ip
 800d01c:	bf88      	it	hi
 800d01e:	2304      	movhi	r3, #4
 800d020:	50ca      	str	r2, [r1, r3]
 800d022:	b10a      	cbz	r2, 800d028 <__lshift+0xa4>
 800d024:	f108 0602 	add.w	r6, r8, #2
 800d028:	3e01      	subs	r6, #1
 800d02a:	4638      	mov	r0, r7
 800d02c:	612e      	str	r6, [r5, #16]
 800d02e:	4621      	mov	r1, r4
 800d030:	f7ff fde2 	bl	800cbf8 <_Bfree>
 800d034:	4628      	mov	r0, r5
 800d036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d03a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d03e:	3301      	adds	r3, #1
 800d040:	e7c5      	b.n	800cfce <__lshift+0x4a>
 800d042:	3904      	subs	r1, #4
 800d044:	f853 2b04 	ldr.w	r2, [r3], #4
 800d048:	f841 2f04 	str.w	r2, [r1, #4]!
 800d04c:	459c      	cmp	ip, r3
 800d04e:	d8f9      	bhi.n	800d044 <__lshift+0xc0>
 800d050:	e7ea      	b.n	800d028 <__lshift+0xa4>
 800d052:	bf00      	nop
 800d054:	0800db20 	.word	0x0800db20
 800d058:	0800db31 	.word	0x0800db31

0800d05c <__mcmp>:
 800d05c:	690a      	ldr	r2, [r1, #16]
 800d05e:	4603      	mov	r3, r0
 800d060:	6900      	ldr	r0, [r0, #16]
 800d062:	1a80      	subs	r0, r0, r2
 800d064:	b530      	push	{r4, r5, lr}
 800d066:	d10e      	bne.n	800d086 <__mcmp+0x2a>
 800d068:	3314      	adds	r3, #20
 800d06a:	3114      	adds	r1, #20
 800d06c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d070:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d074:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d078:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d07c:	4295      	cmp	r5, r2
 800d07e:	d003      	beq.n	800d088 <__mcmp+0x2c>
 800d080:	d205      	bcs.n	800d08e <__mcmp+0x32>
 800d082:	f04f 30ff 	mov.w	r0, #4294967295
 800d086:	bd30      	pop	{r4, r5, pc}
 800d088:	42a3      	cmp	r3, r4
 800d08a:	d3f3      	bcc.n	800d074 <__mcmp+0x18>
 800d08c:	e7fb      	b.n	800d086 <__mcmp+0x2a>
 800d08e:	2001      	movs	r0, #1
 800d090:	e7f9      	b.n	800d086 <__mcmp+0x2a>
	...

0800d094 <__mdiff>:
 800d094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d098:	4689      	mov	r9, r1
 800d09a:	4606      	mov	r6, r0
 800d09c:	4611      	mov	r1, r2
 800d09e:	4648      	mov	r0, r9
 800d0a0:	4614      	mov	r4, r2
 800d0a2:	f7ff ffdb 	bl	800d05c <__mcmp>
 800d0a6:	1e05      	subs	r5, r0, #0
 800d0a8:	d112      	bne.n	800d0d0 <__mdiff+0x3c>
 800d0aa:	4629      	mov	r1, r5
 800d0ac:	4630      	mov	r0, r6
 800d0ae:	f7ff fd63 	bl	800cb78 <_Balloc>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	b928      	cbnz	r0, 800d0c2 <__mdiff+0x2e>
 800d0b6:	4b3f      	ldr	r3, [pc, #252]	@ (800d1b4 <__mdiff+0x120>)
 800d0b8:	f240 2137 	movw	r1, #567	@ 0x237
 800d0bc:	483e      	ldr	r0, [pc, #248]	@ (800d1b8 <__mdiff+0x124>)
 800d0be:	f000 f99f 	bl	800d400 <__assert_func>
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0c8:	4610      	mov	r0, r2
 800d0ca:	b003      	add	sp, #12
 800d0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d0:	bfbc      	itt	lt
 800d0d2:	464b      	movlt	r3, r9
 800d0d4:	46a1      	movlt	r9, r4
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d0dc:	bfba      	itte	lt
 800d0de:	461c      	movlt	r4, r3
 800d0e0:	2501      	movlt	r5, #1
 800d0e2:	2500      	movge	r5, #0
 800d0e4:	f7ff fd48 	bl	800cb78 <_Balloc>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	b918      	cbnz	r0, 800d0f4 <__mdiff+0x60>
 800d0ec:	4b31      	ldr	r3, [pc, #196]	@ (800d1b4 <__mdiff+0x120>)
 800d0ee:	f240 2145 	movw	r1, #581	@ 0x245
 800d0f2:	e7e3      	b.n	800d0bc <__mdiff+0x28>
 800d0f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d0f8:	6926      	ldr	r6, [r4, #16]
 800d0fa:	60c5      	str	r5, [r0, #12]
 800d0fc:	f109 0310 	add.w	r3, r9, #16
 800d100:	f109 0514 	add.w	r5, r9, #20
 800d104:	f104 0e14 	add.w	lr, r4, #20
 800d108:	f100 0b14 	add.w	fp, r0, #20
 800d10c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d110:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d114:	9301      	str	r3, [sp, #4]
 800d116:	46d9      	mov	r9, fp
 800d118:	f04f 0c00 	mov.w	ip, #0
 800d11c:	9b01      	ldr	r3, [sp, #4]
 800d11e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d122:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d126:	9301      	str	r3, [sp, #4]
 800d128:	fa1f f38a 	uxth.w	r3, sl
 800d12c:	4619      	mov	r1, r3
 800d12e:	b283      	uxth	r3, r0
 800d130:	1acb      	subs	r3, r1, r3
 800d132:	0c00      	lsrs	r0, r0, #16
 800d134:	4463      	add	r3, ip
 800d136:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d13a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d13e:	b29b      	uxth	r3, r3
 800d140:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d144:	4576      	cmp	r6, lr
 800d146:	f849 3b04 	str.w	r3, [r9], #4
 800d14a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d14e:	d8e5      	bhi.n	800d11c <__mdiff+0x88>
 800d150:	1b33      	subs	r3, r6, r4
 800d152:	3b15      	subs	r3, #21
 800d154:	f023 0303 	bic.w	r3, r3, #3
 800d158:	3415      	adds	r4, #21
 800d15a:	3304      	adds	r3, #4
 800d15c:	42a6      	cmp	r6, r4
 800d15e:	bf38      	it	cc
 800d160:	2304      	movcc	r3, #4
 800d162:	441d      	add	r5, r3
 800d164:	445b      	add	r3, fp
 800d166:	461e      	mov	r6, r3
 800d168:	462c      	mov	r4, r5
 800d16a:	4544      	cmp	r4, r8
 800d16c:	d30e      	bcc.n	800d18c <__mdiff+0xf8>
 800d16e:	f108 0103 	add.w	r1, r8, #3
 800d172:	1b49      	subs	r1, r1, r5
 800d174:	f021 0103 	bic.w	r1, r1, #3
 800d178:	3d03      	subs	r5, #3
 800d17a:	45a8      	cmp	r8, r5
 800d17c:	bf38      	it	cc
 800d17e:	2100      	movcc	r1, #0
 800d180:	440b      	add	r3, r1
 800d182:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d186:	b191      	cbz	r1, 800d1ae <__mdiff+0x11a>
 800d188:	6117      	str	r7, [r2, #16]
 800d18a:	e79d      	b.n	800d0c8 <__mdiff+0x34>
 800d18c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d190:	46e6      	mov	lr, ip
 800d192:	0c08      	lsrs	r0, r1, #16
 800d194:	fa1c fc81 	uxtah	ip, ip, r1
 800d198:	4471      	add	r1, lr
 800d19a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d19e:	b289      	uxth	r1, r1
 800d1a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d1a4:	f846 1b04 	str.w	r1, [r6], #4
 800d1a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1ac:	e7dd      	b.n	800d16a <__mdiff+0xd6>
 800d1ae:	3f01      	subs	r7, #1
 800d1b0:	e7e7      	b.n	800d182 <__mdiff+0xee>
 800d1b2:	bf00      	nop
 800d1b4:	0800db20 	.word	0x0800db20
 800d1b8:	0800db31 	.word	0x0800db31

0800d1bc <__d2b>:
 800d1bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d1c0:	460f      	mov	r7, r1
 800d1c2:	2101      	movs	r1, #1
 800d1c4:	ec59 8b10 	vmov	r8, r9, d0
 800d1c8:	4616      	mov	r6, r2
 800d1ca:	f7ff fcd5 	bl	800cb78 <_Balloc>
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	b930      	cbnz	r0, 800d1e0 <__d2b+0x24>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	4b23      	ldr	r3, [pc, #140]	@ (800d264 <__d2b+0xa8>)
 800d1d6:	4824      	ldr	r0, [pc, #144]	@ (800d268 <__d2b+0xac>)
 800d1d8:	f240 310f 	movw	r1, #783	@ 0x30f
 800d1dc:	f000 f910 	bl	800d400 <__assert_func>
 800d1e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d1e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d1e8:	b10d      	cbz	r5, 800d1ee <__d2b+0x32>
 800d1ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d1ee:	9301      	str	r3, [sp, #4]
 800d1f0:	f1b8 0300 	subs.w	r3, r8, #0
 800d1f4:	d023      	beq.n	800d23e <__d2b+0x82>
 800d1f6:	4668      	mov	r0, sp
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	f7ff fd84 	bl	800cd06 <__lo0bits>
 800d1fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d202:	b1d0      	cbz	r0, 800d23a <__d2b+0x7e>
 800d204:	f1c0 0320 	rsb	r3, r0, #32
 800d208:	fa02 f303 	lsl.w	r3, r2, r3
 800d20c:	430b      	orrs	r3, r1
 800d20e:	40c2      	lsrs	r2, r0
 800d210:	6163      	str	r3, [r4, #20]
 800d212:	9201      	str	r2, [sp, #4]
 800d214:	9b01      	ldr	r3, [sp, #4]
 800d216:	61a3      	str	r3, [r4, #24]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	bf0c      	ite	eq
 800d21c:	2201      	moveq	r2, #1
 800d21e:	2202      	movne	r2, #2
 800d220:	6122      	str	r2, [r4, #16]
 800d222:	b1a5      	cbz	r5, 800d24e <__d2b+0x92>
 800d224:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d228:	4405      	add	r5, r0
 800d22a:	603d      	str	r5, [r7, #0]
 800d22c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d230:	6030      	str	r0, [r6, #0]
 800d232:	4620      	mov	r0, r4
 800d234:	b003      	add	sp, #12
 800d236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d23a:	6161      	str	r1, [r4, #20]
 800d23c:	e7ea      	b.n	800d214 <__d2b+0x58>
 800d23e:	a801      	add	r0, sp, #4
 800d240:	f7ff fd61 	bl	800cd06 <__lo0bits>
 800d244:	9b01      	ldr	r3, [sp, #4]
 800d246:	6163      	str	r3, [r4, #20]
 800d248:	3020      	adds	r0, #32
 800d24a:	2201      	movs	r2, #1
 800d24c:	e7e8      	b.n	800d220 <__d2b+0x64>
 800d24e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d252:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d256:	6038      	str	r0, [r7, #0]
 800d258:	6918      	ldr	r0, [r3, #16]
 800d25a:	f7ff fd35 	bl	800ccc8 <__hi0bits>
 800d25e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d262:	e7e5      	b.n	800d230 <__d2b+0x74>
 800d264:	0800db20 	.word	0x0800db20
 800d268:	0800db31 	.word	0x0800db31

0800d26c <__sflush_r>:
 800d26c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d274:	0716      	lsls	r6, r2, #28
 800d276:	4605      	mov	r5, r0
 800d278:	460c      	mov	r4, r1
 800d27a:	d454      	bmi.n	800d326 <__sflush_r+0xba>
 800d27c:	684b      	ldr	r3, [r1, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	dc02      	bgt.n	800d288 <__sflush_r+0x1c>
 800d282:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d284:	2b00      	cmp	r3, #0
 800d286:	dd48      	ble.n	800d31a <__sflush_r+0xae>
 800d288:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d28a:	2e00      	cmp	r6, #0
 800d28c:	d045      	beq.n	800d31a <__sflush_r+0xae>
 800d28e:	2300      	movs	r3, #0
 800d290:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d294:	682f      	ldr	r7, [r5, #0]
 800d296:	6a21      	ldr	r1, [r4, #32]
 800d298:	602b      	str	r3, [r5, #0]
 800d29a:	d030      	beq.n	800d2fe <__sflush_r+0x92>
 800d29c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d29e:	89a3      	ldrh	r3, [r4, #12]
 800d2a0:	0759      	lsls	r1, r3, #29
 800d2a2:	d505      	bpl.n	800d2b0 <__sflush_r+0x44>
 800d2a4:	6863      	ldr	r3, [r4, #4]
 800d2a6:	1ad2      	subs	r2, r2, r3
 800d2a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d2aa:	b10b      	cbz	r3, 800d2b0 <__sflush_r+0x44>
 800d2ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d2ae:	1ad2      	subs	r2, r2, r3
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d2b4:	6a21      	ldr	r1, [r4, #32]
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	47b0      	blx	r6
 800d2ba:	1c43      	adds	r3, r0, #1
 800d2bc:	89a3      	ldrh	r3, [r4, #12]
 800d2be:	d106      	bne.n	800d2ce <__sflush_r+0x62>
 800d2c0:	6829      	ldr	r1, [r5, #0]
 800d2c2:	291d      	cmp	r1, #29
 800d2c4:	d82b      	bhi.n	800d31e <__sflush_r+0xb2>
 800d2c6:	4a2a      	ldr	r2, [pc, #168]	@ (800d370 <__sflush_r+0x104>)
 800d2c8:	40ca      	lsrs	r2, r1
 800d2ca:	07d6      	lsls	r6, r2, #31
 800d2cc:	d527      	bpl.n	800d31e <__sflush_r+0xb2>
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	6062      	str	r2, [r4, #4]
 800d2d2:	04d9      	lsls	r1, r3, #19
 800d2d4:	6922      	ldr	r2, [r4, #16]
 800d2d6:	6022      	str	r2, [r4, #0]
 800d2d8:	d504      	bpl.n	800d2e4 <__sflush_r+0x78>
 800d2da:	1c42      	adds	r2, r0, #1
 800d2dc:	d101      	bne.n	800d2e2 <__sflush_r+0x76>
 800d2de:	682b      	ldr	r3, [r5, #0]
 800d2e0:	b903      	cbnz	r3, 800d2e4 <__sflush_r+0x78>
 800d2e2:	6560      	str	r0, [r4, #84]	@ 0x54
 800d2e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d2e6:	602f      	str	r7, [r5, #0]
 800d2e8:	b1b9      	cbz	r1, 800d31a <__sflush_r+0xae>
 800d2ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2ee:	4299      	cmp	r1, r3
 800d2f0:	d002      	beq.n	800d2f8 <__sflush_r+0x8c>
 800d2f2:	4628      	mov	r0, r5
 800d2f4:	f7ff fb40 	bl	800c978 <_free_r>
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2fc:	e00d      	b.n	800d31a <__sflush_r+0xae>
 800d2fe:	2301      	movs	r3, #1
 800d300:	4628      	mov	r0, r5
 800d302:	47b0      	blx	r6
 800d304:	4602      	mov	r2, r0
 800d306:	1c50      	adds	r0, r2, #1
 800d308:	d1c9      	bne.n	800d29e <__sflush_r+0x32>
 800d30a:	682b      	ldr	r3, [r5, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d0c6      	beq.n	800d29e <__sflush_r+0x32>
 800d310:	2b1d      	cmp	r3, #29
 800d312:	d001      	beq.n	800d318 <__sflush_r+0xac>
 800d314:	2b16      	cmp	r3, #22
 800d316:	d11e      	bne.n	800d356 <__sflush_r+0xea>
 800d318:	602f      	str	r7, [r5, #0]
 800d31a:	2000      	movs	r0, #0
 800d31c:	e022      	b.n	800d364 <__sflush_r+0xf8>
 800d31e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d322:	b21b      	sxth	r3, r3
 800d324:	e01b      	b.n	800d35e <__sflush_r+0xf2>
 800d326:	690f      	ldr	r7, [r1, #16]
 800d328:	2f00      	cmp	r7, #0
 800d32a:	d0f6      	beq.n	800d31a <__sflush_r+0xae>
 800d32c:	0793      	lsls	r3, r2, #30
 800d32e:	680e      	ldr	r6, [r1, #0]
 800d330:	bf08      	it	eq
 800d332:	694b      	ldreq	r3, [r1, #20]
 800d334:	600f      	str	r7, [r1, #0]
 800d336:	bf18      	it	ne
 800d338:	2300      	movne	r3, #0
 800d33a:	eba6 0807 	sub.w	r8, r6, r7
 800d33e:	608b      	str	r3, [r1, #8]
 800d340:	f1b8 0f00 	cmp.w	r8, #0
 800d344:	dde9      	ble.n	800d31a <__sflush_r+0xae>
 800d346:	6a21      	ldr	r1, [r4, #32]
 800d348:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d34a:	4643      	mov	r3, r8
 800d34c:	463a      	mov	r2, r7
 800d34e:	4628      	mov	r0, r5
 800d350:	47b0      	blx	r6
 800d352:	2800      	cmp	r0, #0
 800d354:	dc08      	bgt.n	800d368 <__sflush_r+0xfc>
 800d356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d35a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d35e:	81a3      	strh	r3, [r4, #12]
 800d360:	f04f 30ff 	mov.w	r0, #4294967295
 800d364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d368:	4407      	add	r7, r0
 800d36a:	eba8 0800 	sub.w	r8, r8, r0
 800d36e:	e7e7      	b.n	800d340 <__sflush_r+0xd4>
 800d370:	20400001 	.word	0x20400001

0800d374 <_fflush_r>:
 800d374:	b538      	push	{r3, r4, r5, lr}
 800d376:	690b      	ldr	r3, [r1, #16]
 800d378:	4605      	mov	r5, r0
 800d37a:	460c      	mov	r4, r1
 800d37c:	b913      	cbnz	r3, 800d384 <_fflush_r+0x10>
 800d37e:	2500      	movs	r5, #0
 800d380:	4628      	mov	r0, r5
 800d382:	bd38      	pop	{r3, r4, r5, pc}
 800d384:	b118      	cbz	r0, 800d38e <_fflush_r+0x1a>
 800d386:	6a03      	ldr	r3, [r0, #32]
 800d388:	b90b      	cbnz	r3, 800d38e <_fflush_r+0x1a>
 800d38a:	f7fe fba1 	bl	800bad0 <__sinit>
 800d38e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d0f3      	beq.n	800d37e <_fflush_r+0xa>
 800d396:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d398:	07d0      	lsls	r0, r2, #31
 800d39a:	d404      	bmi.n	800d3a6 <_fflush_r+0x32>
 800d39c:	0599      	lsls	r1, r3, #22
 800d39e:	d402      	bmi.n	800d3a6 <_fflush_r+0x32>
 800d3a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3a2:	f7fe fc8c 	bl	800bcbe <__retarget_lock_acquire_recursive>
 800d3a6:	4628      	mov	r0, r5
 800d3a8:	4621      	mov	r1, r4
 800d3aa:	f7ff ff5f 	bl	800d26c <__sflush_r>
 800d3ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d3b0:	07da      	lsls	r2, r3, #31
 800d3b2:	4605      	mov	r5, r0
 800d3b4:	d4e4      	bmi.n	800d380 <_fflush_r+0xc>
 800d3b6:	89a3      	ldrh	r3, [r4, #12]
 800d3b8:	059b      	lsls	r3, r3, #22
 800d3ba:	d4e1      	bmi.n	800d380 <_fflush_r+0xc>
 800d3bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3be:	f7fe fc7f 	bl	800bcc0 <__retarget_lock_release_recursive>
 800d3c2:	e7dd      	b.n	800d380 <_fflush_r+0xc>

0800d3c4 <_sbrk_r>:
 800d3c4:	b538      	push	{r3, r4, r5, lr}
 800d3c6:	4d06      	ldr	r5, [pc, #24]	@ (800d3e0 <_sbrk_r+0x1c>)
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	4608      	mov	r0, r1
 800d3ce:	602b      	str	r3, [r5, #0]
 800d3d0:	f7f4 ffdc 	bl	800238c <_sbrk>
 800d3d4:	1c43      	adds	r3, r0, #1
 800d3d6:	d102      	bne.n	800d3de <_sbrk_r+0x1a>
 800d3d8:	682b      	ldr	r3, [r5, #0]
 800d3da:	b103      	cbz	r3, 800d3de <_sbrk_r+0x1a>
 800d3dc:	6023      	str	r3, [r4, #0]
 800d3de:	bd38      	pop	{r3, r4, r5, pc}
 800d3e0:	20000624 	.word	0x20000624

0800d3e4 <memcpy>:
 800d3e4:	440a      	add	r2, r1
 800d3e6:	4291      	cmp	r1, r2
 800d3e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3ec:	d100      	bne.n	800d3f0 <memcpy+0xc>
 800d3ee:	4770      	bx	lr
 800d3f0:	b510      	push	{r4, lr}
 800d3f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3fa:	4291      	cmp	r1, r2
 800d3fc:	d1f9      	bne.n	800d3f2 <memcpy+0xe>
 800d3fe:	bd10      	pop	{r4, pc}

0800d400 <__assert_func>:
 800d400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d402:	4614      	mov	r4, r2
 800d404:	461a      	mov	r2, r3
 800d406:	4b09      	ldr	r3, [pc, #36]	@ (800d42c <__assert_func+0x2c>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4605      	mov	r5, r0
 800d40c:	68d8      	ldr	r0, [r3, #12]
 800d40e:	b14c      	cbz	r4, 800d424 <__assert_func+0x24>
 800d410:	4b07      	ldr	r3, [pc, #28]	@ (800d430 <__assert_func+0x30>)
 800d412:	9100      	str	r1, [sp, #0]
 800d414:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d418:	4906      	ldr	r1, [pc, #24]	@ (800d434 <__assert_func+0x34>)
 800d41a:	462b      	mov	r3, r5
 800d41c:	f000 f842 	bl	800d4a4 <fiprintf>
 800d420:	f000 f852 	bl	800d4c8 <abort>
 800d424:	4b04      	ldr	r3, [pc, #16]	@ (800d438 <__assert_func+0x38>)
 800d426:	461c      	mov	r4, r3
 800d428:	e7f3      	b.n	800d412 <__assert_func+0x12>
 800d42a:	bf00      	nop
 800d42c:	2000002c 	.word	0x2000002c
 800d430:	0800db94 	.word	0x0800db94
 800d434:	0800dba1 	.word	0x0800dba1
 800d438:	0800dbcf 	.word	0x0800dbcf

0800d43c <_calloc_r>:
 800d43c:	b570      	push	{r4, r5, r6, lr}
 800d43e:	fba1 5402 	umull	r5, r4, r1, r2
 800d442:	b934      	cbnz	r4, 800d452 <_calloc_r+0x16>
 800d444:	4629      	mov	r1, r5
 800d446:	f7ff fb0b 	bl	800ca60 <_malloc_r>
 800d44a:	4606      	mov	r6, r0
 800d44c:	b928      	cbnz	r0, 800d45a <_calloc_r+0x1e>
 800d44e:	4630      	mov	r0, r6
 800d450:	bd70      	pop	{r4, r5, r6, pc}
 800d452:	220c      	movs	r2, #12
 800d454:	6002      	str	r2, [r0, #0]
 800d456:	2600      	movs	r6, #0
 800d458:	e7f9      	b.n	800d44e <_calloc_r+0x12>
 800d45a:	462a      	mov	r2, r5
 800d45c:	4621      	mov	r1, r4
 800d45e:	f7fe fbb0 	bl	800bbc2 <memset>
 800d462:	e7f4      	b.n	800d44e <_calloc_r+0x12>

0800d464 <__ascii_mbtowc>:
 800d464:	b082      	sub	sp, #8
 800d466:	b901      	cbnz	r1, 800d46a <__ascii_mbtowc+0x6>
 800d468:	a901      	add	r1, sp, #4
 800d46a:	b142      	cbz	r2, 800d47e <__ascii_mbtowc+0x1a>
 800d46c:	b14b      	cbz	r3, 800d482 <__ascii_mbtowc+0x1e>
 800d46e:	7813      	ldrb	r3, [r2, #0]
 800d470:	600b      	str	r3, [r1, #0]
 800d472:	7812      	ldrb	r2, [r2, #0]
 800d474:	1e10      	subs	r0, r2, #0
 800d476:	bf18      	it	ne
 800d478:	2001      	movne	r0, #1
 800d47a:	b002      	add	sp, #8
 800d47c:	4770      	bx	lr
 800d47e:	4610      	mov	r0, r2
 800d480:	e7fb      	b.n	800d47a <__ascii_mbtowc+0x16>
 800d482:	f06f 0001 	mvn.w	r0, #1
 800d486:	e7f8      	b.n	800d47a <__ascii_mbtowc+0x16>

0800d488 <__ascii_wctomb>:
 800d488:	4603      	mov	r3, r0
 800d48a:	4608      	mov	r0, r1
 800d48c:	b141      	cbz	r1, 800d4a0 <__ascii_wctomb+0x18>
 800d48e:	2aff      	cmp	r2, #255	@ 0xff
 800d490:	d904      	bls.n	800d49c <__ascii_wctomb+0x14>
 800d492:	228a      	movs	r2, #138	@ 0x8a
 800d494:	601a      	str	r2, [r3, #0]
 800d496:	f04f 30ff 	mov.w	r0, #4294967295
 800d49a:	4770      	bx	lr
 800d49c:	700a      	strb	r2, [r1, #0]
 800d49e:	2001      	movs	r0, #1
 800d4a0:	4770      	bx	lr
	...

0800d4a4 <fiprintf>:
 800d4a4:	b40e      	push	{r1, r2, r3}
 800d4a6:	b503      	push	{r0, r1, lr}
 800d4a8:	4601      	mov	r1, r0
 800d4aa:	ab03      	add	r3, sp, #12
 800d4ac:	4805      	ldr	r0, [pc, #20]	@ (800d4c4 <fiprintf+0x20>)
 800d4ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4b2:	6800      	ldr	r0, [r0, #0]
 800d4b4:	9301      	str	r3, [sp, #4]
 800d4b6:	f000 f837 	bl	800d528 <_vfiprintf_r>
 800d4ba:	b002      	add	sp, #8
 800d4bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4c0:	b003      	add	sp, #12
 800d4c2:	4770      	bx	lr
 800d4c4:	2000002c 	.word	0x2000002c

0800d4c8 <abort>:
 800d4c8:	b508      	push	{r3, lr}
 800d4ca:	2006      	movs	r0, #6
 800d4cc:	f000 fa00 	bl	800d8d0 <raise>
 800d4d0:	2001      	movs	r0, #1
 800d4d2:	f7f4 fee3 	bl	800229c <_exit>

0800d4d6 <__sfputc_r>:
 800d4d6:	6893      	ldr	r3, [r2, #8]
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	b410      	push	{r4}
 800d4de:	6093      	str	r3, [r2, #8]
 800d4e0:	da08      	bge.n	800d4f4 <__sfputc_r+0x1e>
 800d4e2:	6994      	ldr	r4, [r2, #24]
 800d4e4:	42a3      	cmp	r3, r4
 800d4e6:	db01      	blt.n	800d4ec <__sfputc_r+0x16>
 800d4e8:	290a      	cmp	r1, #10
 800d4ea:	d103      	bne.n	800d4f4 <__sfputc_r+0x1e>
 800d4ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4f0:	f000 b932 	b.w	800d758 <__swbuf_r>
 800d4f4:	6813      	ldr	r3, [r2, #0]
 800d4f6:	1c58      	adds	r0, r3, #1
 800d4f8:	6010      	str	r0, [r2, #0]
 800d4fa:	7019      	strb	r1, [r3, #0]
 800d4fc:	4608      	mov	r0, r1
 800d4fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <__sfputs_r>:
 800d504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d506:	4606      	mov	r6, r0
 800d508:	460f      	mov	r7, r1
 800d50a:	4614      	mov	r4, r2
 800d50c:	18d5      	adds	r5, r2, r3
 800d50e:	42ac      	cmp	r4, r5
 800d510:	d101      	bne.n	800d516 <__sfputs_r+0x12>
 800d512:	2000      	movs	r0, #0
 800d514:	e007      	b.n	800d526 <__sfputs_r+0x22>
 800d516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d51a:	463a      	mov	r2, r7
 800d51c:	4630      	mov	r0, r6
 800d51e:	f7ff ffda 	bl	800d4d6 <__sfputc_r>
 800d522:	1c43      	adds	r3, r0, #1
 800d524:	d1f3      	bne.n	800d50e <__sfputs_r+0xa>
 800d526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d528 <_vfiprintf_r>:
 800d528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d52c:	460d      	mov	r5, r1
 800d52e:	b09d      	sub	sp, #116	@ 0x74
 800d530:	4614      	mov	r4, r2
 800d532:	4698      	mov	r8, r3
 800d534:	4606      	mov	r6, r0
 800d536:	b118      	cbz	r0, 800d540 <_vfiprintf_r+0x18>
 800d538:	6a03      	ldr	r3, [r0, #32]
 800d53a:	b90b      	cbnz	r3, 800d540 <_vfiprintf_r+0x18>
 800d53c:	f7fe fac8 	bl	800bad0 <__sinit>
 800d540:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d542:	07d9      	lsls	r1, r3, #31
 800d544:	d405      	bmi.n	800d552 <_vfiprintf_r+0x2a>
 800d546:	89ab      	ldrh	r3, [r5, #12]
 800d548:	059a      	lsls	r2, r3, #22
 800d54a:	d402      	bmi.n	800d552 <_vfiprintf_r+0x2a>
 800d54c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d54e:	f7fe fbb6 	bl	800bcbe <__retarget_lock_acquire_recursive>
 800d552:	89ab      	ldrh	r3, [r5, #12]
 800d554:	071b      	lsls	r3, r3, #28
 800d556:	d501      	bpl.n	800d55c <_vfiprintf_r+0x34>
 800d558:	692b      	ldr	r3, [r5, #16]
 800d55a:	b99b      	cbnz	r3, 800d584 <_vfiprintf_r+0x5c>
 800d55c:	4629      	mov	r1, r5
 800d55e:	4630      	mov	r0, r6
 800d560:	f000 f938 	bl	800d7d4 <__swsetup_r>
 800d564:	b170      	cbz	r0, 800d584 <_vfiprintf_r+0x5c>
 800d566:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d568:	07dc      	lsls	r4, r3, #31
 800d56a:	d504      	bpl.n	800d576 <_vfiprintf_r+0x4e>
 800d56c:	f04f 30ff 	mov.w	r0, #4294967295
 800d570:	b01d      	add	sp, #116	@ 0x74
 800d572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d576:	89ab      	ldrh	r3, [r5, #12]
 800d578:	0598      	lsls	r0, r3, #22
 800d57a:	d4f7      	bmi.n	800d56c <_vfiprintf_r+0x44>
 800d57c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d57e:	f7fe fb9f 	bl	800bcc0 <__retarget_lock_release_recursive>
 800d582:	e7f3      	b.n	800d56c <_vfiprintf_r+0x44>
 800d584:	2300      	movs	r3, #0
 800d586:	9309      	str	r3, [sp, #36]	@ 0x24
 800d588:	2320      	movs	r3, #32
 800d58a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d58e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d592:	2330      	movs	r3, #48	@ 0x30
 800d594:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d744 <_vfiprintf_r+0x21c>
 800d598:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d59c:	f04f 0901 	mov.w	r9, #1
 800d5a0:	4623      	mov	r3, r4
 800d5a2:	469a      	mov	sl, r3
 800d5a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5a8:	b10a      	cbz	r2, 800d5ae <_vfiprintf_r+0x86>
 800d5aa:	2a25      	cmp	r2, #37	@ 0x25
 800d5ac:	d1f9      	bne.n	800d5a2 <_vfiprintf_r+0x7a>
 800d5ae:	ebba 0b04 	subs.w	fp, sl, r4
 800d5b2:	d00b      	beq.n	800d5cc <_vfiprintf_r+0xa4>
 800d5b4:	465b      	mov	r3, fp
 800d5b6:	4622      	mov	r2, r4
 800d5b8:	4629      	mov	r1, r5
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	f7ff ffa2 	bl	800d504 <__sfputs_r>
 800d5c0:	3001      	adds	r0, #1
 800d5c2:	f000 80a7 	beq.w	800d714 <_vfiprintf_r+0x1ec>
 800d5c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5c8:	445a      	add	r2, fp
 800d5ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	f000 809f 	beq.w	800d714 <_vfiprintf_r+0x1ec>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5e0:	f10a 0a01 	add.w	sl, sl, #1
 800d5e4:	9304      	str	r3, [sp, #16]
 800d5e6:	9307      	str	r3, [sp, #28]
 800d5e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d5ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800d5ee:	4654      	mov	r4, sl
 800d5f0:	2205      	movs	r2, #5
 800d5f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5f6:	4853      	ldr	r0, [pc, #332]	@ (800d744 <_vfiprintf_r+0x21c>)
 800d5f8:	f7f2 fdea 	bl	80001d0 <memchr>
 800d5fc:	9a04      	ldr	r2, [sp, #16]
 800d5fe:	b9d8      	cbnz	r0, 800d638 <_vfiprintf_r+0x110>
 800d600:	06d1      	lsls	r1, r2, #27
 800d602:	bf44      	itt	mi
 800d604:	2320      	movmi	r3, #32
 800d606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d60a:	0713      	lsls	r3, r2, #28
 800d60c:	bf44      	itt	mi
 800d60e:	232b      	movmi	r3, #43	@ 0x2b
 800d610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d614:	f89a 3000 	ldrb.w	r3, [sl]
 800d618:	2b2a      	cmp	r3, #42	@ 0x2a
 800d61a:	d015      	beq.n	800d648 <_vfiprintf_r+0x120>
 800d61c:	9a07      	ldr	r2, [sp, #28]
 800d61e:	4654      	mov	r4, sl
 800d620:	2000      	movs	r0, #0
 800d622:	f04f 0c0a 	mov.w	ip, #10
 800d626:	4621      	mov	r1, r4
 800d628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d62c:	3b30      	subs	r3, #48	@ 0x30
 800d62e:	2b09      	cmp	r3, #9
 800d630:	d94b      	bls.n	800d6ca <_vfiprintf_r+0x1a2>
 800d632:	b1b0      	cbz	r0, 800d662 <_vfiprintf_r+0x13a>
 800d634:	9207      	str	r2, [sp, #28]
 800d636:	e014      	b.n	800d662 <_vfiprintf_r+0x13a>
 800d638:	eba0 0308 	sub.w	r3, r0, r8
 800d63c:	fa09 f303 	lsl.w	r3, r9, r3
 800d640:	4313      	orrs	r3, r2
 800d642:	9304      	str	r3, [sp, #16]
 800d644:	46a2      	mov	sl, r4
 800d646:	e7d2      	b.n	800d5ee <_vfiprintf_r+0xc6>
 800d648:	9b03      	ldr	r3, [sp, #12]
 800d64a:	1d19      	adds	r1, r3, #4
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	9103      	str	r1, [sp, #12]
 800d650:	2b00      	cmp	r3, #0
 800d652:	bfbb      	ittet	lt
 800d654:	425b      	neglt	r3, r3
 800d656:	f042 0202 	orrlt.w	r2, r2, #2
 800d65a:	9307      	strge	r3, [sp, #28]
 800d65c:	9307      	strlt	r3, [sp, #28]
 800d65e:	bfb8      	it	lt
 800d660:	9204      	strlt	r2, [sp, #16]
 800d662:	7823      	ldrb	r3, [r4, #0]
 800d664:	2b2e      	cmp	r3, #46	@ 0x2e
 800d666:	d10a      	bne.n	800d67e <_vfiprintf_r+0x156>
 800d668:	7863      	ldrb	r3, [r4, #1]
 800d66a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d66c:	d132      	bne.n	800d6d4 <_vfiprintf_r+0x1ac>
 800d66e:	9b03      	ldr	r3, [sp, #12]
 800d670:	1d1a      	adds	r2, r3, #4
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	9203      	str	r2, [sp, #12]
 800d676:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d67a:	3402      	adds	r4, #2
 800d67c:	9305      	str	r3, [sp, #20]
 800d67e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d754 <_vfiprintf_r+0x22c>
 800d682:	7821      	ldrb	r1, [r4, #0]
 800d684:	2203      	movs	r2, #3
 800d686:	4650      	mov	r0, sl
 800d688:	f7f2 fda2 	bl	80001d0 <memchr>
 800d68c:	b138      	cbz	r0, 800d69e <_vfiprintf_r+0x176>
 800d68e:	9b04      	ldr	r3, [sp, #16]
 800d690:	eba0 000a 	sub.w	r0, r0, sl
 800d694:	2240      	movs	r2, #64	@ 0x40
 800d696:	4082      	lsls	r2, r0
 800d698:	4313      	orrs	r3, r2
 800d69a:	3401      	adds	r4, #1
 800d69c:	9304      	str	r3, [sp, #16]
 800d69e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6a2:	4829      	ldr	r0, [pc, #164]	@ (800d748 <_vfiprintf_r+0x220>)
 800d6a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6a8:	2206      	movs	r2, #6
 800d6aa:	f7f2 fd91 	bl	80001d0 <memchr>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d03f      	beq.n	800d732 <_vfiprintf_r+0x20a>
 800d6b2:	4b26      	ldr	r3, [pc, #152]	@ (800d74c <_vfiprintf_r+0x224>)
 800d6b4:	bb1b      	cbnz	r3, 800d6fe <_vfiprintf_r+0x1d6>
 800d6b6:	9b03      	ldr	r3, [sp, #12]
 800d6b8:	3307      	adds	r3, #7
 800d6ba:	f023 0307 	bic.w	r3, r3, #7
 800d6be:	3308      	adds	r3, #8
 800d6c0:	9303      	str	r3, [sp, #12]
 800d6c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6c4:	443b      	add	r3, r7
 800d6c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6c8:	e76a      	b.n	800d5a0 <_vfiprintf_r+0x78>
 800d6ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6ce:	460c      	mov	r4, r1
 800d6d0:	2001      	movs	r0, #1
 800d6d2:	e7a8      	b.n	800d626 <_vfiprintf_r+0xfe>
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	3401      	adds	r4, #1
 800d6d8:	9305      	str	r3, [sp, #20]
 800d6da:	4619      	mov	r1, r3
 800d6dc:	f04f 0c0a 	mov.w	ip, #10
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6e6:	3a30      	subs	r2, #48	@ 0x30
 800d6e8:	2a09      	cmp	r2, #9
 800d6ea:	d903      	bls.n	800d6f4 <_vfiprintf_r+0x1cc>
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d0c6      	beq.n	800d67e <_vfiprintf_r+0x156>
 800d6f0:	9105      	str	r1, [sp, #20]
 800d6f2:	e7c4      	b.n	800d67e <_vfiprintf_r+0x156>
 800d6f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6f8:	4604      	mov	r4, r0
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	e7f0      	b.n	800d6e0 <_vfiprintf_r+0x1b8>
 800d6fe:	ab03      	add	r3, sp, #12
 800d700:	9300      	str	r3, [sp, #0]
 800d702:	462a      	mov	r2, r5
 800d704:	4b12      	ldr	r3, [pc, #72]	@ (800d750 <_vfiprintf_r+0x228>)
 800d706:	a904      	add	r1, sp, #16
 800d708:	4630      	mov	r0, r6
 800d70a:	f7fd fd9f 	bl	800b24c <_printf_float>
 800d70e:	4607      	mov	r7, r0
 800d710:	1c78      	adds	r0, r7, #1
 800d712:	d1d6      	bne.n	800d6c2 <_vfiprintf_r+0x19a>
 800d714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d716:	07d9      	lsls	r1, r3, #31
 800d718:	d405      	bmi.n	800d726 <_vfiprintf_r+0x1fe>
 800d71a:	89ab      	ldrh	r3, [r5, #12]
 800d71c:	059a      	lsls	r2, r3, #22
 800d71e:	d402      	bmi.n	800d726 <_vfiprintf_r+0x1fe>
 800d720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d722:	f7fe facd 	bl	800bcc0 <__retarget_lock_release_recursive>
 800d726:	89ab      	ldrh	r3, [r5, #12]
 800d728:	065b      	lsls	r3, r3, #25
 800d72a:	f53f af1f 	bmi.w	800d56c <_vfiprintf_r+0x44>
 800d72e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d730:	e71e      	b.n	800d570 <_vfiprintf_r+0x48>
 800d732:	ab03      	add	r3, sp, #12
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	462a      	mov	r2, r5
 800d738:	4b05      	ldr	r3, [pc, #20]	@ (800d750 <_vfiprintf_r+0x228>)
 800d73a:	a904      	add	r1, sp, #16
 800d73c:	4630      	mov	r0, r6
 800d73e:	f7fe f81d 	bl	800b77c <_printf_i>
 800d742:	e7e4      	b.n	800d70e <_vfiprintf_r+0x1e6>
 800d744:	0800dbd0 	.word	0x0800dbd0
 800d748:	0800dbda 	.word	0x0800dbda
 800d74c:	0800b24d 	.word	0x0800b24d
 800d750:	0800d505 	.word	0x0800d505
 800d754:	0800dbd6 	.word	0x0800dbd6

0800d758 <__swbuf_r>:
 800d758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d75a:	460e      	mov	r6, r1
 800d75c:	4614      	mov	r4, r2
 800d75e:	4605      	mov	r5, r0
 800d760:	b118      	cbz	r0, 800d76a <__swbuf_r+0x12>
 800d762:	6a03      	ldr	r3, [r0, #32]
 800d764:	b90b      	cbnz	r3, 800d76a <__swbuf_r+0x12>
 800d766:	f7fe f9b3 	bl	800bad0 <__sinit>
 800d76a:	69a3      	ldr	r3, [r4, #24]
 800d76c:	60a3      	str	r3, [r4, #8]
 800d76e:	89a3      	ldrh	r3, [r4, #12]
 800d770:	071a      	lsls	r2, r3, #28
 800d772:	d501      	bpl.n	800d778 <__swbuf_r+0x20>
 800d774:	6923      	ldr	r3, [r4, #16]
 800d776:	b943      	cbnz	r3, 800d78a <__swbuf_r+0x32>
 800d778:	4621      	mov	r1, r4
 800d77a:	4628      	mov	r0, r5
 800d77c:	f000 f82a 	bl	800d7d4 <__swsetup_r>
 800d780:	b118      	cbz	r0, 800d78a <__swbuf_r+0x32>
 800d782:	f04f 37ff 	mov.w	r7, #4294967295
 800d786:	4638      	mov	r0, r7
 800d788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d78a:	6823      	ldr	r3, [r4, #0]
 800d78c:	6922      	ldr	r2, [r4, #16]
 800d78e:	1a98      	subs	r0, r3, r2
 800d790:	6963      	ldr	r3, [r4, #20]
 800d792:	b2f6      	uxtb	r6, r6
 800d794:	4283      	cmp	r3, r0
 800d796:	4637      	mov	r7, r6
 800d798:	dc05      	bgt.n	800d7a6 <__swbuf_r+0x4e>
 800d79a:	4621      	mov	r1, r4
 800d79c:	4628      	mov	r0, r5
 800d79e:	f7ff fde9 	bl	800d374 <_fflush_r>
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	d1ed      	bne.n	800d782 <__swbuf_r+0x2a>
 800d7a6:	68a3      	ldr	r3, [r4, #8]
 800d7a8:	3b01      	subs	r3, #1
 800d7aa:	60a3      	str	r3, [r4, #8]
 800d7ac:	6823      	ldr	r3, [r4, #0]
 800d7ae:	1c5a      	adds	r2, r3, #1
 800d7b0:	6022      	str	r2, [r4, #0]
 800d7b2:	701e      	strb	r6, [r3, #0]
 800d7b4:	6962      	ldr	r2, [r4, #20]
 800d7b6:	1c43      	adds	r3, r0, #1
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d004      	beq.n	800d7c6 <__swbuf_r+0x6e>
 800d7bc:	89a3      	ldrh	r3, [r4, #12]
 800d7be:	07db      	lsls	r3, r3, #31
 800d7c0:	d5e1      	bpl.n	800d786 <__swbuf_r+0x2e>
 800d7c2:	2e0a      	cmp	r6, #10
 800d7c4:	d1df      	bne.n	800d786 <__swbuf_r+0x2e>
 800d7c6:	4621      	mov	r1, r4
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	f7ff fdd3 	bl	800d374 <_fflush_r>
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d0d9      	beq.n	800d786 <__swbuf_r+0x2e>
 800d7d2:	e7d6      	b.n	800d782 <__swbuf_r+0x2a>

0800d7d4 <__swsetup_r>:
 800d7d4:	b538      	push	{r3, r4, r5, lr}
 800d7d6:	4b29      	ldr	r3, [pc, #164]	@ (800d87c <__swsetup_r+0xa8>)
 800d7d8:	4605      	mov	r5, r0
 800d7da:	6818      	ldr	r0, [r3, #0]
 800d7dc:	460c      	mov	r4, r1
 800d7de:	b118      	cbz	r0, 800d7e8 <__swsetup_r+0x14>
 800d7e0:	6a03      	ldr	r3, [r0, #32]
 800d7e2:	b90b      	cbnz	r3, 800d7e8 <__swsetup_r+0x14>
 800d7e4:	f7fe f974 	bl	800bad0 <__sinit>
 800d7e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7ec:	0719      	lsls	r1, r3, #28
 800d7ee:	d422      	bmi.n	800d836 <__swsetup_r+0x62>
 800d7f0:	06da      	lsls	r2, r3, #27
 800d7f2:	d407      	bmi.n	800d804 <__swsetup_r+0x30>
 800d7f4:	2209      	movs	r2, #9
 800d7f6:	602a      	str	r2, [r5, #0]
 800d7f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7fc:	81a3      	strh	r3, [r4, #12]
 800d7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d802:	e033      	b.n	800d86c <__swsetup_r+0x98>
 800d804:	0758      	lsls	r0, r3, #29
 800d806:	d512      	bpl.n	800d82e <__swsetup_r+0x5a>
 800d808:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d80a:	b141      	cbz	r1, 800d81e <__swsetup_r+0x4a>
 800d80c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d810:	4299      	cmp	r1, r3
 800d812:	d002      	beq.n	800d81a <__swsetup_r+0x46>
 800d814:	4628      	mov	r0, r5
 800d816:	f7ff f8af 	bl	800c978 <_free_r>
 800d81a:	2300      	movs	r3, #0
 800d81c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d81e:	89a3      	ldrh	r3, [r4, #12]
 800d820:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d824:	81a3      	strh	r3, [r4, #12]
 800d826:	2300      	movs	r3, #0
 800d828:	6063      	str	r3, [r4, #4]
 800d82a:	6923      	ldr	r3, [r4, #16]
 800d82c:	6023      	str	r3, [r4, #0]
 800d82e:	89a3      	ldrh	r3, [r4, #12]
 800d830:	f043 0308 	orr.w	r3, r3, #8
 800d834:	81a3      	strh	r3, [r4, #12]
 800d836:	6923      	ldr	r3, [r4, #16]
 800d838:	b94b      	cbnz	r3, 800d84e <__swsetup_r+0x7a>
 800d83a:	89a3      	ldrh	r3, [r4, #12]
 800d83c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d844:	d003      	beq.n	800d84e <__swsetup_r+0x7a>
 800d846:	4621      	mov	r1, r4
 800d848:	4628      	mov	r0, r5
 800d84a:	f000 f883 	bl	800d954 <__smakebuf_r>
 800d84e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d852:	f013 0201 	ands.w	r2, r3, #1
 800d856:	d00a      	beq.n	800d86e <__swsetup_r+0x9a>
 800d858:	2200      	movs	r2, #0
 800d85a:	60a2      	str	r2, [r4, #8]
 800d85c:	6962      	ldr	r2, [r4, #20]
 800d85e:	4252      	negs	r2, r2
 800d860:	61a2      	str	r2, [r4, #24]
 800d862:	6922      	ldr	r2, [r4, #16]
 800d864:	b942      	cbnz	r2, 800d878 <__swsetup_r+0xa4>
 800d866:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d86a:	d1c5      	bne.n	800d7f8 <__swsetup_r+0x24>
 800d86c:	bd38      	pop	{r3, r4, r5, pc}
 800d86e:	0799      	lsls	r1, r3, #30
 800d870:	bf58      	it	pl
 800d872:	6962      	ldrpl	r2, [r4, #20]
 800d874:	60a2      	str	r2, [r4, #8]
 800d876:	e7f4      	b.n	800d862 <__swsetup_r+0x8e>
 800d878:	2000      	movs	r0, #0
 800d87a:	e7f7      	b.n	800d86c <__swsetup_r+0x98>
 800d87c:	2000002c 	.word	0x2000002c

0800d880 <_raise_r>:
 800d880:	291f      	cmp	r1, #31
 800d882:	b538      	push	{r3, r4, r5, lr}
 800d884:	4605      	mov	r5, r0
 800d886:	460c      	mov	r4, r1
 800d888:	d904      	bls.n	800d894 <_raise_r+0x14>
 800d88a:	2316      	movs	r3, #22
 800d88c:	6003      	str	r3, [r0, #0]
 800d88e:	f04f 30ff 	mov.w	r0, #4294967295
 800d892:	bd38      	pop	{r3, r4, r5, pc}
 800d894:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d896:	b112      	cbz	r2, 800d89e <_raise_r+0x1e>
 800d898:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d89c:	b94b      	cbnz	r3, 800d8b2 <_raise_r+0x32>
 800d89e:	4628      	mov	r0, r5
 800d8a0:	f000 f830 	bl	800d904 <_getpid_r>
 800d8a4:	4622      	mov	r2, r4
 800d8a6:	4601      	mov	r1, r0
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8ae:	f000 b817 	b.w	800d8e0 <_kill_r>
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	d00a      	beq.n	800d8cc <_raise_r+0x4c>
 800d8b6:	1c59      	adds	r1, r3, #1
 800d8b8:	d103      	bne.n	800d8c2 <_raise_r+0x42>
 800d8ba:	2316      	movs	r3, #22
 800d8bc:	6003      	str	r3, [r0, #0]
 800d8be:	2001      	movs	r0, #1
 800d8c0:	e7e7      	b.n	800d892 <_raise_r+0x12>
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d8c8:	4620      	mov	r0, r4
 800d8ca:	4798      	blx	r3
 800d8cc:	2000      	movs	r0, #0
 800d8ce:	e7e0      	b.n	800d892 <_raise_r+0x12>

0800d8d0 <raise>:
 800d8d0:	4b02      	ldr	r3, [pc, #8]	@ (800d8dc <raise+0xc>)
 800d8d2:	4601      	mov	r1, r0
 800d8d4:	6818      	ldr	r0, [r3, #0]
 800d8d6:	f7ff bfd3 	b.w	800d880 <_raise_r>
 800d8da:	bf00      	nop
 800d8dc:	2000002c 	.word	0x2000002c

0800d8e0 <_kill_r>:
 800d8e0:	b538      	push	{r3, r4, r5, lr}
 800d8e2:	4d07      	ldr	r5, [pc, #28]	@ (800d900 <_kill_r+0x20>)
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	4604      	mov	r4, r0
 800d8e8:	4608      	mov	r0, r1
 800d8ea:	4611      	mov	r1, r2
 800d8ec:	602b      	str	r3, [r5, #0]
 800d8ee:	f7f4 fcc5 	bl	800227c <_kill>
 800d8f2:	1c43      	adds	r3, r0, #1
 800d8f4:	d102      	bne.n	800d8fc <_kill_r+0x1c>
 800d8f6:	682b      	ldr	r3, [r5, #0]
 800d8f8:	b103      	cbz	r3, 800d8fc <_kill_r+0x1c>
 800d8fa:	6023      	str	r3, [r4, #0]
 800d8fc:	bd38      	pop	{r3, r4, r5, pc}
 800d8fe:	bf00      	nop
 800d900:	20000624 	.word	0x20000624

0800d904 <_getpid_r>:
 800d904:	f7f4 bcb2 	b.w	800226c <_getpid>

0800d908 <__swhatbuf_r>:
 800d908:	b570      	push	{r4, r5, r6, lr}
 800d90a:	460c      	mov	r4, r1
 800d90c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d910:	2900      	cmp	r1, #0
 800d912:	b096      	sub	sp, #88	@ 0x58
 800d914:	4615      	mov	r5, r2
 800d916:	461e      	mov	r6, r3
 800d918:	da0d      	bge.n	800d936 <__swhatbuf_r+0x2e>
 800d91a:	89a3      	ldrh	r3, [r4, #12]
 800d91c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d920:	f04f 0100 	mov.w	r1, #0
 800d924:	bf14      	ite	ne
 800d926:	2340      	movne	r3, #64	@ 0x40
 800d928:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d92c:	2000      	movs	r0, #0
 800d92e:	6031      	str	r1, [r6, #0]
 800d930:	602b      	str	r3, [r5, #0]
 800d932:	b016      	add	sp, #88	@ 0x58
 800d934:	bd70      	pop	{r4, r5, r6, pc}
 800d936:	466a      	mov	r2, sp
 800d938:	f000 f848 	bl	800d9cc <_fstat_r>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	dbec      	blt.n	800d91a <__swhatbuf_r+0x12>
 800d940:	9901      	ldr	r1, [sp, #4]
 800d942:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d946:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d94a:	4259      	negs	r1, r3
 800d94c:	4159      	adcs	r1, r3
 800d94e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d952:	e7eb      	b.n	800d92c <__swhatbuf_r+0x24>

0800d954 <__smakebuf_r>:
 800d954:	898b      	ldrh	r3, [r1, #12]
 800d956:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d958:	079d      	lsls	r5, r3, #30
 800d95a:	4606      	mov	r6, r0
 800d95c:	460c      	mov	r4, r1
 800d95e:	d507      	bpl.n	800d970 <__smakebuf_r+0x1c>
 800d960:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d964:	6023      	str	r3, [r4, #0]
 800d966:	6123      	str	r3, [r4, #16]
 800d968:	2301      	movs	r3, #1
 800d96a:	6163      	str	r3, [r4, #20]
 800d96c:	b003      	add	sp, #12
 800d96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d970:	ab01      	add	r3, sp, #4
 800d972:	466a      	mov	r2, sp
 800d974:	f7ff ffc8 	bl	800d908 <__swhatbuf_r>
 800d978:	9f00      	ldr	r7, [sp, #0]
 800d97a:	4605      	mov	r5, r0
 800d97c:	4639      	mov	r1, r7
 800d97e:	4630      	mov	r0, r6
 800d980:	f7ff f86e 	bl	800ca60 <_malloc_r>
 800d984:	b948      	cbnz	r0, 800d99a <__smakebuf_r+0x46>
 800d986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d98a:	059a      	lsls	r2, r3, #22
 800d98c:	d4ee      	bmi.n	800d96c <__smakebuf_r+0x18>
 800d98e:	f023 0303 	bic.w	r3, r3, #3
 800d992:	f043 0302 	orr.w	r3, r3, #2
 800d996:	81a3      	strh	r3, [r4, #12]
 800d998:	e7e2      	b.n	800d960 <__smakebuf_r+0xc>
 800d99a:	89a3      	ldrh	r3, [r4, #12]
 800d99c:	6020      	str	r0, [r4, #0]
 800d99e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9a2:	81a3      	strh	r3, [r4, #12]
 800d9a4:	9b01      	ldr	r3, [sp, #4]
 800d9a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d9aa:	b15b      	cbz	r3, 800d9c4 <__smakebuf_r+0x70>
 800d9ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9b0:	4630      	mov	r0, r6
 800d9b2:	f000 f81d 	bl	800d9f0 <_isatty_r>
 800d9b6:	b128      	cbz	r0, 800d9c4 <__smakebuf_r+0x70>
 800d9b8:	89a3      	ldrh	r3, [r4, #12]
 800d9ba:	f023 0303 	bic.w	r3, r3, #3
 800d9be:	f043 0301 	orr.w	r3, r3, #1
 800d9c2:	81a3      	strh	r3, [r4, #12]
 800d9c4:	89a3      	ldrh	r3, [r4, #12]
 800d9c6:	431d      	orrs	r5, r3
 800d9c8:	81a5      	strh	r5, [r4, #12]
 800d9ca:	e7cf      	b.n	800d96c <__smakebuf_r+0x18>

0800d9cc <_fstat_r>:
 800d9cc:	b538      	push	{r3, r4, r5, lr}
 800d9ce:	4d07      	ldr	r5, [pc, #28]	@ (800d9ec <_fstat_r+0x20>)
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	4608      	mov	r0, r1
 800d9d6:	4611      	mov	r1, r2
 800d9d8:	602b      	str	r3, [r5, #0]
 800d9da:	f7f4 fcaf 	bl	800233c <_fstat>
 800d9de:	1c43      	adds	r3, r0, #1
 800d9e0:	d102      	bne.n	800d9e8 <_fstat_r+0x1c>
 800d9e2:	682b      	ldr	r3, [r5, #0]
 800d9e4:	b103      	cbz	r3, 800d9e8 <_fstat_r+0x1c>
 800d9e6:	6023      	str	r3, [r4, #0]
 800d9e8:	bd38      	pop	{r3, r4, r5, pc}
 800d9ea:	bf00      	nop
 800d9ec:	20000624 	.word	0x20000624

0800d9f0 <_isatty_r>:
 800d9f0:	b538      	push	{r3, r4, r5, lr}
 800d9f2:	4d06      	ldr	r5, [pc, #24]	@ (800da0c <_isatty_r+0x1c>)
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	4604      	mov	r4, r0
 800d9f8:	4608      	mov	r0, r1
 800d9fa:	602b      	str	r3, [r5, #0]
 800d9fc:	f7f4 fcae 	bl	800235c <_isatty>
 800da00:	1c43      	adds	r3, r0, #1
 800da02:	d102      	bne.n	800da0a <_isatty_r+0x1a>
 800da04:	682b      	ldr	r3, [r5, #0]
 800da06:	b103      	cbz	r3, 800da0a <_isatty_r+0x1a>
 800da08:	6023      	str	r3, [r4, #0]
 800da0a:	bd38      	pop	{r3, r4, r5, pc}
 800da0c:	20000624 	.word	0x20000624

0800da10 <_init>:
 800da10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da12:	bf00      	nop
 800da14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da16:	bc08      	pop	{r3}
 800da18:	469e      	mov	lr, r3
 800da1a:	4770      	bx	lr

0800da1c <_fini>:
 800da1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da1e:	bf00      	nop
 800da20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da22:	bc08      	pop	{r3}
 800da24:	469e      	mov	lr, r3
 800da26:	4770      	bx	lr
